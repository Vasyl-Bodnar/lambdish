{"version":3.0,"file":"main.js","sourceRoot":"","names":["caml_array_blit","a1","i1","a2","i2","len","j","caml_atomic_cas","ref","o","n","caml_atomic_fetch_add","i","old","caml_atomic_load","jsoo_sys_getenv","process","globalThis","undefined","caml_record_backtrace_flag","r","l","caml_global_data","caml_exn_with_js_backtrace","exn","force","caml_maybe_attach_backtrace","caml_raise_with_arg","tag","arg","caml_string_of_jsbytes","x","caml_raise_with_string","msg","caml_invalid_argument","caml_ba_get_size_per_element","kind","caml_ba_create_buffer","size","view","Float32Array","Float64Array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","data","caml_ba_get_size","dims","n_dims","caml_int64_offset","Math","caml_raise_constant","caml_raise_zero_divide","MlInt64","lo","mi","hi","this","xhi","s","h","sign","offset","modulus","divisor","quotient","y","q","caml_int64_create_lo_hi","caml_int64_hi32","v","caml_int64_lo32","caml_array_bound_error","caml_ba_custom_name","Ml_Bigarray","layout","buffer","ofs","Array","a","b","im","re","total","k1","k2","NaN","Ml_Bigarray_c_1_1","caml_ba_create_unsafe","size_per_element","caml_js_from_array","caml_ba_create","dims_ml","caml_ba_set_1","ba","i0","caml_subarray_to_jsbytes","f","String","null","caml_convert_bytes_to_array","caml_blit_bytes","s1","s2","c1","c2","caml_str_repeat","caml_convert_string_to_bytes","jsoo_is_ascii","caml_utf16_of_utf8","t","c","MlBytes","contents","length","content","caml_bytes_of_jsbytes","caml_jsbytes_of_string","caml_bytes_of_string","caml_blit_string","d","e","caml_bytes_bound_error","caml_bytes_unsafe_get","caml_bytes_get","caml_int64_of_bytes","caml_bytes_get64","caml_bytes_unsafe_set","caml_bytes_set","caml_int64_to_bytes","caml_bytes_set64","i64","caml_call_gen","args","argsLen","g","nargs","extra_args","arguments","caml_check_bound","array","index","caml_classify_float","isFinite","isNaN","caml_is_continuation_tag","log2_ok","jsoo_floor_log2","Infinity","caml_int32_bits_of_float","float32a","int32a","caml_int64_create_lo_mi_hi","caml_int64_bits_of_float","exp","k","r3","r2","r1","caml_ba_serialize","writer","sz","complex","caml_int32_float_of_bits","caml_int64_float_of_bits","res","caml_failwith","caml_ba_deserialize","reader","name","num_dims","size_dim","size_dim_hi","size_dim_lo","sixty","int64","caml_ba_compare","caml_mul","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_float","v0","caml_ba_hash","num_elts","w","caml_int32_unmarshal","caml_nativeint_unmarshal","caml_int64_unmarshal","caml_int64_marshal","sizes","caml_int64_compare","caml_int64_hash","caml_custom_ops","caml_compare_val_get_custom","caml_compare_val_number_custom","num","custom","swap","comp","caml_is_ml_string","caml_is_ml_bytes","caml_compare_val_tag","Number","caml_int_compare","caml_string_compare","caml_bytes_compare","caml_compare_val","stack","tag_a","tag_b","caml_compare","caml_convert_raw_backtrace","caml_create_bytes","caml_domain_dls","caml_domain_dls_get","unit","caml_domain_dls_set","caml_equal","caml_fill_bytes","caml_parse_format","fmt","caml_finish_formatting","rawbuffer","caml_format_float","toFixed","dp","parseInt","prec","p","caml_format_int","caml_oo_last_id","caml_fresh_oo_id","caml_jsstring_of_string","fs_node_supported","make_path_is_absolute","posix","path","win32","splitDeviceRe","result","device","isUnc","Boolean","root","sep","path_is_absolute","caml_trailing_slash","caml_current_dir","caml_make_path","comp0","ncomp","caml_utf8_of_utf16","caml_string_of_jsstring","unix_error","make_unix_err_args","code","syscall","errno","variant","caml_named_values","caml_named_value","nm","caml_raise_with_args","caml_bytes_of_array","caml_raise_sys_error","caml_raise_no_such_file","caml_uint8_array_of_bytes","caml_ml_bytes_length","MlFile","MlFakeFile","buf","pos","clen","new_str","old_data","MlFakeFd","file","flags","MlFakeDevice","Symbol","name_slash","mode","raise_unix","parent","RegExp","seen","m","entry","ok","bytes","caml_ml_string_length","caml_string_unsafe_get","caml_uint8_array_of_string","MlNodeFd","fd","require","err","buf_offset","read","MlNodeDevice","consts","key","isCharacterDevice","js_stats","to_dir","target","link","file_kind","caml_get_root","caml_root","jsoo_mount_point","resolve_fs_device","caml_create_file","jsoo_create_file","caml_fs_init","tmp","caml_get_exception_raw_backtrace","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_mix_bytes_arr","caml_ml_bytes_content","caml_hash_mix_bytes","caml_hash_mix_final","caml_hash","count","limit","seed","obj","queue","rd","wr","hh","caml_hexstring_of_float","style","exp_sign","sign_str","cst","x_str","idx","caml_int64_is_zero","caml_int64_of_int32","caml_int64_to_int32","caml_int64_is_negative","caml_int64_neg","caml_int64_format","wbase","cvtbl","caml_int64_or","caml_js_call","caml_callback","caml_js_function_arity","caml_js_wrap_callback_unsafe","caml_new_string","caml_int64_add","caml_int64_mul","caml_int64_ult","caml_parse_sign_and_base","base","caml_parse_digit","caml_int64_of_string","base64","threshold","caml_ba_get_1","caml_int64_xor","caml_int64_shift_right_unsigned","caml_int64_shift_left","caml_lxm_next","shift_l","shift_r","or","xor","add","mul","rotl","get","set","M","daba","z","q0","q1","st","x0","x1","caml_make_vect","init","caml_MD5Init","ArrayBuffer","b32","Uint32Array","b8","caml_MD5Transform","xx","ff","gg","ii","caml_MD5Update","ctx","input","input_len","in_buf","input_pos","missing","caml_MD5Final","caml_string_of_array","caml_md5_bytes","caml_md5_string","caml_ml_debug_info_status","caml_ml_channels","caml_ml_flush","chanid","chan","caml_sys_open_for_node","fs","fd2","caml_sys_fds","MlFakeFd_out","console","src","caml_sys_open_internal","caml_sys_open","_perms","caml_ml_open_descriptor_in","refill","channel","caml_ml_open_descriptor_out","buffered","caml_ml_out_channels_list","caml_string_of_bytes","caml_ml_output_bytes","id","caml_ml_output","caml_ml_output_char","caml_notequal","caml_obj_tag","Function","caml_build_symbols","toc","symb","caml_register_global","name_opt","nid","caml_register_named_value","caml_string_equal","caml_string_bound_error","caml_string_get","caml_string_notequal","caml_sys_const_max_wosize","caml_raise_not_found","caml_sys_getenv","caml_sys_random_seed","now","Date","caml_trampoline","caml_trampoline_return","caml_wrap_exception","caml_is_special_exception","caml_format_exception","bucket","start","caml_fatal_uncaught_exception","handler","at_exit","caml_setup_uncaught_exception_handler","origin","event","opt","locfmt","default_setts","accu","std_lib","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","pad$6","str","chr","fmtty","pad$7","fmtty$0","pad$8","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","arity","failwith","invalid_arg","abs","l1","l2","string_of_bool","symbol$0","tl","hd","stderr","flush_all","output_string","oc","prerr_endline","exit_function","do_domain_local_at_exit","do_at_exit","max_array_length","max_string_length","map","make","sub","sub_string","blit","ofs1","ofs2","seplen","acc","dst","hd$0","tl$0","s$0","aux","seq$0","seq","next","x$0","new_len","new_buf","resize","more","old_pos","old_len","new_buffer","add_string","position","new_position","unique_value","key_counter","parent_keys","new_key","split_from_parent","init_orphan","split","ki","st$0","new_sz","new_st","v$0","at_exit_key","do_at_exit$0","default_float_precision","buffer_create","init_size","buffer_check_size","overhead","min_len","buffer_add_char","buffer_add_string","str_len","buffer_contents","string_of_formatting_lit","formatting_lit","str$0","bprint_fmtty","fmtty$1","fmtty$2","fmtty$3","fmtty$4","fmtty$5","fmtty$6","fmtty$7","fmtty$8","fmtty$9","sub_fmtty","fmtty$10","sub_fmtty$0","fmtty$11","fmtty$12","fmtty$13","fmtty$14","fmtty$15","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","rest1","rest2","rest1$0","rest2$0","rest1$1","rest2$1","rest1$2","rest2$2","rest1$3","rest2$3","rest1$4","rest2$4","rest1$5","rest2$5","rest1$6","rest2$6","rest1$7","ty1$0","rest2$7","ty2$0","rest1$8","ty12","ty11","rest2$8","ty22","ty21","f4","f2","rest1$9","rest2$9","rest1$10","rest2$10","rest1$11","rest2$11","rest1$12","rest2$12","rest1$13","rest2$13","type_padding","padty","padty$0","type_padprec","type_ignored_param_one","type_format_gen","fmt$0","fmtty0","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmt$1","fmt_rest$1","fmtty_rest$1","fmt$2","fmt_rest$2","fmtty_rest$2","fmt$3","fmt_rest$3","fmtty_rest$3","fmt$4","fmt_rest$4","fmtty_rest$4","fmt$5","fmt_rest$5","fmtty_rest$5","prec$4","fmt$6","fmt_rest$6","prec$5","pad$9","pad$10","fmtty_rest$6","prec$6","fmt$7","fmt_rest$7","prec$7","pad$11","pad$12","fmtty_rest$7","prec$8","fmt$8","fmt_rest$8","pad$13","pad$14","fmtty_rest$8","fmt$9","fmt_rest$9","fmt$10","fmt_rest$10","fmt$11","fmt_rest$11","fmt$12","fmtty_rest$9","fmt_rest$12","pad_opt","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","pad_opt$0","fmt$14","fmtty_rest$11","fmt_rest$14","fmt$15","fmtty_rest$12","fmt_rest$15","fmt$16","fmt_rest$16","fmtty$16","fmt$17","fmt_rest$17","formatting_gen","fmtty3","fmt3","str$1","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$17","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$18","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$19","fmt$20","sub_fmtty$2","pad_opt$1","sub_fmtty$3","pad_opt$2","type_ignored_format_substituti","fmtty$21","fmt$22","sub_fmtty$4","fmtty_rest$16","fmtty$20","fmt$21","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","fix_padding","width","width$0","fix_int_precision","res$1","res$0","string_to_caml_string","i$0","format_of_fconv","sth","transform_int_alt","digits","put","left","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","hex","caml_special_val","i$1","make_int_padding_precision","make_printf","p$0","p$1","make_padding","new_acc","make_printf$0","k$0","acc$0","acc$1","acc$2","acc$3","acc$4","k$3","kacc","k$1","k$4","k$2","make_invalid_arg","make_from_fmtty$0","make_custom$0","make_from_fmtty","arity$0","make_custom","output_acc","p$3","p$4","p$5","p$2","strput_acc","fprintf","eprintf","sprintf","n$0","printers","field","other_fields","to_string","char$0","line","char$1","line$0","file$0","char$2","line$1","file$1","constructor","fields_opt","constructor$0","print_raw_backtrace","outchan","raw_backtrace","slot","info$0","info","is_raise","register_printer","fn","old_printers","new_printers","success","errors","empty_backtrace","handle_uncaught_exception","exn$0","debugger_in_use","status","exn$1","raw_backtrace$0","create","i3","i4","i3$0","i4$0","mk","make_self_init","d1","d2","mk_default","params","lim","randomized_default","randomized","prng_key","key_index","tok_to_str","toks","toks$0","var$0","var$1","toks$1","parse","sett","cs$0","expr","cs","lambda","body","cs$2","integer","intg","xs$3","intg_len","xs","xs$0","xs$4","accu$0","xs$1","xs$2","accu$1","cs$4","str$2","toks$2","cs$5","toks$3","cs$6","inn_toks","inn_toks$0","cs$7","cs$3","try_lambda","lamb","body$0","cs$1","try_def","def","body$1","resl","try_match","node","pc","random","default_modl","substitute","tok","resolve","modl","next1","next2","k3","d3","next3","value","rename","var2","var2$0","ptoks","int$0","interpret","ts$0","tk","eval$0","ts","l$3","next$0","odata","osize","nsize$0","ndata","inplace","nsize","ndata_tail","cell","cell$0","nidx","match","match$0","bound_var","i$2","direct","depth","l1$0","l2$0","l$2","accu$2","l$0","l$1","a$0","accu$3","no_handler","undefined$0","get$0","true$0","false$0","array_constructor","addEventListener","t28","typ","capt","capture","passive","once","ev","callback","iter","mousedown","keydown","document","html_element","string_run","onload"],"sources":["/builtin/+array.js","/builtin/+domain.js","/builtin/+sys.js","/builtin/+backtrace.js","/builtin/+stdlib.js","/builtin/+jslib.js","/builtin/+fail.js","/builtin/+mlBytes.js","/builtin/+bigarray.js","/builtin/+int64.js","/builtin/+ieee_754.js","/builtin/+obj.js","/builtin/+ints.js","/builtin/+hash.js","/builtin/+marshal.js","/builtin/+compare.js","/builtin/+format.js","/builtin/+fs_node.js","/builtin/+fs.js","/builtin/+unix.js","/builtin/+fs_fake.js","/builtin/+prng.js","/builtin/+md5.js","/builtin/+io.js","/home/vasyl/.opam/5.0.0/lib/ocaml/camlinternalFormat.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/printexc.ml","/workspace_root/lib/parser.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/list.ml","/workspace_root/web/main.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/camlinternalFormatBasics.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/stdlib.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/sys.ml.in","/home/vasyl/.opam/5.0.0/lib/ocaml/int.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/bytes.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/string.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/seq.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/buffer.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/domain.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/array.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/char.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/printf.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/obj.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/digest.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/random.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/bigarray.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/hashtbl.ml","/workspace_root/lib/interpreter.ml","/home/vasyl/.opam/5.0.0/lib/js_of_ocaml-compiler/runtime/jsoo_runtime.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/callback.ml","/home/vasyl/.opam/5.0.0/lib/js_of_ocaml/js.ml","/home/vasyl/.opam/5.0.0/lib/js_of_ocaml/dom_html.ml","/home/vasyl/.opam/5.0.0/lib/js_of_ocaml/dom.ml","/home/vasyl/.opam/5.0.0/lib/ocaml/std_exit.ml"],"mappings":"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","sourcesContent":["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Array\n\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n//Provides: caml_floatarray_blit\nfunction caml_floatarray_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, mutable)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (mutable, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_array_fill\nfunction caml_array_fill(array, ofs, len, v){\n  for(var i = 0; i < len; i++){\n    array[ofs+i+1] = v;\n  }\n  return 0;\n}\n\n//Provides: caml_check_bound (mutable, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, mutable)\n//Requires: caml_array_bound_error\nfunction caml_make_vect (len, init) {\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\n//Requires: caml_array_bound_error\nfunction caml_make_float_vect(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n//Provides: caml_floatarray_create const (const)\n//Requires: caml_array_bound_error\nfunction caml_floatarray_create(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n","//Provides: caml_domain_dls\nvar caml_domain_dls = [0];\n\n//Provides: caml_domain_dls_set\n//Requires: caml_domain_dls\nfunction caml_domain_dls_set(a) {\n  caml_domain_dls = a;\n}\n\n//Provides: caml_domain_dls_get\n//Requires: caml_domain_dls\nfunction caml_domain_dls_get(unit) {\n  return caml_domain_dls;\n}\n\n\n//Provides: caml_atomic_load\nfunction caml_atomic_load(ref){\n  return ref[1];\n}\n\n//Provides: caml_atomic_cas\nfunction caml_atomic_cas(ref,o,n) {\n  if(ref[1] === o){\n    ref[1] = n;\n    return 1;\n  }\n  return 0;\n}\n\n//Provides: caml_atomic_fetch_add\nfunction caml_atomic_fetch_add(ref, i) {\n  var old = ref[1];\n  ref[1] += i;\n  return old;\n}\n\n//Provides: caml_atomic_exchange\nfunction caml_atomic_exchange(ref, v) {\n  var r = ref[1];\n  ref[1] = v;\n  return r;\n}\n\n//Provides: caml_ml_domain_unique_token\nvar caml_ml_domain_unique_token_ = [0]\nfunction caml_ml_domain_unique_token(unit) {\n  return caml_ml_domain_unique_token_\n}\n\n\n//Provides: caml_ml_domain_set_name\nfunction caml_ml_domain_set_name(_name) {\n  return 0;\n}\n\n//Provides: caml_recommended_domain_count\nfunction caml_recommended_domain_count(unit) { return 1 }\n\n\n//Provides: caml_domain_id\nvar caml_domain_id = 0;\n\n//Provides: caml_domain_spawn\n//Requires: caml_ml_mutex_unlock\n//Requires: caml_domain_id\n//Requires: caml_callback\nvar caml_domain_latest_idx = 1\nfunction caml_domain_spawn(f,mutex){\n    var id = caml_domain_latest_idx++;\n    var old = caml_domain_id;\n    caml_domain_id = id;\n    caml_callback(f,[0]);\n    caml_domain_id = old;\n    caml_ml_mutex_unlock(mutex);\n    return id;\n}\n\n\n//Provides: caml_ml_domain_id\n//Requires: caml_domain_id\nfunction caml_ml_domain_id(unit){\n    return caml_domain_id;\n}\n\n\n//Provides: caml_ml_domain_cpu_relax\nfunction caml_ml_domain_cpu_relax(unit){\n    return 0;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Sys\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  if(globalThis.quit) globalThis.quit(code);\n  //nodejs\n  if(globalThis.process && globalThis.process.exit)\n    globalThis.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_is_special_exception\nfunction caml_is_special_exception(exn){\n  switch(exn[2]) {\n  case -8: // Match_failure\n  case -11: // Assert_failure\n  case -12: // Undefined_recursive_module\n    return 1;\n  default:\n    return 0;\n  }\n}\n\n//Provides: caml_format_exception\n//Requires: MlBytes, caml_is_special_exception\nfunction caml_format_exception(exn){\n  var r = \"\";\n  if(exn[0] == 0) {\n    r += exn[1][1];\n    if(exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1])) {\n\n      var bucket = exn[2];\n      var start = 1;\n    } else {\n      var start = 2\n      var bucket = exn;\n    }\n    r += \"(\";\n    for(var i = start; i < bucket.length; i ++){\n      if(i > start) r+=\", \";\n      var v = bucket[i]\n      if(typeof v == \"number\")\n        r+= v.toString();\n      else if(v instanceof MlBytes){\n        r+= '\"' + v.toString() + '\"';\n      }\n      else if(typeof v == \"string\"){\n        r+= '\"' + v.toString() + '\"';\n      }\n      else r += \"_\";\n    }\n    r += \")\"\n  } else if (exn[0] == 248){\n    r += exn[1]\n  }\n  return r\n}\n\n//Provides: caml_fatal_uncaught_exception\n//Requires: caml_named_value, caml_format_exception, caml_callback\nfunction caml_fatal_uncaught_exception(err){\n  if(err instanceof Array && (err[0] == 0 || err[0] == 248)) {\n    var handler = caml_named_value(\"Printexc.handle_uncaught_exception\");\n    if(handler) caml_callback(handler, [err,false]);\n    else {\n      var msg = caml_format_exception(err);\n      var at_exit = caml_named_value(\"Pervasives.do_at_exit\");\n      if(at_exit) caml_callback(at_exit, [0]);\n      console.error(\"Fatal error: exception \" + msg + \"\\n\");\n      if(err.js_error) throw err.js_error;\n    }\n  }\n  else {\n    throw err\n  }\n}\n\n//Provides: caml_set_static_env\nfunction caml_set_static_env(k,v){\n  if(!globalThis.jsoo_static_env)\n    globalThis.jsoo_static_env = {}\n  globalThis.jsoo_static_env[k] = v;\n  return 0;\n}\n\n//Provides: jsoo_sys_getenv (const)\nfunction jsoo_sys_getenv(n) {\n  var process = globalThis.process;\n  //nodejs env\n  if(process\n     && process.env\n     && process.env[n] != undefined)\n    return process.env[n];\n  if(globalThis.jsoo_static_env\n     && globalThis.jsoo_static_env[n])\n    return globalThis.jsoo_static_env[n]\n}\n\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_string_of_jsstring\n//Requires: caml_jsstring_of_string\n//Requires: jsoo_sys_getenv\nfunction caml_sys_getenv (name) {\n  var r = jsoo_sys_getenv(caml_jsstring_of_string(name));\n  if(r === undefined)\n    caml_raise_not_found ();\n  return caml_string_of_jsstring(r)\n}\n\n//Provides: caml_sys_unsafe_getenv\n//Requires: caml_sys_getenv\nfunction caml_sys_unsafe_getenv(name){\n  return caml_sys_getenv (name);\n}\n\n//Provides: caml_argv\n//Requires: caml_string_of_jsstring\nvar caml_argv = ((function () {\n  var process = globalThis.process;\n  var main = \"a.out\";\n  var args = []\n\n  if(process\n     && process.argv\n     && process.argv.length > 1) {\n    var argv = process.argv\n    //nodejs\n    main = argv[1];\n    args = argv.slice(2);\n  }\n\n  var p = caml_string_of_jsstring(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_string_of_jsstring(args[i]));\n  return args2;\n})())\n\n//Provides: caml_executable_name\n//Requires: caml_argv\nvar caml_executable_name = caml_argv[1]\n\n//Provides: caml_sys_get_argv\n//Requires: caml_argv\nfunction caml_sys_get_argv (a) {\n  return [0, caml_argv[1], caml_argv];\n}\n\n//Provides: caml_sys_argv\n//Requires: caml_argv\nfunction caml_sys_argv (a) {\n  return caml_argv;\n}\n\n//Provides: caml_sys_modify_argv\n//Requires: caml_argv\nfunction caml_sys_modify_argv(arg){\n  caml_argv = arg;\n  return 0;\n}\n\n//Provides: caml_sys_executable_name const\n//Requires: caml_executable_name\nfunction caml_sys_executable_name(a){\n  return caml_executable_name\n}\n\n//Provides: caml_sys_system_command\n//Requires: caml_jsstring_of_string\nfunction caml_sys_system_command(cmd){\n  var cmd = caml_jsstring_of_string(cmd);\n  if (typeof require != \"undefined\"){\n    var child_process = require('child_process');\n    if(child_process && child_process.execSync)\n      try {\n        child_process.execSync(cmd,{stdio: 'inherit'});\n        return 0\n      } catch (e) {\n        return 1\n      }\n  }\n  else return 127;\n}\n\n//Provides: caml_sys_system_command\n//Requires: caml_jsstring_of_string\n//If: browser\nfunction caml_sys_system_command(cmd){\n  return 127;\n}\n\n//Provides: caml_sys_time mutable\nvar caml_initial_time = (new Date()).getTime() * 0.001;\nfunction caml_sys_time () {\n  var now = (new Date()).getTime();\n  return now * 0.001 - caml_initial_time;\n}\n\n//Provides: caml_sys_time_include_children\n//Requires: caml_sys_time\nfunction caml_sys_time_include_children(b) {\n  return caml_sys_time();\n}\n\n//Provides: caml_sys_random_seed mutable\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  if (globalThis.crypto) {\n     if (globalThis.crypto.getRandomValues) {\n       var a = globalThis.crypto.getRandomValues(new Int32Array(4));\n       return [0, a[0], a[1], a[2], a[3]];\n     } else if (globalThis.crypto.randomBytes) {\n       var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);\n       return [0, a[0], a[1], a[2], a[3]];\n     }\n  }\n  var now = (new Date()).getTime();\n  var x = now^0xffffffff*Math.random();\n  return [0,x];\n}\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_unix const\n//Requires: os_type\nfunction caml_sys_const_ostype_unix () { return os_type == \"Unix\" ? 1 : 0; }\n//Provides: caml_sys_const_ostype_win32 const\n//Requires: os_type\nfunction caml_sys_const_ostype_win32 () { return os_type == \"Win32\" ? 1 : 0; }\n//Provides: caml_sys_const_ostype_cygwin const\n//Requires: os_type\nfunction caml_sys_const_ostype_cygwin () { return os_type == \"Cygwin\" ? 1 : 0; }\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_string_of_jsbytes\nfunction caml_sys_const_backend_type () {\n  return [0, caml_string_of_jsbytes(\"js_of_ocaml\")];\n}\n\n//Provides: os_type\nvar os_type = (globalThis.process &&\n               globalThis.process.platform &&\n               globalThis.process.platform == \"win32\") ? \"Cygwin\" : \"Unix\";\n\n\n//Provides: caml_sys_get_config const\n//Requires: caml_string_of_jsbytes, os_type\nfunction caml_sys_get_config () {\n  return [0, caml_string_of_jsbytes(os_type), 32, 0];\n}\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_runtime_variant\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_variant(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n//Provides: caml_runtime_parameters\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_parameters(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_sys_const_naked_pointers_checked const (const)\nfunction caml_sys_const_naked_pointers_checked(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n\n\n//Provides: caml_sys_is_regular_file\n//Requires: resolve_fs_device\nfunction caml_sys_is_regular_file(name) {\n  var root = resolve_fs_device(name);\n  return root.device.isFile(root.rest);\n}\n//Always\n//Requires: caml_fatal_uncaught_exception\nfunction caml_setup_uncaught_exception_handler() {\n  var process = globalThis.process;\n  if(process && process.on) {\n    process.on('uncaughtException', function (err, origin) {\n      caml_fatal_uncaught_exception(err);\n      process.exit (2);\n    })\n  }\n  else if(globalThis.addEventListener){\n    globalThis.addEventListener('error', function(event){\n      if(event.error){\n        caml_fatal_uncaught_exception(event.error);\n      }\n    });\n  }\n}\ncaml_setup_uncaught_exception_handler();\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n//Provides: caml_record_backtrace_flag\n//Requires: jsoo_sys_getenv\nvar caml_record_backtrace_flag = FLAG(\"with-js-error\");\n\n(function () {\n  var r = jsoo_sys_getenv(\"OCAMLRUNPARAM\")\n  if(r !== undefined){\n    var l = r.split(\",\");\n    for(var i = 0; i < l.length; i++){\n      if(l[i] == \"b\") { caml_record_backtrace_flag = 1; break }\n      else if (l[i].startsWith(\"b=\")) {\n        caml_record_backtrace_flag = +(l[i].slice(2))}\n      else continue;\n    }\n  }\n}) ()\n\n\n//Provides: caml_ml_debug_info_status const\nfunction caml_ml_debug_info_status () { return 0; }\n//Provides: caml_backtrace_status\n//Requires: caml_record_backtrace_flag\nfunction caml_backtrace_status (_unit) { return caml_record_backtrace_flag ? 1 : 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\n//Requires: caml_record_backtrace_flag\nfunction caml_record_backtrace (b) { caml_record_backtrace_flag = b; return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return [0]; }\n//Provides: caml_raw_backtrace_length\nfunction caml_raw_backtrace_length() { return 0; }\n//Provides: caml_raw_backtrace_next_slot\nfunction caml_raw_backtrace_next_slot() { return 0 }\n//Provides: caml_raw_backtrace_slot\n//Requires: caml_invalid_argument\nfunction caml_raw_backtrace_slot () {\n  caml_invalid_argument(\"Printexc.get_raw_backtrace_slot: index out of bounds\");\n}\n//Provides: caml_restore_raw_backtrace\nfunction caml_restore_raw_backtrace(exn, bt) { return 0 }\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_call_gen (const, shallow)\n//If: !effects\n//Weakdef\nfunction caml_call_gen(f, args) {\n  var n = (f.l >= 0)?f.l:(f.l = f.length);\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0) {\n    var g = f.apply(null,args.slice(0,n));\n    if(typeof g !== \"function\") return g;\n    return caml_call_gen(g,args.slice(n));\n  }\n  else {\n    switch (d) {\n    case 1: {\n      var g = function (x){\n        var nargs = new Array(argsLen + 1);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    case 2: {\n      var g = function (x, y){\n        var nargs = new Array(argsLen + 2);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    default: {\n      var g = function (){\n        var extra_args = (arguments.length == 0)?1:arguments.length;\n        var nargs = new Array(args.length+extra_args);\n        for(var i = 0; i < args.length; i++ ) nargs[i] = args[i];\n        for(var i = 0; i < arguments.length; i++ ) nargs[args.length+i] = arguments[i];\n        return caml_call_gen(f, nargs)\n      };\n    }}\n    g.l = d;\n    return g;\n  }\n}\n\n//Provides: caml_call_gen (const, shallow)\n//If: effects\n//Weakdef\nfunction caml_call_gen(f, args) {\n  var n = (f.l >= 0)?f.l:(f.l = f.length);\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0) {\n    return f.apply(null, args);\n  } else if (d < 0) {\n    var rest = args.slice(n - 1);\n    var k = args [argsLen - 1];\n    args = args.slice(0, n);\n    args[n - 1] = function (g) {\n      if (typeof g !== \"function\") return k(g);\n      var args = rest.slice();\n      args[args.length - 1] = k;\n      return caml_call_gen(g, args); };\n    return f.apply(null, args);\n  } else {\n    argsLen--;\n    var k = args [argsLen];\n    switch (d) {\n    case 1: {\n      var g = function (x, y){\n        var nargs = new Array(argsLen + 2);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    case 2: {\n      var g = function (x, y, z){\n        var nargs = new Array(argsLen + 3);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        nargs[argsLen + 2] = z;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    default: {\n      var g = function (){\n        var extra_args = (arguments.length == 0)?1:arguments.length;\n        var nargs = new Array(argsLen + extra_args);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        for(var i = 0; i < arguments.length; i++ )\n          nargs[argsLen + i] = arguments[i];\n        return caml_call_gen(f, nargs)\n      };\n    }}\n    g.l = d + 1;\n    return k(g);\n  }\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,mutable)\n//Requires: caml_named_values, caml_jsbytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_jsbytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_build_symbols\n//Requires: caml_jsstring_of_string\nfunction caml_build_symbols(toc) {\n  var symb;\n  while(toc) {\n    if(caml_jsstring_of_string(toc[1][1]) == \"SYJS\") {\n      symb = toc[1][2];\n      break;\n    }\n    else toc = toc[2]\n  }\n  var r = {};\n  if(symb) {\n    for(var i = 1; i < symb.length; i++){\n      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2]\n    }\n  }\n  return r;\n}\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data, caml_callback, caml_build_symbols\n//Requires: caml_failwith\nfunction caml_register_global (n, v, name_opt) {\n  if (name_opt) {\n    var name = name_opt;\n    if(globalThis.toplevelReloc) {\n      n = caml_callback(globalThis.toplevelReloc, [name]);\n    }\n    else if (caml_global_data.toc) {\n      if(!caml_global_data.symbols) {\n        caml_global_data.symbols = caml_build_symbols(caml_global_data.toc)\n      }\n      var nid = caml_global_data.symbols[name]\n      if(nid >= 0)\n        n = nid\n      else {\n        caml_failwith(\"caml_register_global: cannot locate \" + name);\n      }\n    }\n  }\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n//Provides: caml_maybe_print_stats\nfunction caml_maybe_print_stats(unit) { return 0 }\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\n//Requires: caml_callback\nfunction caml_js_pure_expr (f) { return caml_callback(f, [0]); }\n\n//Provides: caml_js_set (mutable, const, mutable)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get (mutable, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return (o instanceof c) ? 1 : 0; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides:caml_stack_depth\n//If: effects\nvar caml_stack_depth = 0;\n\n//Provides:caml_stack_check_depth\n//If: effects\n//Requires:caml_stack_depth\nfunction caml_stack_check_depth() {\n    return --caml_stack_depth > 0;\n}\n\n//Provides: caml_callback\n//If: !effects\n//Requires:caml_call_gen\nvar caml_callback = caml_call_gen;\n\n//Provides: caml_callback\n//If: effects\n//Requires:caml_stack_depth, caml_call_gen, caml_exn_stack, caml_fiber_stack, caml_wrap_exception, caml_resume_stack, caml_fresh_oo_id, caml_named_value, caml_raise_with_arg, caml_string_of_jsbytes\n//Requires: caml_raise_constant\nfunction caml_callback(f,args) {\n  function uncaught_effect_handler(eff,k,ms) {\n    // Resumes the continuation k by raising exception Unhandled.\n    caml_resume_stack(k[1],ms);\n    var exn = caml_named_value(\"Effect.Unhandled\");\n    if(exn) caml_raise_with_arg(exn, eff);\n    else {\n      exn = [248,caml_string_of_jsbytes(\"Effect.Unhandled\"), caml_fresh_oo_id(0)];\n      caml_raise_constant(exn);\n    }\n  }\n  var saved_stack_depth = caml_stack_depth;\n  var saved_exn_stack = caml_exn_stack;\n  var saved_fiber_stack = caml_fiber_stack;\n  try {\n    caml_exn_stack = 0;\n    caml_fiber_stack =\n      {h:[0, 0, 0, uncaught_effect_handler], r:{k:0, x:0, e:0}};\n    var res = {joo_tramp: f,\n               joo_args: args.concat(function (x){return x;})};\n    do {\n      caml_stack_depth = 40;\n      try {\n        res = caml_call_gen(res.joo_tramp, res.joo_args);\n      } catch (e) {\n        /* Handle exception coming from JavaScript or from the runtime. */\n        if (!caml_exn_stack) throw e;\n        var handler = caml_exn_stack[1];\n        caml_exn_stack = caml_exn_stack[2];\n        res = {joo_tramp: handler,\n               joo_args: [caml_wrap_exception(e)]};\n      }\n    } while(res && res.joo_args)\n  } finally {\n    caml_stack_depth = saved_stack_depth;\n    caml_exn_stack = saved_exn_stack;\n    caml_fiber_stack = saved_fiber_stack;\n  }\n  return res;\n}\n\n//Provides: caml_is_js\nfunction caml_is_js() {\n  return 1;\n}\n\n//Provides: caml_jsoo_flags_use_js_string\nfunction caml_jsoo_flags_use_js_string(unit){\n  return FLAG(\"use-js-string\")\n}\n\n//Provides: caml_jsoo_flags_effects\nfunction caml_jsoo_flags_effects(unit){\n  return FLAG(\"effects\")\n}\n\n//Provides: caml_wrap_exception const (mutable)\n//Requires: caml_global_data,caml_string_of_jsstring,caml_named_value\nfunction caml_wrap_exception(e) {\n  if (FLAG(\"excwrap\")) {\n    if(e instanceof Array) return e;\n    var exn;\n    //Stack_overflow: chrome, safari\n    if(globalThis.RangeError\n       && e instanceof globalThis.RangeError\n       && e.message\n       && e.message.match(/maximum call stack/i))\n      exn = caml_global_data.Stack_overflow;\n    //Stack_overflow: firefox\n    else if(globalThis.InternalError\n       && e instanceof globalThis.InternalError\n       && e.message\n       && e.message.match(/too much recursion/i))\n      exn = caml_global_data.Stack_overflow;\n    //Wrap Error in Js.Error exception\n    else if(e instanceof globalThis.Error && caml_named_value(\"jsError\"))\n      exn = [0,caml_named_value(\"jsError\"),e];\n    else\n      //fallback: wrapped in Failure\n      exn = [0,caml_global_data.Failure,caml_string_of_jsstring (String(e))];\n    // We already have an error at hand, let's use it.\n    if (e instanceof globalThis.Error)\n      exn.js_error = e;\n    return exn;\n  } else\n    return e;\n}\n\n//Provides: caml_maybe_attach_backtrace\n//Requires: caml_exn_with_js_backtrace\n//Requires: caml_record_backtrace_flag\nfunction caml_maybe_attach_backtrace(exn, force) {\n  if(caml_record_backtrace_flag)\n    return caml_exn_with_js_backtrace(exn, force);\n  else return exn\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  //never reraise for constant exn\n  if(!exn.js_error || force || exn[0] == 248) exn.js_error = new globalThis.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n\n\n//Provides: caml_js_error_option_of_exception\nfunction caml_js_error_option_of_exception(exn) {\n  if(exn.js_error) { return [0, exn.js_error]; }\n  return 0;\n}\n\n\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n\n//Provides: caml_js_from_array mutable (shallow)\nfunction caml_js_from_array(a) {\n  return a.slice(1);\n}\n//Provides: caml_js_to_array mutable (shallow)\nfunction caml_js_to_array(a) {\n  var len = a.length;\n  var b = new Array(len+1);\n  b[0] = 0;\n  for(var i=0;i<len;i++) b[i+1] = a[i];\n  return b;\n}\n\n//Provides: caml_list_of_js_array const (mutable)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_list_to_js_array const (mutable)\nfunction caml_list_to_js_array(l){\n  var a = [];\n  for(; l !== 0; l = l[2]) {\n    a.push(l[1]);\n  }\n  return a;\n}\n\n//Provides: caml_js_var mutable\n//Requires: caml_jsstring_of_string\nfunction caml_js_var(x) {\n  var x = caml_jsstring_of_string(x);\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    console.error(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, a) {\n  switch (a.length) {\n  case 1: return f();\n  case 2: return f (a[1]);\n  case 3: return f (a[1],a[2]);\n  case 4: return f (a[1],a[2],a[3]);\n  case 5: return f (a[1],a[2],a[3],a[4]);\n  case 6: return f (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return f (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return f (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  return f.apply(null, caml_js_from_array(a));\n}\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: caml_jsstring_of_string\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_ojs_new_arr (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_ojs_new_arr(c, a) {\n  switch (a.length) {\n  case 0: return new c;\n  case 1: return new c (a[0]);\n  case 2: return new c (a[0],a[1]);\n  case 3: return new c (a[0],a[1],a[2]);\n  case 4: return new c (a[0],a[1],a[2],a[3]);\n  case 5: return new c (a[0],a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[0],a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n  }\n  function F() { return c.apply(this, a); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_callback\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    var len = arguments.length;\n    if(len > 0){\n      var args = new Array(len);\n      for (var i = 0; i < len; i++) args[i] = arguments[i];\n    } else {\n      args = [undefined];\n    }\n    var res = caml_callback(f, args);\n    return (res instanceof Function)?caml_js_wrap_callback(res):res;\n  }\n}\n\n//Provides: caml_js_wrap_callback_arguments\n//Requires: caml_callback\nfunction caml_js_wrap_callback_arguments(f) {\n  return function() {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, [args]);\n  }\n}\n//Provides: caml_js_wrap_callback_strict const\n//Requires: caml_callback\nfunction caml_js_wrap_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    var args = new Array(arity);\n    var len = Math.min(arguments.length, arity)\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, args);\n  };\n}\n//Provides: caml_js_wrap_callback_unsafe const (const)\n//Requires: caml_callback, caml_js_function_arity\nfunction caml_js_wrap_callback_unsafe(f) {\n  return function () {\n    var len = caml_js_function_arity(f);\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, args); }\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_callback, caml_js_wrap_callback\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    var res = caml_callback(f,args);\n    return (res instanceof Function)?caml_js_wrap_callback(res):res;\n  }\n}\n//Provides: caml_js_wrap_meth_callback_arguments const (const)\n//Requires: caml_callback\nfunction caml_js_wrap_meth_callback_arguments(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f,[this,args]);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_strict const\n//Requires: caml_callback\nfunction caml_js_wrap_meth_callback_strict(arity, f) {\n  return function () {\n    var args = new Array(arity + 1);\n    var len = Math.min(arguments.length, arity)\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_callback(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_callback, caml_js_function_arity\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () {\n    var len = caml_js_function_arity(f) - 1;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_callback(f, args); }\n}\n\n//Provides: caml_js_function_arity\n//If: !effects\nfunction caml_js_function_arity(f) {\n  return (f.l >= 0)?f.l:(f.l = f.length)\n}\n\n//Provides: caml_js_function_arity\n//If: effects\nfunction caml_js_function_arity(f) {\n  // Functions have an additional continuation parameter. This should\n  // not be visible when calling them from JavaScript\n  return ((f.l >= 0)?f.l:(f.l = f.length)) - 1\n}\n\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n\n//Provides: caml_js_eval_string (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_eval_string (s) {return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_expr (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_expr(s) {\n  console.error(\"caml_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: caml_jsstring_of_string\nfunction caml_pure_js_expr (s){\n  console.error(\"caml_pure_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_object (object_literal)\n//Requires: caml_jsstring_of_string\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[caml_jsstring_of_string(p[1])] = p[2];\n  }\n  return o;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Raise exception\n\n//Provides: caml_raise_constant (const)\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_raise_with_arg (const, mutable)\n//Requires: caml_maybe_attach_backtrace\nfunction caml_raise_with_arg (tag, arg) { throw caml_maybe_attach_backtrace([0, tag, arg]); }\n\n//Provides: caml_raise_with_args (const, mutable)\n//Requires: caml_maybe_attach_backtrace\nfunction caml_raise_with_args (tag, args) { throw caml_maybe_attach_backtrace([0, tag].concat(args)); }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg, caml_string_of_jsbytes\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_string_of_jsbytes(msg));\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data, caml_string_of_jsbytes\nfunction caml_failwith (msg) {\n  if(!caml_global_data.Failure)\n    caml_global_data.Failure=[248,caml_string_of_jsbytes(\"Failure\"),-3];\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if(n == 0) return \"\";\n  if (s.repeat) {return s.repeat(n);} // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_jsbytes\n//Weakdef\n// Pre ECMAScript 5, [apply] would not support array-like object.\n// In such setup, Typed_array would be implemented as polyfill, and [f.apply] would\n// fail here. Mark the primitive as Weakdef, so that people can override it easily.\nfunction caml_subarray_to_jsbytes (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, a.slice(i,i + Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n            v = 3;\n            if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                (c1 < 0xf5)) {\n              v = c2 - 0x3c82080 + (c << 6);\n              if (v < 0x10000 || v > 0x10ffff) v = 3;\n            }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: jsoo_is_ascii\nfunction jsoo_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_bytes_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_bytes_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_bytes_bound_error\n//Requires: caml_invalid_argument\nfunction caml_bytes_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\n//Requires: caml_ml_string_length\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get16\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get16(s,i) {\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get32\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get32(s,i) {\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1),\n      b3 = caml_bytes_unsafe_get (s, i + 2),\n      b4 = caml_bytes_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\n//Requires: caml_ml_string_length\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get64\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_bytes_get64(s,i) {\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_bytes_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set (s, i, c) {\n  caml_failwith(\"caml_string_set\");\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_unsafe_set, caml_string_bound_error\n//If: !js-string\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_set16\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set16(s,i,i16){\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set16\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set16(s,i,i16){\n  caml_failwith(\"caml_string_set16\");\n}\n\n//Provides: caml_string_set16\n//Requires: caml_bytes_set16\n//If: !js-string\nfunction caml_string_set16(s,i,i16){\n  return caml_bytes_set16(s,i,i16);\n}\n\n//Provides: caml_bytes_set32\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set32(s,i,i32){\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  caml_bytes_unsafe_set (s, i + 2, b3);\n  caml_bytes_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set32(s,i,i32){\n  caml_failwith(\"caml_string_set32\");\n}\n\n//Provides: caml_string_set32\n//Requires: caml_bytes_set32\n//If: !js-string\nfunction caml_string_set32(s,i,i32){\n  return caml_bytes_set32(s,i,i32);\n}\n\n//Provides: caml_bytes_set64\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_bytes_set64(s,i,i64){\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_bytes_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set64(s,i,i64){\n  caml_failwith(\"caml_string_set64\");\n}\n\n//Provides: caml_string_set64\n//Requires: caml_bytes_set64\n//If: !js-string\nfunction caml_string_set64(s,i,i64){\n  return caml_bytes_set64(s,i,i64);\n}\n\n//Provides: caml_bytes_set\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_of_utf16_jsstring\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, MlBytes\nfunction caml_bytes_of_utf16_jsstring (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!jsoo_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlBytes(tag, s, s.length);\n}\n\n\n//Provides: MlBytes\n//Requires: caml_convert_string_to_bytes, jsoo_is_ascii, caml_utf16_of_utf8\nfunction MlBytes (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlBytes.prototype.toString = function(){\n  switch (this.t) {\n  case 9: /*BYTES | ASCII*/\n    return this.c;\n  default:\n    caml_convert_string_to_bytes(this);\n  case 0: /*BYTES | UNKOWN*/\n    if (jsoo_is_ascii(this.c)) {\n      this.t = 9; /*BYTES | ASCII*/\n      return this.c;\n    }\n    this.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return this.c;\n  }\n};\nMlBytes.prototype.toUtf16 = function (){\n  var r = this.toString();\n  if(this.t == 9) return r\n  return caml_utf16_of_utf8(r);\n}\nMlBytes.prototype.slice = function (){\n  var content = this.t == 4 ? this.c.slice() : this.c;\n  return new MlBytes(this.t,content,this.l);\n}\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_jsbytes\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_jsbytes (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_bytes_to_array\nfunction caml_convert_bytes_to_array (s) {\n  /* Assumes not ARRAY */\n  var a = new Uint8Array(s.l);\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_uint8_array_of_bytes mutable\n//Requires: caml_convert_bytes_to_array\nfunction caml_uint8_array_of_bytes (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_uint8_array_of_string mutable\n//Requires: caml_convert_bytes_to_array\n//Requires: caml_ml_string_length, caml_string_unsafe_get\nfunction caml_uint8_array_of_string (s) {\n  var l = caml_ml_string_length(s);\n  var a = new Array(l);\n  var i = 0;\n  for (; i < l; i++) a[i] = caml_string_unsafe_get(s,i);\n  return a;\n}\n\n//Provides: caml_create_string const\n//Requires: MlBytes, caml_invalid_argument\n//If: !js-string\nfunction caml_create_string(len) {\n  if(len < 0) caml_invalid_argument(\"String.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_create_string const\n//Requires: caml_invalid_argument\n//If: js-string\nfunction caml_create_string(len) {\n  caml_invalid_argument(\"String.create\");\n}\n\n//Provides: caml_create_bytes const\n//Requires: MlBytes,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_string_of_array\n//Requires: caml_subarray_to_jsbytes, caml_string_of_jsbytes\nfunction caml_string_of_array (a) {\n  return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length));\n}\n\n//Provides: caml_bytes_of_array\n//Requires: MlBytes\nfunction caml_bytes_of_array (a) {\n  if(! (a instanceof Uint8Array)) {\n    a = new Uint8Array(a);\n  }\n  return new MlBytes(4,a,a.length);\n}\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_bytes_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_bytes_equal(s1, s2); }\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_str_repeat, caml_convert_bytes_to_array\n//Alias: caml_fill_string\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_bytes\n//Requires: caml_subarray_to_jsbytes, caml_convert_bytes_to_array\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n      if (i2 <= i1) {\n        for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n      } else {\n        for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n      }\n    } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_string\n//Requires: caml_blit_bytes, caml_bytes_of_string\nfunction caml_blit_string(a,b,c,d,e) {\n  caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);\n  return 0\n}\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n\n//Provides: caml_string_unsafe_get const\n//If: js-string\nfunction caml_string_unsafe_get (s, i) {\n  return s.charCodeAt(i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_unsafe_set (s, i, c) {\n  caml_failwith(\"caml_string_unsafe_set\");\n}\n\n//Provides: caml_ml_string_length const\n//If: js-string\nfunction caml_ml_string_length(s) {\n  return s.length\n}\n\n//Provides: caml_string_compare const\n//If: js-string\nfunction caml_string_compare(s1, s2) {\n  return (s1 < s2)?-1:(s1 > s2)?1:0;\n}\n\n//Provides: caml_string_equal const\n//If: js-string\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  return 0;\n}\n\n//Provides: caml_string_lessequal const\n//If: js-string\nfunction caml_string_lessequal(s1, s2) {\n  return (s1 <= s2)?1:0;\n}\n\n//Provides: caml_string_lessthan const\n//If: js-string\nfunction caml_string_lessthan(s1, s2) {\n  return (s1 < s2)?1:0;\n}\n\n//Provides: caml_string_of_bytes\n//Requires: caml_convert_string_to_bytes, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_bytes(s) {\n  (s.t & 6) && caml_convert_string_to_bytes(s);\n  return caml_string_of_jsbytes(s.c);\n}\n\n//Provides: caml_bytes_of_string const\n//Requires: caml_bytes_of_jsbytes, caml_jsbytes_of_string\n//If: js-string\nfunction caml_bytes_of_string(s) {\n  return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));\n}\n\n//Provides: caml_string_of_jsbytes const\n//If: js-string\nfunction caml_string_of_jsbytes(x) { return x }\n\n//Provides: caml_jsbytes_of_string const\n//If: js-string\nfunction caml_jsbytes_of_string(x) { return x }\n\n//Provides: caml_jsstring_of_string const\n//Requires: jsoo_is_ascii, caml_utf16_of_utf8\n//If: js-string\nfunction caml_jsstring_of_string(s) {\n  if(jsoo_is_ascii(s))\n    return s;\n  return caml_utf16_of_utf8(s); }\n\n//Provides: caml_string_of_jsstring const\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_jsstring (s) {\n  if (jsoo_is_ascii(s))\n    return caml_string_of_jsbytes(s)\n  else return caml_string_of_jsbytes(caml_utf8_of_utf16(s));\n}\n\n//Provides: caml_bytes_of_jsbytes const\n//Requires: MlBytes\nfunction caml_bytes_of_jsbytes(s) { return new MlBytes(0,s,s.length); }\n\n\n// The section below should be used when use-js-string=false\n\n//Provides: caml_string_unsafe_get const\n//Requires: caml_bytes_unsafe_get\n//If: !js-string\nfunction caml_string_unsafe_get (s, i) {\n  return caml_bytes_unsafe_get(s,i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_bytes_unsafe_set\n//If: !js-string\nfunction caml_string_unsafe_set (s, i, c) {\n  return caml_bytes_unsafe_set(s,i,c);\n}\n\n//Provides: caml_ml_string_length const\n//Requires: caml_ml_bytes_length\n//If: !js-string\nfunction caml_ml_string_length(s) {\n  return caml_ml_bytes_length(s)\n}\n\n//Provides: caml_string_compare\n//Requires: caml_bytes_compare\n//If: !js-string\nfunction caml_string_compare(s1, s2) {\n  return caml_bytes_compare(s1,s2)\n}\n\n//Provides: caml_string_equal\n//Requires: caml_bytes_equal\n//If: !js-string\nfunction caml_string_equal(s1, s2) {\n  return caml_bytes_equal(s1,s2)\n}\n\n//Provides: caml_string_lessequal\n//Requires: caml_bytes_lessequal\n//If: !js-string\nfunction caml_string_lessequal(s1, s2) {\n  return caml_bytes_lessequal(s1,s2)\n}\n\n//Provides: caml_string_lessthan\n//Requires: caml_bytes_lessthan\n//If: !js-string\nfunction caml_string_lessthan(s1, s2) {\n  return caml_bytes_lessthan(s1,s2)\n}\n\n//Provides: caml_string_of_bytes\n//If: !js-string\nfunction caml_string_of_bytes(s) { return s }\n\n//Provides: caml_bytes_of_string const\n//If: !js-string\nfunction caml_bytes_of_string(s) { return s }\n\n//Provides: caml_string_of_jsbytes const\n//Requires: caml_bytes_of_jsbytes\n//If: !js-string\nfunction caml_string_of_jsbytes(s) { return caml_bytes_of_jsbytes(s); }\n\n//Provides: caml_jsbytes_of_string const\n//Requires: caml_convert_string_to_bytes\n//If: !js-string\nfunction caml_jsbytes_of_string(s) {\n  (s.t & 6) && caml_convert_string_to_bytes(s);\n  return s.c }\n\n//Provides: caml_jsstring_of_string mutable (const)\n//If: !js-string\nfunction caml_jsstring_of_string(s){\n  return s.toUtf16()\n}\n\n//Provides: caml_string_of_jsstring\n//Requires: caml_bytes_of_utf16_jsstring\n//If: !js-string\nfunction caml_string_of_jsstring (s) {\n  return caml_bytes_of_utf16_jsstring(s);\n}\n\n//Provides: caml_is_ml_bytes\n//Requires: MlBytes\nfunction caml_is_ml_bytes(s) {\n  return (s instanceof MlBytes);\n}\n\n//Provides: caml_ml_bytes_content\n//Requires: MlBytes, caml_convert_string_to_bytes\nfunction caml_ml_bytes_content(s) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    caml_convert_string_to_bytes(s);\n  case 0: /* BYTES */\n    return s.c;\n  case 4:\n    return s.c\n  }\n}\n\n//Provides: caml_is_ml_string\n//Requires: jsoo_is_ascii\n//If: js-string\nfunction caml_is_ml_string(s) {\n  return (typeof s === \"string\" && !/[^\\x00-\\xff]/.test(s));\n}\n\n//Provides: caml_is_ml_string\n//Requires: caml_is_ml_bytes\n//If: !js-string\nfunction caml_is_ml_string(s) {\n  return caml_is_ml_bytes(s);\n}\n\n// The functions below are deprecated\n\n//Provides: caml_js_to_byte_string const\n//Requires: caml_string_of_jsbytes\nfunction caml_js_to_byte_string(s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_new_string\n//Requires: caml_string_of_jsbytes\nfunction caml_new_string (s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_js_from_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_from_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_to_js_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_to_js_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_string_of_jsstring\nfunction caml_js_to_string (s) {\n  return caml_string_of_jsstring(s);\n}\n\n\n//Provides: caml_array_of_string\n//Requires: caml_uint8_array_of_string\nfunction caml_array_of_string(x) { return caml_uint8_array_of_string(x) }\n\n//Provides: caml_array_of_bytes\n//Requires: caml_uint8_array_of_bytes\nfunction caml_array_of_bytes(x) { return caml_uint8_array_of_bytes(x) }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard, Andy Ray\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n//\n// Bigarray.\n//\n// - all bigarray types including Int64 and Complex.\n// - fortran + c layouts\n// - sub/slice/reshape\n// - retain fast path for 1d array access\n\n//Provides: caml_ba_init const\nfunction caml_ba_init() {\n  return 0;\n}\n\n//Provides: caml_ba_get_size\n//Requires: caml_invalid_argument\nfunction caml_ba_get_size(dims) {\n  var n_dims = dims.length;\n  var size = 1;\n  for (var i = 0; i < n_dims; i++) {\n    if (dims[i] < 0)\n      caml_invalid_argument(\"Bigarray.create: negative dimension\");\n    size = size * dims[i];\n  }\n  return size;\n}\n\n//Provides: caml_ba_get_size_per_element\nfunction caml_ba_get_size_per_element(kind){\n  switch(kind){\n  case 7: case 10: case 11: return 2;\n  default: return 1;\n  }\n}\n\n//Provides: caml_ba_create_buffer\n//Requires: caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_buffer(kind, size){\n  var view;\n  switch(kind){\n  case 0:  view = Float32Array; break;\n  case 1:  view = Float64Array; break;\n  case 2:  view = Int8Array; break;\n  case 3:  view = Uint8Array; break;\n  case 4:  view = Int16Array; break;\n  case 5:  view = Uint16Array; break;\n  case 6:  view = Int32Array; break;\n  case 7:  view = Int32Array; break;\n  case 8:  view = Int32Array; break;\n  case 9:  view = Int32Array; break;\n  case 10: view = Float32Array; break;\n  case 11: view = Float64Array; break;\n  case 12: view = Uint8Array; break;\n  }\n  if (!view) caml_invalid_argument(\"Bigarray.create: unsupported kind\");\n  var data = new view(size * caml_ba_get_size_per_element(kind));\n  return data;\n}\n\n//Provides: caml_ba_custom_name\n//Version: < 4.11\nvar caml_ba_custom_name = \"_bigarray\"\n\n//Provides: caml_ba_custom_name\n//Version: >= 4.11\nvar caml_ba_custom_name = \"_bigarr02\"\n\n//Provides: Ml_Bigarray\n//Requires: caml_array_bound_error, caml_invalid_argument, caml_ba_custom_name\n//Requires: caml_int64_create_lo_hi, caml_int64_hi32, caml_int64_lo32\nfunction Ml_Bigarray (kind, layout, dims, buffer) {\n\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data = buffer;\n}\n\nMl_Bigarray.prototype.caml_custom = caml_ba_custom_name;\n\nMl_Bigarray.prototype.offset = function (arg) {\n  var ofs = 0;\n  if(typeof arg === \"number\") arg = [arg];\n  if (! (arg instanceof Array)) caml_invalid_argument(\"bigarray.js: invalid offset\");\n  if (this.dims.length != arg.length)\n    caml_invalid_argument(\"Bigarray.get/set: bad number of dimensions\");\n  if(this.layout == 0 /* c_layout */) {\n    for (var i = 0; i < this.dims.length; i++) {\n      if (arg[i] < 0 || arg[i] >= this.dims[i])\n        caml_array_bound_error();\n      ofs = (ofs * this.dims[i]) + arg[i];\n    }\n  } else {\n    for (var i = this.dims.length - 1; i >= 0; i--) {\n      if (arg[i] < 1 || arg[i] > this.dims[i]){\n        caml_array_bound_error();\n      }\n      ofs = (ofs * this.dims[i]) + (arg[i] - 1);\n    }\n  }\n  return ofs;\n}\n\nMl_Bigarray.prototype.get = function (ofs) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var l = this.data[ofs * 2 + 0];\n    var h = this.data[ofs * 2 + 1];\n    return caml_int64_create_lo_hi(l,h);\n  case 10: case 11:\n    // Complex32, Complex64\n    var r = this.data[ofs * 2 + 0];\n    var i = this.data[ofs * 2 + 1];\n    return [254, r, i];\n  default:\n    return this.data[ofs]\n  }\n}\n\nMl_Bigarray.prototype.set = function (ofs,v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    this.data[ofs * 2 + 0] = caml_int64_lo32(v);\n    this.data[ofs * 2 + 1] = caml_int64_hi32(v);\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    this.data[ofs * 2 + 0] = v[1];\n    this.data[ofs * 2 + 1] = v[2];\n    break;\n  default:\n    this.data[ofs] = v;\n    break;\n  }\n  return 0\n}\n\n\nMl_Bigarray.prototype.fill = function (v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var a = caml_int64_lo32(v);\n    var b = caml_int64_hi32(v);\n    if(a == b){\n      this.data.fill(a);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? a : b;\n      }\n    }\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    var im = v[1];\n    var re = v[2];\n    if(im == re){\n      this.data.fill(im);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? im : re;\n      }\n    }\n    break;\n  default:\n    this.data.fill(v);\n    break;\n  }\n}\n\n\nMl_Bigarray.prototype.compare = function (b, total) {\n  if (this.layout != b.layout || this.kind != b.kind) {\n    var k1 = this.kind | (this.layout << 8);\n    var k2 =    b.kind | (b.layout << 8);\n    return k2 - k1;\n  }\n  if (this.dims.length != b.dims.length) {\n    return b.dims.length - this.dims.length;\n  }\n  for (var i = 0; i < this.dims.length; i++)\n    if (this.dims[i] != b.dims[i])\n      return (this.dims[i] < b.dims[i]) ? -1 : 1;\n  switch (this.kind) {\n  case 0:\n  case 1:\n  case 10:\n  case 11:\n    // Floats\n    var x, y;\n    for (var i = 0; i < this.data.length; i++) {\n      x = this.data[i];\n      y = b.data[i];\n      if (x < y)\n        return -1;\n      if (x > y)\n        return 1;\n      if (x != y) {\n        if (!total) return NaN;\n        if (x == x) return 1;\n        if (y == y) return -1;\n      }\n    }\n    break;\n  case 7:\n    // Int64\n    for (var i = 0; i < this.data.length; i+=2) {\n      // Check highest bits first\n      if (this.data[i+1] < b.data[i+1])\n        return -1;\n      if (this.data[i+1] > b.data[i+1])\n        return 1;\n      if ((this.data[i] >>> 0) < (b.data[i] >>> 0))\n        return -1;\n      if ((this.data[i] >>> 0) > (b.data[i] >>> 0))\n        return 1;\n    }\n    break;\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n  case 6:\n  case 8:\n  case 9:\n  case 12:\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i] < b.data[i])\n        return -1;\n      if (this.data[i] > b.data[i])\n        return 1;\n    }\n    break;\n  }\n  return 0;\n}\n\n//Provides: Ml_Bigarray_c_1_1\n//Requires: Ml_Bigarray, caml_array_bound_error, caml_invalid_argument\nfunction Ml_Bigarray_c_1_1(kind, layout, dims, buffer) {\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data   = buffer;\n}\n\nMl_Bigarray_c_1_1.prototype = new Ml_Bigarray()\nMl_Bigarray_c_1_1.prototype.offset = function (arg) {\n  if(typeof arg !== \"number\"){\n    if((arg instanceof Array) && arg.length == 1)\n      arg = arg[0];\n    else caml_invalid_argument(\"Ml_Bigarray_c_1_1.offset\");\n  }\n  if (arg < 0 || arg >= this.dims[0])\n    caml_array_bound_error();\n  return arg;\n}\n\nMl_Bigarray_c_1_1.prototype.get = function (ofs) {\n  return this.data[ofs];\n}\n\nMl_Bigarray_c_1_1.prototype.set = function (ofs,v) {\n  this.data[ofs] = v;\n  return 0\n}\n\nMl_Bigarray_c_1_1.prototype.fill = function (v) {\n  this.data.fill(v);\n  return 0\n}\n\n//Provides: caml_ba_compare\nfunction caml_ba_compare(a,b,total){\n  return a.compare(b,total)\n}\n\n//Provides: caml_ba_create_unsafe\n//Requires: Ml_Bigarray, Ml_Bigarray_c_1_1, caml_ba_get_size, caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_unsafe(kind, layout, dims, data){\n  var size_per_element = caml_ba_get_size_per_element(kind);\n  if(caml_ba_get_size(dims) * size_per_element != data.length) {\n    caml_invalid_argument(\"length doesn't match dims\");\n  }\n  if(layout == 0 && // c_layout\n     dims.length == 1 && // Array1\n     size_per_element == 1) // 1-to-1 mapping\n    return new Ml_Bigarray_c_1_1(kind, layout, dims, data);\n  return new Ml_Bigarray(kind, layout, dims, data);\n\n}\n\n\n//Provides: caml_ba_create\n//Requires: caml_js_from_array\n//Requires: caml_ba_get_size, caml_ba_create_unsafe\n//Requires: caml_ba_create_buffer\nfunction caml_ba_create(kind, layout, dims_ml) {\n  var dims = caml_js_from_array(dims_ml);\n  var data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Provides: caml_ba_change_layout\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_change_layout(ba, layout) {\n  if(ba.layout == layout) return ba;\n  var new_dims = []\n  for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[ba.dims.length - i - 1];\n  return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);\n}\n\n//Provides: caml_ba_kind\nfunction caml_ba_kind(ba) {\n  return ba.kind;\n}\n\n//Provides: caml_ba_layout\nfunction caml_ba_layout(ba) {\n  return ba.layout;\n}\n\n//Provides: caml_ba_num_dims\nfunction caml_ba_num_dims(ba) {\n  return ba.dims.length;\n}\n\n//Provides: caml_ba_dim\n//Requires: caml_invalid_argument\nfunction caml_ba_dim(ba, i) {\n  if (i < 0 || i >= ba.dims.length)\n    caml_invalid_argument(\"Bigarray.dim\");\n  return ba.dims[i];\n}\n\n//Provides: caml_ba_dim_1\n//Requires: caml_ba_dim\nfunction caml_ba_dim_1(ba) {\n  return caml_ba_dim(ba, 0);\n}\n\n//Provides: caml_ba_dim_2\n//Requires: caml_ba_dim\nfunction caml_ba_dim_2(ba) {\n  return caml_ba_dim(ba, 1);\n}\n\n//Provides: caml_ba_dim_3\n//Requires: caml_ba_dim\nfunction caml_ba_dim_3(ba) {\n  return caml_ba_dim(ba, 2);\n}\n\n//Provides: caml_ba_get_generic\n//Requires: caml_js_from_array\nfunction caml_ba_get_generic(ba, i) {\n  var ofs = ba.offset(caml_js_from_array(i));\n  return ba.get(ofs);\n}\n\n//Provides: caml_ba_uint8_get16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get16(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs);\n  var b2 = ba.get(ofs + 1);\n  return (b1 | (b2 << 8));\n}\n\n//Provides: caml_ba_uint8_get32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get32(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  return ( (b1 << 0)  |\n           (b2 << 8)  |\n           (b3 << 16) |\n           (b4 << 24) );\n}\n\n//Provides: caml_ba_uint8_get64\n//Requires: caml_array_bound_error, caml_int64_of_bytes\nfunction caml_ba_uint8_get64(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  var b5 = ba.get(ofs+4);\n  var b6 = ba.get(ofs+5);\n  var b7 = ba.get(ofs+6);\n  var b8 = ba.get(ofs+7);\n  return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1]);\n}\n\n//Provides: caml_ba_get_1\nfunction caml_ba_get_1(ba, i0) {\n  return ba.get(ba.offset(i0));\n}\n\n//Provides: caml_ba_get_2\nfunction caml_ba_get_2(ba, i0, i1) {\n  return ba.get(ba.offset([i0,i1]));\n}\n\n//Provides: caml_ba_get_3\nfunction caml_ba_get_3(ba, i0, i1, i2) {\n  return ba.get(ba.offset([i0,i1,i2]));\n}\n\n//Provides: caml_ba_set_generic\n//Requires: caml_js_from_array\nfunction caml_ba_set_generic(ba, i, v) {\n  ba.set(ba.offset(caml_js_from_array(i)), v);\n  return 0\n}\n\n//Provides: caml_ba_uint8_set16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set16(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v        & 0xff);\n  ba.set(ofs+1, (v >>> 8) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set32(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v         & 0xff);\n  ba.set(ofs+1, (v >>> 8)  & 0xff);\n  ba.set(ofs+2, (v >>> 16) & 0xff);\n  ba.set(ofs+3, (v >>> 24) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set64\n//Requires: caml_array_bound_error, caml_int64_to_bytes\nfunction caml_ba_uint8_set64(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var v = caml_int64_to_bytes(v);\n  for(var i = 0; i < 8; i++) ba.set(ofs+i, v[7-i])\n  return 0;\n}\n\n//Provides: caml_ba_set_1\nfunction caml_ba_set_1(ba, i0, v) {\n  ba.set(ba.offset(i0), v);\n  return 0\n}\n\n//Provides: caml_ba_set_2\nfunction caml_ba_set_2(ba, i0, i1, v) {\n  ba.set(ba.offset([i0,i1]), v);\n  return 0;\n}\n\n//Provides: caml_ba_set_3\nfunction caml_ba_set_3(ba, i0, i1, i2, v) {\n  ba.set(ba.offset([i0,i1,i2]), v);\n  return 0;\n}\n\n//Provides: caml_ba_fill\nfunction caml_ba_fill(ba, v) {\n  ba.fill(v);\n  return 0;\n}\n\n//Provides: caml_ba_blit\n//Requires: caml_invalid_argument\nfunction caml_ba_blit(src, dst) {\n  if (dst.dims.length != src.dims.length)\n    caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  for (var i = 0; i < dst.dims.length; i++)\n    if (dst.dims[i] != src.dims[i])\n      caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  dst.data.set(src.data);\n  return 0;\n}\n\n//Provides: caml_ba_sub\n//Requires: caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_sub(ba, ofs, len) {\n  var changed_dim;\n  var mul = 1;\n  if (ba.layout == 0) {\n    for (var i = 1; i < ba.dims.length; i++)\n      mul = mul * ba.dims[i];\n    changed_dim = 0;\n  } else {\n    for (var i = 0; i < (ba.dims.length - 1); i++)\n      mul = mul * ba.dims[i];\n    changed_dim = ba.dims.length - 1;\n    ofs = ofs - 1;\n  }\n  if (ofs < 0 || len < 0 || (ofs + len) > ba.dims[changed_dim]){\n    caml_invalid_argument(\"Bigarray.sub: bad sub-array\");\n  }\n  var new_dims = [];\n  for (var i = 0; i < ba.dims.length; i++)\n    new_dims[i] = ba.dims[i];\n  new_dims[changed_dim] = len;\n  mul *= caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);\n}\n\n//Provides: caml_ba_slice\n//Requires: caml_js_from_array, caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_slice(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var num_inds = vind.length;\n  var index = [];\n  var sub_dims = [];\n  var ofs;\n\n  if (num_inds > ba.dims.length)\n    caml_invalid_argument(\"Bigarray.slice: too many indices\");\n\n  // Compute offset and check bounds\n  if (ba.layout == 0) {\n    for (var i = 0; i < num_inds; i++)\n      index[i] = vind[i];\n    for (; i < ba.dims.length; i++)\n      index[i] = 0;\n    sub_dims = ba.dims.slice(num_inds);\n  } else {\n    for (var i = 0; i < num_inds; i++)\n      index[ba.dims.length - num_inds + i] = vind[i];\n    for (var i = 0; i < ba.dims.length - num_inds; i++)\n      index[i] = 1;\n    sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);\n  }\n  ofs = ba.offset(index);\n  var size = caml_ba_get_size(sub_dims);\n  var size_per_element = caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * size_per_element, (ofs + size) * size_per_element);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);\n}\n\n//Provides: caml_ba_reshape\n//Requires: caml_js_from_array, caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\nfunction caml_ba_reshape(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var new_dim = [];\n  var num_dims = vind.length;\n\n  if (num_dims < 0 || num_dims > 16){\n    caml_invalid_argument(\"Bigarray.reshape: bad number of dimensions\");\n  }\n  var num_elts = 1;\n  for (var i = 0; i < num_dims; i++) {\n    new_dim[i] = vind[i];\n    if (new_dim[i] < 0)\n      caml_invalid_argument(\"Bigarray.reshape: negative dimension\");\n    num_elts = num_elts * new_dim[i];\n  }\n\n  var size = caml_ba_get_size(ba.dims);\n  // Check that sizes agree\n  if (num_elts != size)\n    caml_invalid_argument(\"Bigarray.reshape: size mismatch\");\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);\n}\n\n//Provides: caml_ba_serialize\n//Requires: caml_int64_bits_of_float, caml_int64_to_bytes\n//Requires: caml_int32_bits_of_float\nfunction caml_ba_serialize(writer, ba, sz) {\n  writer.write(32, ba.dims.length);\n  writer.write(32, (ba.kind | (ba.layout << 8)));\n  if(ba.caml_custom == \"_bigarr02\")\n    for(var i = 0; i < ba.dims.length; i++) {\n      if(ba.dims[i] < 0xffff)\n        writer.write(16, ba.dims[i]);\n      else {\n        writer.write(16, 0xffff);\n        writer.write(32, 0);\n        writer.write(32, ba.dims[i]);\n      }\n    }\n  else\n    for(var i = 0; i < ba.dims.length; i++) writer.write(32,ba.dims[i])\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(8, ba.data[i]);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(16, ba.data[i]);\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    writer.write(8,0);\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 7:  // Int32Array (int64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var b = caml_int64_to_bytes(ba.get(i));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 1:  // Float64Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int32_bits_of_float(ba.get(i));\n      writer.write(32, b);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var j = ba.get(i);\n      writer.write(32, caml_int32_bits_of_float(j[1]));\n      writer.write(32, caml_int32_bits_of_float(j[2]));\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var complex = ba.get(i);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  }\n  sz[0] = (4 + ba.dims.length) * 4;\n  sz[1] = (4 + ba.dims.length) * 8;\n}\n\n//Provides: caml_ba_deserialize\n//Requires: caml_ba_create_unsafe, caml_failwith\n//Requires: caml_ba_get_size\n//Requires: caml_int64_of_bytes, caml_int64_float_of_bits\n//Requires: caml_int32_float_of_bits\n//Requires: caml_ba_create_buffer\nfunction caml_ba_deserialize(reader, sz, name){\n  var num_dims = reader.read32s();\n  if (num_dims < 0 || num_dims > 16)\n    caml_failwith(\"input_value: wrong number of bigarray dimensions\");\n  var tag = reader.read32s();\n  var kind = tag & 0xff\n  var layout = (tag >> 8) & 1;\n  var dims = []\n  if(name == \"_bigarr02\")\n    for (var i = 0; i < num_dims; i++) {\n      var size_dim = reader.read16u();\n      if(size_dim == 0xffff){\n        var size_dim_hi = reader.read32u();\n        var size_dim_lo = reader.read32u();\n        if(size_dim_hi != 0)\n          caml_failwith(\"input_value: bigarray dimension overflow in 32bit\");\n        size_dim = size_dim_lo;\n      }\n      dims.push(size_dim);\n    }\n  else\n    for (var i = 0; i < num_dims; i++) dims.push(reader.read32u());\n  var size = caml_ba_get_size(dims);\n  var data = caml_ba_create_buffer(kind, size);\n  var ba = caml_ba_create_unsafe(kind, layout, dims, data);\n  switch(kind){\n  case 2:  //Int8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8s();\n    }\n    break;\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8u();\n    }\n    break;\n  case 4:  // Int16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16s();\n    }\n    break;\n  case 5:  // Uint16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16u();\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    var sixty = reader.read8u();\n    if(sixty) caml_failwith(\"input_value: cannot read bigarray with 64-bit OCaml ints\");\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 7: // (int64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var int64 = caml_int64_of_bytes(t);\n      ba.set(i,int64);\n    }\n    break;\n  case 1:  // Float64Array\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,f);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < size; i++){\n      var f = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,f);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < size; i++){\n      var re = caml_int32_float_of_bits(reader.read32s());\n      var im = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,[254,re,im]);\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,[254,re,im]);\n    }\n    break\n  }\n  sz[0] = (4 + num_dims) * 4;\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Deprecated\n//Provides: caml_ba_create_from\n//Requires: caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size_per_element\nfunction caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){\n  if(data2 || caml_ba_get_size_per_element(kind) == 2){\n    caml_invalid_argument(\"caml_ba_create_from: use return caml_ba_create_unsafe\");\n  }\n  return caml_ba_create_unsafe(kind, layout, dims, data1);\n}\n\n//Provides: caml_ba_hash const\n//Requires: caml_ba_get_size, caml_hash_mix_int, caml_hash_mix_float\nfunction caml_ba_hash(ba){\n  var num_elts = caml_ba_get_size(ba.dims);\n  var h = 0;\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    if(num_elts > 256) num_elts = 256;\n    var w = 0, i =0;\n    for(i = 0; i + 4 <= ba.data.length; i+=4){\n      w = ba.data[i+0] | (ba.data[i+1] << 8) | (ba.data[i+2] << 16) | (ba.data[i+3] << 24);\n      h = caml_hash_mix_int(h,w);\n    }\n    w = 0;\n    switch (num_elts & 3) {\n    case 3: w  = ba.data[i+2] << 16;    /* fallthrough */\n    case 2: w |= ba.data[i+1] << 8;     /* fallthrough */\n    case 1: w |= ba.data[i+0];\n      h = caml_hash_mix_int(h, w);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    if(num_elts > 128) num_elts = 128;\n    var w = 0, i =0;\n    for(i = 0; i + 2 <= ba.data.length; i+=2){\n      w = ba.data[i+0] | (ba.data[i+1] << 16);\n      h = caml_hash_mix_int(h,w);\n    }\n    if ((num_elts & 1) != 0)\n      h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 6:  // Int32Array (int32)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 7:  // Int32Array (int64)\n    if (num_elts > 32) num_elts = 32;\n    num_elts *= 2\n    for (var i = 0; i < num_elts; i++) {\n      h = caml_hash_mix_int(h, ba.data[i]);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    num_elts *=2; /* fallthrough */\n  case 0:  // Float32Array\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  case 11: // Float64Array (complex64)\n    num_elts *=2; /* fallthrough */\n  case 1:  // Float64Array\n    if (num_elts > 32) num_elts = 32;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  }\n  return h;\n}\n\n//Provides: caml_ba_to_typed_array mutable\nfunction caml_ba_to_typed_array(ba){\n  return ba.data;\n}\n\n//Provides: caml_ba_kind_of_typed_array mutable\n//Requires: caml_invalid_argument\nfunction caml_ba_kind_of_typed_array(ta){\n  var kind;\n  if      (ta instanceof Float32Array) kind = 0;\n  else if (ta instanceof Float64Array) kind = 1;\n  else if (ta instanceof Int8Array) kind = 2;\n  else if (ta instanceof Uint8Array) kind = 3;\n  else if (ta instanceof Uint8ClampedArray) kind = 3;\n  else if (ta instanceof Int16Array) kind = 4;\n  else if (ta instanceof Uint16Array) kind = 5;\n  else if (ta instanceof Int32Array) kind = 6;\n  else if (ta instanceof Uint32Array) kind = 6;\n  else caml_invalid_argument(\"caml_ba_kind_of_typed_array: unsupported kind\");\n  return kind;\n}\n\n//Provides: caml_ba_from_typed_array mutable\n//Requires: caml_ba_kind_of_typed_array\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_from_typed_array(ta){\n  var kind = caml_ba_kind_of_typed_array(ta);\n  var ta =\n      /* Needed to avoid unsigned setters overflowing\n         the range of OCaml [int32] values. */\n      ta instanceof Uint32Array ?\n      new Int32Array(ta.buffer ,ta.byteOffset, ta.length) : ta;\n  return caml_ba_create_unsafe(kind, 0, [ta.length], ta);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: MlInt64\n//Requires: caml_int64_offset, caml_raise_zero_divide\nfunction MlInt64 (lo,mi,hi) {\n  this.lo = lo & 0xffffff;\n  this.mi = mi & 0xffffff;\n  this.hi = hi & 0xffff;\n}\nMlInt64.prototype.caml_custom = \"_j\"\nMlInt64.prototype.copy = function () {\n  return new MlInt64(this.lo,this.mi,this.hi);\n}\n\nMlInt64.prototype.ucompare = function (x) {\n  if (this.hi > x.hi) return 1;\n  if (this.hi < x.hi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.compare = function (x) {\n  var hi = this.hi << 16;\n  var xhi = x.hi << 16;\n  if (hi > xhi) return 1;\n  if (hi < xhi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.neg = function () {\n  var lo = - this.lo;\n  var mi = - this.mi + (lo >> 24);\n  var hi = - this.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.add = function (x) {\n  var lo = this.lo + x.lo;\n  var mi = this.mi + x.mi + (lo >> 24);\n  var hi = this.hi + x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.sub = function (x) {\n  var lo = this.lo - x.lo;\n  var mi = this.mi - x.mi + (lo >> 24);\n  var hi = this.hi - x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.mul = function (x) {\n  var lo = this.lo * x.lo;\n  var mi = ((lo * caml_int64_offset) | 0) + this.mi * x.lo + this.lo * x.mi;\n  var hi = ((mi * caml_int64_offset) | 0) + this.hi * x.lo + this.mi * x.mi + this.lo * x.hi;\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.isZero = function () {\n  return (this.lo|this.mi|this.hi) == 0;\n}\nMlInt64.prototype.isNeg = function () {\n  return (this.hi << 16) < 0;\n}\nMlInt64.prototype.and = function (x) {\n  return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);\n}\nMlInt64.prototype.or = function (x) {\n  return new MlInt64(this.lo|x.lo, this.mi|x.mi, this.hi|x.hi);\n}\nMlInt64.prototype.xor = function (x) {\n  return new MlInt64(this.lo^x.lo, this.mi^x.mi, this.hi^x.hi);\n}\nMlInt64.prototype.shift_left = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24) {\n    return new MlInt64 (this.lo << s,\n                        (this.mi << s) | (this.lo >> (24 - s)),\n                        (this.hi << s) | (this.mi >> (24 - s)));\n  }\n  if (s < 48)\n    return new MlInt64 (0,\n                        this.lo << (s - 24),\n                        (this.mi << (s - 24)) | (this.lo >> (48 - s)));\n  return new MlInt64(0, 0, this.lo << (s - 48))\n}\nMlInt64.prototype.shift_right_unsigned = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (this.hi << (24 - s)),\n      (this.hi >> s));\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi >> (s - 24)),\n      0);\n  return new MlInt64 (this.hi >> (s - 48), 0, 0);\n}\nMlInt64.prototype.shift_right = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  var h = (this.hi << 16) >> 16;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (h << (24 - s)),\n      ((this.hi << 16) >> s) >>> 16);\n  var sign = (this.hi << 16) >> 31;\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi << 16) >> (s - 24) >> 16,\n      sign & 0xffff);\n  return new MlInt64 ((this.hi << 16) >> (s - 32), sign, sign);\n}\nMlInt64.prototype.lsl1 = function () {\n  this.hi = (this.hi << 1) | (this.mi >> 23);\n  this.mi = ((this.mi << 1) | (this.lo >> 23)) & 0xffffff;\n  this.lo = (this.lo << 1) & 0xffffff;\n}\nMlInt64.prototype.lsr1 = function () {\n  this.lo = ((this.lo >>> 1) | (this.mi << 23)) & 0xffffff;\n  this.mi = ((this.mi >>> 1) | (this.hi << 23)) & 0xffffff;\n  this.hi = this.hi >>> 1;\n}\nMlInt64.prototype.udivmod = function (x) {\n  var offset = 0;\n  var modulus = this.copy();\n  var divisor = x.copy();\n  var quotient = new MlInt64(0,0,0);\n  while (modulus.ucompare(divisor) > 0) {\n    offset++;\n    divisor.lsl1();\n  }\n  while (offset >= 0) {\n    offset --;\n    quotient.lsl1();\n    if (modulus.ucompare(divisor) >= 0) {\n      quotient.lo ++;\n      modulus = modulus.sub(divisor);\n    }\n    divisor.lsr1();\n  }\n  return { quotient : quotient, modulus : modulus };\n}\nMlInt64.prototype.div = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi ^ y.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var q = x.udivmod(y).quotient;\n  if (sign & 0x8000) q = q.neg();\n  return q;\n}\nMlInt64.prototype.mod = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var r = x.udivmod(y).modulus;\n  if (sign & 0x8000) r = r.neg();\n  return r;\n}\nMlInt64.prototype.toInt = function () {\n  return this.lo | (this.mi << 24);\n}\nMlInt64.prototype.toFloat = function () {\n  return ((this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)) + this.lo;\n}\nMlInt64.prototype.toArray = function () {\n  return [this.hi >> 8,\n          this.hi & 0xff,\n          this.mi >> 16,\n          (this.mi >> 8) & 0xff,\n          this.mi & 0xff,\n          this.lo >> 16,\n          (this.lo >> 8) & 0xff,\n          this.lo & 0xff];\n}\nMlInt64.prototype.lo32 = function () {\n  return this.lo | ((this.mi & 0xff) << 24);\n}\nMlInt64.prototype.hi32 = function () {\n  return ((this.mi >>> 8) & 0xffff) | (this.hi << 16);\n}\n\n//Provides: caml_int64_ult const\nfunction caml_int64_ult(x,y) { return x.ucompare(y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y, total) { return x.compare(y) }\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) { return x.neg() }\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) { return x.add(y) }\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) { return x.sub(y) }\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) { return x.mul(y) }\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) { return +x.isZero(); }\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) { return +x.isNeg(); }\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) { return x.and(y); }\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) { return x.or(y); }\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) { return x.xor(y) }\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) { return x.shift_left(s) }\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) { return x.shift_right_unsigned(s) }\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) { return x.shift_right(s) }\n\n//Provides: caml_int64_div const\nfunction caml_int64_div (x, y) { return x.div(y) }\n\n//Provides: caml_int64_mod const\nfunction caml_int64_mod (x, y) { return x.mod(y) }\n\n//Provides: caml_int64_of_int32 const\n//Requires: MlInt64\nfunction caml_int64_of_int32 (x) {\n  return new MlInt64(x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff)\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) { return x.toInt() }\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) { return x.toFloat () }\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset, MlInt64\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return new MlInt64(\n    x & 0xffffff,\n    Math.floor(x * caml_int64_offset) & 0xffffff,\n    Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = x.udivmod(wbase);\n    x = p.quotient;\n    buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit\n//Requires: caml_int64_of_int32, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get, MlInt64\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n      new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient;\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_create_lo_mi_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_mi_hi(lo, mi, hi){\n  return new MlInt64(lo, mi, hi)\n}\n//Provides: caml_int64_create_lo_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_hi(lo, hi){\n  return new MlInt64 (\n    lo & 0xffffff,\n    ((lo >>> 24) & 0xff) | ((hi & 0xffff) << 8),\n    (hi >>> 16) & 0xffff);\n}\n//Provides: caml_int64_lo32 const\nfunction caml_int64_lo32(v){ return v.lo32() }\n\n//Provides: caml_int64_hi32 const\nfunction caml_int64_hi32(v){ return v.hi32() }\n\n//Provides: caml_int64_of_bytes const\n//Requires: MlInt64\nfunction caml_int64_of_bytes(a) {\n  return new MlInt64(a[7] << 0 | (a[6] << 8) | (a[5] << 16),\n                     a[4] << 0 | (a[3] << 8) | (a[2] << 16),\n                     a[1] << 0 | (a[0] << 8));\n}\n//Provides: caml_int64_to_bytes const\nfunction caml_int64_to_bytes(x) { return x.toArray() }\n\n//Provides: caml_int64_hash const\nfunction caml_int64_hash(v){\n  return (v.lo32()) ^ (v.hi32())\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n  if(log2_ok) return Math.floor(Math.log2(x))\n  var i = 0;\n  if (x == 0) return -Infinity;\n  if(x>=1) {while (x>=2) {x/=2; i++} }\n  else {while (x < 1) {x*=2; i--} };\n  return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2, caml_int64_create_lo_mi_hi\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x))\n      return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);\n    if (x > 0)\n      return caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)\n    else\n      return caml_int64_create_lo_mi_hi(0, 0, 0xfff0)\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return caml_int64_create_lo_mi_hi(r1, r2, r3);\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new Float32Array(1);\n  float32a[0] = x;\n  var int32a = new Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_string_of_jsstring, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_string_of_jsstring(\"nan\");\n    return caml_string_of_jsstring ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2,prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n    var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_string_of_jsstring (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var lo = x.lo;\n  var mi = x.mi;\n  var hi = x.hi;\n  var exp = (hi & 0x7fff) >> 4;\n  if (exp == 2047) {\n    if ((lo|mi|(hi&0xf)) == 0)\n      return (hi & 0x8000)?(-Infinity):Infinity;\n    else\n      return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (lo*k+mi)*k+(hi&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (hi & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_nextafter_float const\n//Requires: caml_int64_float_of_bits, caml_int64_bits_of_float, caml_int64_add, caml_int64_sub,caml_int64_of_int32\nfunction caml_nextafter_float (x,y) {\n  if(isNaN(x) || isNaN(y)) return NaN;\n  if(x==y) return y;\n  if(x==0){\n    if(y < 0)\n      return -Math.pow(2, -1074)\n    else\n      return Math.pow(2, -1074)\n  }\n  var bits = caml_int64_bits_of_float(x);\n  var one = caml_int64_of_int32(1);\n  if ((x<y) == (x>0))\n    bits = caml_int64_add(bits, one)\n  else\n    bits = caml_int64_sub(bits, one)\n  return caml_int64_float_of_bits(bits);\n}\n\n//Provides: caml_trunc_float\nfunction caml_trunc_float(x){\n  return Math.trunc(x);\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new Int32Array(1);\n  int32a[0] = x;\n  var float32a = new Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = Math.max(-1023, jsoo_floor_log2(x) + 1);\n  x *= Math.pow(2,-exp);\n  while (x < 0.5) {\n    x *= 2;\n    exp--;\n  }\n  while (x >= 1) {\n    x *= 0.5;\n    exp++;\n  }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_signbit_float const\nfunction caml_signbit_float(x) {\n  if (x == 0) x = 1 / x;\n  return (x < 0)?1:0;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) { return Math.expm1(x); }\n//Provides: caml_exp2_float const\nfunction caml_exp2_float(x) { return Math.pow(2, x); }\n//Provides: caml_log1p_float const\nfunction caml_log1p_float(x) { return Math.log1p(x); }\n//Provides: caml_log2_float const\nfunction caml_log2_float(x) { return Math.log2(x); }\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) { return Math.hypot(x, y); }\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.log10(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return Math.cosh(x); }\n//Provides: caml_acosh_float const\nfunction caml_acosh_float (x) { return Math.acosh(x); }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return Math.sinh(x); }\n//Provides: caml_asinh_float const\nfunction caml_asinh_float (x) { return Math.asinh(x); }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) { return Math.tanh(x); }\n//Provides: caml_atanh_float const\nfunction caml_atanh_float (x) { return Math.atanh(x); }\n//Provides: caml_round_float const\nfunction caml_round_float (x) {\n  if (x >= 0) {\n    var y = Math.floor(x);\n    return (x - y >= 0.5)?(y + 1):y\n  } else {\n    var y = Math.ceil(x);\n    return (y - x >= 0.5)?(y - 1):y\n  }\n}\n//Provides: caml_cbrt_float const\nfunction caml_cbrt_float (x) { return Math.cbrt(x); }\n\n//Provides: caml_erf_float const\nfunction caml_erf_float(x) {\n  var a1 = 0.254829592;\n  var a2 = -0.284496736;\n  var a3 = 1.421413741;\n  var a4 = -1.453152027;\n  var a5 = 1.061405429;\n  var p = 0.3275911;\n\n  var sign = 1;\n  if (x < 0) {\n    sign = -1;\n  }\n  x = Math.abs(x);\n  var t = 1.0 / (1.0 + p * x);\n  var y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n  return sign * y;\n}\n\n//Provides: caml_erfc_float const\n//Requires: caml_erf_float\nfunction caml_erfc_float(x) {\n  return 1 - caml_erf_float(x);\n}\n\n\n//Provides: caml_fma_float const\nfunction caml_fma_float(x, y, z) {\n  var SPLIT = Math.pow(2, 27) + 1;\n  var MIN_VALUE = Math.pow(2, -1022);\n  var EPSILON = Math.pow(2, -52);\n  var C = 416;\n  var A = Math.pow(2, +C);\n  var B = Math.pow(2, -C);\n\n  function multiply (a, b) {\n    var at = SPLIT * a;\n    var ahi = at - (at - a);\n    var alo = a - ahi;\n    var bt = SPLIT * b;\n    var bhi = bt - (bt - b);\n    var blo = b - bhi;\n    var p = a * b;\n    var e = ((ahi * bhi - p) + ahi * blo + alo * bhi) + alo * blo;\n    return {\n      p: p,\n      e: e\n    };\n  };\n\n  function add (a, b) {\n    var s = a + b;\n    var v = s - a;\n    var e = (a - (s - v)) + (b - v);\n    return {\n      s: s,\n      e: e\n    };\n  };\n\n  function adjust (x, y) {\n    return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x ? x * (1 + (x < 0 ? -1 : +1) * (y < 0 ? -1 : +1) * EPSILON) : x;\n  };\n\n  if (x === 0 || x !== x || x === +1 / 0 || x === -1 / 0 ||\n      y === 0 || y !== y || y === +1 / 0 || y === -1 / 0) {\n    return x * y + z;\n  }\n  if (z === 0) {\n    return x * y;\n  }\n  if (z !== z || z === +1 / 0 || z === -1 / 0) {\n    return z;\n  }\n\n  var scale = 1;\n  while (Math.abs(x) > A) {\n    scale *= A;\n    x *= B;\n  }\n  while (Math.abs(y) > A) {\n    scale *= A;\n    y *= B;\n  }\n  if (scale === 1 / 0) {\n    return x * y * scale;\n  }\n  while (Math.abs(x) < B) {\n    scale *= B;\n    x *= A;\n  }\n  while (Math.abs(y) < B) {\n    scale *= B;\n    y *= A;\n  }\n  if (scale === 0) {\n    return z;\n  }\n\n  var xs = x;\n  var ys = y;\n  var zs = z / scale;\n\n  if (Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) {\n    return z;\n  }\n  if (Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4) {\n    zs = (z < 0 ? -1 : +1) * MIN_VALUE;\n  }\n\n  var xy = multiply(xs, ys);\n  var s = add(xy.p, zs);\n  var u = add(xy.e, s.e);\n  var i = add(s.s, u.s);\n\n  var f = i.s + adjust(i.e, u.e);\n  if (f === 0) {\n    return f;\n  }\n\n  var fs = f * scale;\n  if (Math.abs(fs) > MIN_VALUE) {\n    return fs;\n  }\n\n  // It is possible that there was extra rounding for a denormalized value.\n  return fs + adjust(f - fs / scale, i.e) * scale;\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  function toFixed(x,dp) {\n    if (Math.abs(x) < 1.0) {\n      return x.toFixed(dp);\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10,e);\n        x += (new Array(e+1)).join('0');\n        if(dp > 0) {\n          x = x + '.' + (new Array(dp+1)).join('0');\n        }\n        return x;\n      }\n      else return x.toFixed(dp)\n    }\n  }\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = toFixed(x, prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_jsbytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_jsbytes_of_string(s)\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);\n  //          1        2             3           5\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[5]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_alloc_dummy_infix\n//Requires: caml_call_gen\nfunction caml_alloc_dummy_infix () {\n  return function f (x) { return caml_call_gen(f.fun, [x]) }\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n\n\n//Provides: caml_obj_tag\n//Requires: caml_is_ml_bytes, caml_is_ml_string\nfunction caml_obj_tag (x) {\n  if ((x instanceof Array) && x[0] == (x[0] >>> 0))\n    return x[0]\n  else if (caml_is_ml_bytes(x))\n    return 252\n  else if (caml_is_ml_string(x))\n    return 252\n  else if ((x instanceof Function) || typeof x == \"function\")\n    return 247\n  else if (x && x.caml_custom)\n    return 255\n  else\n    return 1000\n}\n\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n\n//Provides: caml_obj_with_tag\nfunction caml_obj_with_tag(tag,x) {\n  var l = x.length;\n  var a = new Array(l);\n  a[0] = tag;\n  for(var i = 1; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_dup mutable (mutable)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_obj_make_forward\nfunction caml_obj_make_forward (b,v) {\n  b[0]=250;\n  b[1]=v;\n  return 0\n}\n\n//Provides: caml_obj_compare_and_swap\nfunction caml_obj_compare_and_swap(x,i,old,n){\n  if(x[i+1] == old) {\n    x[i+1] = n;\n    return 1;\n  }\n  return 0\n}\n\n//Provides: caml_obj_is_shared\nfunction caml_obj_is_shared(x){\n  return 1\n}\n\n//Provides: caml_lazy_make_forward const (mutable)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === undefined) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n    return meths[ofs - 1];\n  }\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id const\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_obj_raw_field\nfunction caml_obj_raw_field(o,i) { return o[i+1] }\n\n//Provides: caml_obj_set_raw_field\nfunction caml_obj_set_raw_field(o,i,v) { return o[i+1] = v }\n\n//Provides: caml_obj_reachable_words\nfunction caml_obj_reachable_words(o) { return 0; }\n\n//Provides: caml_obj_add_offset\n//Requires: caml_failwith\nfunction caml_obj_add_offset(v,offset) {\n  caml_failwith(\"Obj.add_offset is not supported\");\n}\n\n//Provides: caml_obj_update_tag\nfunction caml_obj_update_tag(b,o,n) {\n    if(b[0]==o) { b[0] = n; return 1 }\n    return 0\n}\n\n//Provides: caml_lazy_update_to_forcing\n//Requires: caml_obj_update_tag\nfunction caml_lazy_update_to_forcing(o) {\n  if ((o instanceof Array) && o[0] == (o[0] >>> 0) &&\n      caml_obj_update_tag(o, 246, 244)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n//Provides: caml_lazy_update_to_forward\n//Requires: caml_obj_update_tag\n  function caml_lazy_update_to_forward(o) {\n  caml_obj_update_tag(o,244,250);\n  return 0; // unit\n}\n\n\n//Provides: caml_lazy_reset_to_lazy\n//Requires: caml_obj_update_tag\nfunction caml_lazy_reset_to_lazy(o) {\n  caml_obj_update_tag(o,244,246);\n  return 0;\n}\n\n//Provides: caml_lazy_read_result\n//Requires: caml_obj_tag\nfunction caml_lazy_read_result(o) {\n  return (caml_obj_tag(o) == 250)?o[1]:o;\n}\n\n\n//Provides: caml_is_continuation_tag\n//Version: < 5\nfunction caml_is_continuation_tag(t) {\n  return 0;\n}\n\n//Provides: caml_is_continuation_tag\n//Version: >= 5\nfunction caml_is_continuation_tag(t) {\n  return (t == 245) ? 1 : 0;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_jsbytes_of_string(fmt) == \"%d\") return caml_string_of_jsbytes(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;\n  if (len > 0) {\n    switch (caml_string_unsafe_get(s,i)) {\n    case 45: i++; sign = -1; break;\n    case 43: i++; sign = 1; break;\n    }\n  }\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    case 117: case 85: i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_mul const\nfunction caml_mul(a,b){\n  return Math.imul(a,b);\n}\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\n//Requires: caml_int64_to_bytes, caml_int64_of_bytes\nfunction caml_int64_bswap(x) {\n  var y = caml_int64_to_bytes(x);\n  return caml_int64_of_bytes([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Hashtbl\n\n\n//Provides: caml_hash_univ_param mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_ml_bytes_content\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float, caml_custom_ops\n//Requires: caml_ml_bytes_length, caml_jsbytes_of_string\n//Version: < 4.12\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (caml_is_ml_bytes(obj)) {\n      count --;\n      var content = caml_ml_bytes_content(obj);\n      if(typeof content === \"string\") {\n        for (var b = content, l = b.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n      } else { /* ARRAY */\n        for (var a = content, l = a.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (caml_is_ml_string(obj)) {\n      var jsbytes = caml_jsbytes_of_string(obj);\n      for (var b = jsbytes, l = jsbytes.length, i = 0; i < l; i++)\n        hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (typeof obj === \"string\") {\n      for (var b = obj, l = obj.length, i = 0; i < l; i++)\n        hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    } else if(obj && obj.caml_custom) {\n      if(caml_custom_ops[obj.caml_custom] && caml_custom_ops[obj.caml_custom].hash) {\n        var h = caml_custom_ops[obj.caml_custom].hash(obj) | 0;\n        hash_accu = (hash_accu * 65599 + h) | 0;\n      }\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int64\nfunction caml_hash_mix_float (h, v0) {\n  return caml_hash_mix_int64(h, caml_int64_bits_of_float (v0));\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\n//Requires: caml_int64_lo32, caml_int64_hi32\nfunction caml_hash_mix_int64 (h, v) {\n  h = caml_hash_mix_int(h, caml_int64_lo32(v));\n  h = caml_hash_mix_int(h, caml_int64_hi32(v));\n  return h;\n}\n\n//Provides: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_jsbytes(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n      | (s.charCodeAt(i+1) << 8)\n      | (s.charCodeAt(i+2) << 16)\n      | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1:\n    w |= s.charCodeAt(i);\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_bytes_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes\n//Requires: caml_ml_bytes_content\n//Requires: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_bytes_arr\nfunction caml_hash_mix_bytes(h, v) {\n  var content = caml_ml_bytes_content(v);\n  if(typeof content === \"string\")\n    return caml_hash_mix_jsbytes(h, content)\n  else /* ARRAY */\n    return caml_hash_mix_bytes_arr(h, content);\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_hash_mix_jsbytes, caml_jsbytes_of_string\nfunction caml_hash_mix_string(h, v) {\n  return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));\n}\n\n\n//Provides: caml_hash mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_float, caml_hash_mix_string, caml_hash_mix_bytes, caml_custom_ops\n//Requires: caml_hash_mix_jsbytes\n//Requires: caml_is_continuation_tag\nfunction caml_hash (count, limit, seed, obj) {\n  var queue, rd, wr, sz, num, h, v, i, len;\n  sz = limit;\n  if (sz < 0 || sz > 256) sz = 256;\n  num = count;\n  h = seed;\n  queue = [obj]; rd = 0; wr = 1;\n  while (rd < wr && num > 0) {\n    v = queue[rd++];\n    if (v && v.caml_custom){\n      if(caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash) {\n        var hh = caml_custom_ops[v.caml_custom].hash(v);\n        h = caml_hash_mix_int (h, hh);\n        num --;\n      }\n    }\n    else if (v instanceof Array && v[0] === (v[0]|0)) {\n      switch (v[0]) {\n      case 248:\n        // Object\n        h = caml_hash_mix_int(h, v[2]);\n        num--;\n        break;\n      case 250:\n        // Forward\n        queue[--rd] = v[1];\n        break;\n      default:\n        if(caml_is_continuation_tag(v[0])) {\n          /* All continuations hash to the same value,\n             since we have no idea how to distinguish them. */\n          break;\n        }\n        var tag = ((v.length - 1) << 10) | v[0];\n        h = caml_hash_mix_int(h, tag);\n        for (i = 1, len = v.length; i < len; i++) {\n          if (wr >= sz) break;\n          queue[wr++] = v[i];\n        }\n        break;\n      }\n    } else if (caml_is_ml_bytes(v)) {\n      h = caml_hash_mix_bytes(h,v)\n      num--;\n    } else if (caml_is_ml_string(v)) {\n      h = caml_hash_mix_string(h,v)\n      num--;\n    } else if (typeof v === \"string\") {\n      h = caml_hash_mix_jsbytes(h,v)\n      num--;\n    } else if (v === (v|0)) {\n      // Integer\n      h = caml_hash_mix_int(h, v+v+1);\n      num--;\n    } else if (typeof v === \"number\") {\n      // Float\n      h = caml_hash_mix_float(h,v);\n      num--;\n    }\n  }\n  h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n\n//Provides: caml_string_hash\n//Requires: caml_hash_mix_final, caml_hash_mix_string\nfunction caml_string_hash(h, v){\n  var h = caml_hash_mix_string(h,v);\n  var h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_marshal_constants\nvar caml_marshal_constants = {\n  PREFIX_SMALL_BLOCK:         0x80,\n  PREFIX_SMALL_INT:           0x40,\n  PREFIX_SMALL_STRING:        0x20,\n  CODE_INT8:                  0x00,\n  CODE_INT16:                 0x01,\n  CODE_INT32:                 0x02,\n  CODE_INT64:                 0x03,\n  CODE_SHARED8:               0x04,\n  CODE_SHARED16:              0x05,\n  CODE_SHARED32:              0x06,\n  CODE_BLOCK32:               0x08,\n  CODE_BLOCK64:               0x13,\n  CODE_STRING8:               0x09,\n  CODE_STRING32:              0x0A,\n  CODE_DOUBLE_BIG:            0x0B,\n  CODE_DOUBLE_LITTLE:         0x0C,\n  CODE_DOUBLE_ARRAY8_BIG:     0x0D,\n  CODE_DOUBLE_ARRAY8_LITTLE:  0x0E,\n  CODE_DOUBLE_ARRAY32_BIG:    0x0F,\n  CODE_DOUBLE_ARRAY32_LITTLE: 0x07,\n  CODE_CODEPOINTER:           0x10,\n  CODE_INFIXPOINTER:          0x11,\n  CODE_CUSTOM:                0x12,\n  CODE_CUSTOM_LEN:            0x18,\n  CODE_CUSTOM_FIXED:          0x19\n}\n\n\n//Provides: UInt8ArrayReader\n//Requires: caml_string_of_array, caml_jsbytes_of_string\nfunction UInt8ArrayReader (s, i) { this.s = s; this.i = i; }\nUInt8ArrayReader.prototype = {\n  read8u:function () { return this.s[this.i++]; },\n  read8s:function () { return this.s[this.i++] << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s[i] << 8) | s[i + 1]\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s[i] << 24 >> 16) | s[i + 1];\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s[i] << 24) | (s[i+1] << 16) |\n            (s[i+2] << 8) | s[i+3]) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s[i] << 24) | (s[i+1] << 16) |\n      (s[i+2] << 8) | s[i+3];\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_string_of_array(this.s.subarray(i, i + len));\n  },\n  readuint8array:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return this.s.subarray(i, i + len);\n  }\n}\n\n\n//Provides: MlStringReader\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction MlStringReader (s, i) { this.s = caml_jsbytes_of_string(s); this.i = i; }\nMlStringReader.prototype = {\n  read8u:function () { return this.s.charCodeAt(this.i++); },\n  read8s:function () { return this.s.charCodeAt(this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 8) | s.charCodeAt(i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 24 >> 16) | s.charCodeAt(i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n            (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3)) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n      (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_string_of_jsbytes(this.s.substring(i, i + len));\n  },\n  readuint8array:function (len) {\n    var b = new Uint8Array(len);\n    var s = this.s;\n    var i = this.i;\n    for(var j = 0; j < len; j++) {\n      b[j] = s.charCodeAt(i + j);\n    }\n    this.i = i + len;\n    return b;\n  }\n}\n\n//Provides: BigStringReader\n//Requires: caml_string_of_array, caml_ba_get_1\nfunction BigStringReader (bs, i) { this.s = bs; this.i = i; }\nBigStringReader.prototype = {\n  read8u:function () { return caml_ba_get_1(this.s,this.i++); },\n  read8s:function () { return caml_ba_get_1(this.s,this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 8) | caml_ba_get_1(s,i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 24 >> 16) | caml_ba_get_1(s,i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n            (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3)         ) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n      (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    var arr = new Array(len)\n    for(var j = 0; j < len; j++){\n      arr[j] = caml_ba_get_1(this.s, i+j);\n    }\n    this.i = i + len;\n    return caml_string_of_array(arr);\n  },\n  readuint8array:function (len) {\n    var i = this.i;\n    var offset = this.offset(i);\n    this.i = i + len;\n    return this.s.data.subarray(offset, offset + len);\n  }\n}\n\n\n\n//Provides: caml_float_of_bytes\n//Requires: caml_int64_float_of_bits, caml_int64_of_bytes\nfunction caml_float_of_bytes (a) {\n  return caml_int64_float_of_bits (caml_int64_of_bytes (a));\n}\n\n//Provides: caml_input_value_from_string mutable\n//Requires: MlStringReader, caml_input_value_from_reader\nfunction caml_input_value_from_string(s,ofs) {\n  var reader = new MlStringReader (s, typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_input_value_from_bytes mutable\n//Requires: MlStringReader, caml_input_value_from_reader, caml_string_of_bytes\nfunction caml_input_value_from_bytes(s,ofs) {\n  var reader = new MlStringReader (caml_string_of_bytes(s), typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_int64_unmarshal\n//Requires: caml_int64_of_bytes\nfunction caml_int64_unmarshal(reader, size){\n  var t = new Array(8);;\n  for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n  size[0] = 8;\n  return caml_int64_of_bytes (t);\n}\n\n//Provides: caml_int64_marshal\n//Requires: caml_int64_to_bytes\nfunction caml_int64_marshal(writer, v, sizes) {\n  var b = caml_int64_to_bytes (v);\n  for (var i = 0; i < 8; i++) writer.write (8, b[i]);\n  sizes[0] = 8; sizes[1] = 8;\n}\n\n//Provides: caml_int32_unmarshal\nfunction caml_int32_unmarshal(reader, size){\n  size[0] = 4;\n  return reader.read32s ();\n}\n\n//Provides: caml_nativeint_unmarshal\n//Requires: caml_failwith\nfunction caml_nativeint_unmarshal(reader, size){\n  switch (reader.read8u ()) {\n  case 1:\n    size[0] = 4;\n    return reader.read32s ();\n  case 2:\n    caml_failwith(\"input_value: native integer value too large\");\n  default: caml_failwith(\"input_value: ill-formed native integer\");\n  }\n}\n\n//Provides: caml_custom_ops\n//Requires: caml_int64_unmarshal, caml_int64_marshal, caml_int64_compare, caml_int64_hash\n//Requires: caml_int32_unmarshal, caml_nativeint_unmarshal\n//Requires: caml_ba_serialize, caml_ba_deserialize, caml_ba_compare, caml_ba_hash\nvar caml_custom_ops =\n    {\"_j\": {\n      deserialize : caml_int64_unmarshal,\n      serialize  : caml_int64_marshal,\n      fixed_length : 8,\n      compare : caml_int64_compare,\n      hash : caml_int64_hash\n    },\n     \"_i\": {\n       deserialize : caml_int32_unmarshal,\n       fixed_length : 4,\n     },\n     \"_n\": {\n       deserialize : caml_nativeint_unmarshal,\n       fixed_length : 4,\n     },\n     \"_bigarray\":{\n       deserialize : (function (reader, sz) {return caml_ba_deserialize (reader,sz,\"_bigarray\")}),\n       serialize : caml_ba_serialize,\n       compare : caml_ba_compare,\n       hash: caml_ba_hash,\n     },\n     \"_bigarr02\":{\n       deserialize : (function (reader, sz) {return caml_ba_deserialize (reader,sz,\"_bigarr02\")}),\n       serialize : caml_ba_serialize,\n       compare : caml_ba_compare,\n       hash: caml_ba_hash,\n     }\n    }\n\n//Provides: caml_input_value_from_reader mutable\n//Requires: caml_failwith\n//Requires: caml_float_of_bytes, caml_custom_ops\n//Requires: zstd_decompress\n//Requires: UInt8ArrayReader\nfunction caml_input_value_from_reader(reader, ofs) {\n  function readvlq(overflow) {\n    var c = reader.read8u();\n    var n = c & 0x7F;\n    while ((c & 0x80) != 0) {\n      c = reader.read8u();\n      var n7 = n << 7;\n      if (n != n7 >> 7) overflow[0] = true;\n      n = n7 | (c & 0x7F);\n    }\n    return n;\n  }\n  var magic = reader.read32u ()\n  switch(magic){\n  case 0x8495A6BE: /* Intext_magic_number_small */\n    var header_len = 20;\n    var compressed = 0;\n    var data_len = reader.read32u ();\n    var uncompressed_data_len = data_len;\n    var num_objects = reader.read32u ();\n    var _size_32 = reader.read32u ();\n    var _size_64 = reader.read32u ();\n    break\n  case 0x8495A6BD: /* Intext_magic_number_compressed */\n    var header_len = reader.read8u() & 0x3F;\n    var compressed = 1;\n    var overflow = [false];\n    var data_len = readvlq(overflow);\n    var uncompressed_data_len = readvlq(overflow);\n    var num_objects = readvlq(overflow);\n    var _size_32 = readvlq (overflow);\n    var _size_64 = readvlq (overflow);\n    if(overflow[0]){\n        caml_failwith(\"caml_input_value_from_reader: object too large to be read back on this platform\");\n    }\n    break\n  case 0x8495A6BF: /* Intext_magic_number_big */\n    caml_failwith(\"caml_input_value_from_reader: object too large to be read back on a 32-bit platform\");\n    break\n  default:\n    caml_failwith(\"caml_input_value_from_reader: bad object\");\n    break;\n  }\n  var stack = [];\n  var intern_obj_table = (num_objects > 0)?[]:null;\n  var obj_counter = 0;\n  function intern_rec (reader) {\n    var code = reader.read8u ();\n    if (code >= 0x40 /*cst.PREFIX_SMALL_INT*/) {\n      if (code >= 0x80 /*cst.PREFIX_SMALL_BLOCK*/) {\n        var tag = code & 0xF;\n        var size = (code >> 4) & 0x7;\n        var v = [tag];\n        if (size == 0) return v;\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        stack.push(v, size);\n        return v;\n      } else\n        return (code & 0x3F);\n    } else {\n      if (code >= 0x20/*cst.PREFIX_SMALL_STRING */) {\n        var len = code & 0x1F;\n        var v = reader.readstr (len);\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        return v;\n      } else {\n        switch(code) {\n        case 0x00: //cst.CODE_INT8:\n          return reader.read8s ();\n        case 0x01: //cst.CODE_INT16:\n          return reader.read16s ();\n        case 0x02: //cst.CODE_INT32:\n          return reader.read32s ();\n        case 0x03: //cst.CODE_INT64:\n          caml_failwith(\"input_value: integer too large\");\n          break;\n        case 0x04: //cst.CODE_SHARED8:\n          var offset = reader.read8u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x05: //cst.CODE_SHARED16:\n          var offset = reader.read16u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x06: //cst.CODE_SHARED32:\n          var offset = reader.read32u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x08: //cst.CODE_BLOCK32:\n          var header = reader.read32u ();\n          var tag = header & 0xFF;\n          var size = header >> 10;\n          var v = [tag];\n          if (size == 0) return v;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          stack.push(v, size);\n          return v;\n        case 0x13: //cst.CODE_BLOCK64:\n          caml_failwith (\"input_value: data block too large\");\n          break;\n        case 0x09: //cst.CODE_STRING8:\n          var len = reader.read8u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0A: //cst.CODE_STRING32:\n          var len = reader.read32u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0C: //cst.CODE_DOUBLE_LITTLE:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[7 - i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0B: //cst.CODE_DOUBLE_BIG:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0E: //cst.CODE_DOUBLE_ARRAY8_LITTLE:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0D: //cst.CODE_DOUBLE_ARRAY8_BIG:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x07: //cst.CODE_DOUBLE_ARRAY32_LITTLE:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0F: //cst.CODE_DOUBLE_ARRAY32_BIG:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x10: //cst.CODE_CODEPOINTER:\n        case 0x11: //cst.CODE_INFIXPOINTER:\n          caml_failwith (\"input_value: code pointer\");\n          break;\n        case 0x12: //cst.CODE_CUSTOM:\n        case 0x18: //cst.CODE_CUSTOM_LEN:\n        case 0x19: //cst.CODE_CUSTOM_FIXED:\n          var c, s = \"\";\n          while ((c = reader.read8u ()) != 0) s += String.fromCharCode (c);\n          var ops = caml_custom_ops[s];\n          var expected_size;\n          if(!ops)\n            caml_failwith(\"input_value: unknown custom block identifier\");\n          switch(code){\n          case 0x12: // cst.CODE_CUSTOM (deprecated)\n            break;\n          case 0x19: // cst.CODE_CUSTOM_FIXED\n            if(!ops.fixed_length)\n              caml_failwith(\"input_value: expected a fixed-size custom block\");\n            expected_size = ops.fixed_length;\n            break;\n          case 0x18: // cst.CODE_CUSTOM_LEN\n            expected_size = reader.read32u ();\n            // Skip size64\n            reader.read32s(); reader.read32s();\n            break;\n          }\n          var old_pos = reader.i;\n          var size = [0];\n          var v = ops.deserialize(reader, size);\n          if(expected_size != undefined){\n            if(expected_size != size[0])\n              caml_failwith(\"input_value: incorrect length of serialized custom block\");\n          }\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        default:\n          caml_failwith (\"input_value: ill-formed message\");\n        }\n      }\n    }\n  }\n  if(compressed) {\n    var data = reader.readuint8array(data_len);\n    var res = new Uint8Array(uncompressed_data_len);\n    var res = zstd_decompress(data, res);\n    var reader = new UInt8ArrayReader(res, 0);\n  }\n  var res = intern_rec (reader);\n  while (stack.length > 0) {\n    var size = stack.pop();\n    var v = stack.pop();\n    var d = v.length;\n    if (d < size) stack.push(v, size);\n    v[d] = intern_rec (reader);\n  }\n  if (typeof ofs!=\"number\") ofs[0] = reader.i;\n  return res;\n}\n\n//Provides: caml_marshal_header_size\n//Version: < 5.1.0\nvar caml_marshal_header_size = 20\n\n//Provides: caml_marshal_header_size\n//Version: >= 5.1.0\nvar caml_marshal_header_size = 16\n\n\n\n//Provides: caml_marshal_data_size mutable\n//Requires: caml_failwith, caml_bytes_unsafe_get\n//Requires: caml_uint8_array_of_bytes\n//Requires: UInt8ArrayReader\n//Requires: caml_marshal_header_size\nfunction caml_marshal_data_size (s, ofs) {\n  var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);\n  function readvlq(overflow) {\n    var c = r.read8u();\n    var n = c & 0x7F;\n    while ((c & 0x80) != 0) {\n      c = r.read8u();\n      var n7 = n << 7;\n      if (n != n7 >> 7) overflow[0] = true;\n      n = n7 | (c & 0x7F);\n    }\n    return n;\n  }\n\n  switch(r.read32u()){\n  case 0x8495A6BE: /* Intext_magic_number_small */\n    var header_len = 20;\n    var data_len = r.read32u();\n    break;\n  case 0x8495A6BD: /* Intext_magic_number_compressed */\n    var header_len = r.read8u() & 0x3F;\n    var overflow = [false];\n    var data_len = readvlq(overflow);\n    if(overflow[0]){\n      caml_failwith(\"Marshal.data_size: object too large to be read back on this platform\");\n    }\n    break\n  case 0x8495A6BF: /* Intext_magic_number_big */\n  default:\n    caml_failwith(\"Marshal.data_size: bad object\");\n    break\n  }\n  return header_len - caml_marshal_header_size + data_len;\n}\n\n//Provides: MlObjectTable\nvar MlObjectTable;\nif (typeof globalThis.Map === 'undefined') {\n  MlObjectTable = function() {\n    /* polyfill (using linear search) */\n    function NaiveLookup(objs) { this.objs = objs; }\n    NaiveLookup.prototype.get = function(v) {\n      for (var i = 0; i < this.objs.length; i++) {\n        if (this.objs[i] === v) return i;\n      }\n    };\n    NaiveLookup.prototype.set = function() {\n      // Do nothing here. [MlObjectTable.store] will push to [this.objs] directly.\n    };\n\n    return function MlObjectTable() {\n      this.objs = []; this.lookup = new NaiveLookup(this.objs);\n    };\n  }();\n}\nelse {\n  MlObjectTable = function MlObjectTable() {\n    this.objs = []; this.lookup = new globalThis.Map();\n  };\n}\n\nMlObjectTable.prototype.store = function(v) {\n  this.lookup.set(v, this.objs.length);\n  this.objs.push(v);\n}\n\nMlObjectTable.prototype.recall = function(v) {\n  var i = this.lookup.get(v);\n  return (i === undefined)\n    ? undefined : this.objs.length - i;   /* index is relative */\n}\n\n//Provides: caml_output_val\n//Requires: caml_int64_to_bytes, caml_failwith\n//Requires: caml_int64_bits_of_float\n//Requires: caml_is_ml_bytes, caml_ml_bytes_length, caml_bytes_unsafe_get\n//Requires: caml_is_ml_string, caml_ml_string_length, caml_string_unsafe_get\n//Requires: MlObjectTable, caml_list_to_js_array, caml_custom_ops\n//Requires: caml_invalid_argument,caml_string_of_jsbytes, caml_is_continuation_tag\nvar caml_output_val = function (){\n  function Writer () { this.chunk = []; }\n  Writer.prototype = {\n    chunk_idx:20, block_len:0, obj_counter:0, size_32:0, size_64:0,\n    write:function (size, value) {\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_at:function (pos, size, value) {\n      var pos = pos;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[pos++] = (value >> i) & 0xFF;\n    },\n    write_code:function (size, code, value) {\n      this.chunk[this.chunk_idx++] = code;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_shared:function (offset) {\n      if (offset < (1 << 8)) this.write_code(8, 0x04 /*cst.CODE_SHARED8*/, offset);\n      else if (offset < (1 << 16)) this.write_code(16, 0x05 /*cst.CODE_SHARED16*/, offset);\n      else this.write_code(32, 0x06 /*cst.CODE_SHARED32*/, offset);\n    },\n    pos:function () { return this.chunk_idx },\n    finalize:function () {\n      this.block_len = this.chunk_idx - 20;\n      this.chunk_idx = 0;\n      this.write (32, 0x8495A6BE);\n      this.write (32, this.block_len);\n      this.write (32, this.obj_counter);\n      this.write (32, this.size_32);\n      this.write (32, this.size_64);\n      return this.chunk;\n    }\n  }\n  return function (v, flags) {\n    flags = caml_list_to_js_array(flags);\n\n    var no_sharing = (flags.indexOf(0 /*Marshal.No_sharing*/) !== -1),\n        closures =  (flags.indexOf(1 /*Marshal.Closures*/) !== -1);\n    /* Marshal.Compat_32 is redundant since integers are 32-bit anyway */\n\n    if (closures)\n      console.warn(\"in caml_output_val: flag Marshal.Closures is not supported.\");\n\n    var writer = new Writer ();\n    var stack = [];\n    var intern_obj_table = no_sharing ? null : new MlObjectTable();\n\n    function memo(v) {\n      if (no_sharing) return false;\n      var existing_offset = intern_obj_table.recall(v);\n      if (existing_offset) { writer.write_shared(existing_offset); return true; }\n      else { intern_obj_table.store(v); return false; }\n    }\n\n    function extern_rec (v) {\n      if (v.caml_custom) {\n        if (memo(v)) return;\n        var name = v.caml_custom;\n        var ops = caml_custom_ops[name];\n        var sz_32_64 = [0,0];\n        if(!ops.serialize)\n          caml_invalid_argument(\"output_value: abstract value (Custom)\");\n        if(ops.fixed_length == undefined){\n          writer.write (8, 0x18 /*cst.CODE_CUSTOM_LEN*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var header_pos = writer.pos ();\n          for(var i = 0; i < 12; i++) {\n            writer.write(8, 0);\n          }\n          ops.serialize(writer, v, sz_32_64);\n          writer.write_at(header_pos, 32, sz_32_64[0]);\n          writer.write_at(header_pos + 4, 32, 0); // zero\n          writer.write_at(header_pos + 8, 32, sz_32_64[1]);\n        } else {\n          writer.write (8, 0x19 /*cst.CODE_CUSTOM_FIXED*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var old_pos = writer.pos();\n          ops.serialize(writer, v, sz_32_64);\n          if (ops.fixed_length != writer.pos() - old_pos)\n            caml_failwith(\"output_value: incorrect fixed sizes specified by \" + name);\n        }\n        writer.size_32 += 2 + ((sz_32_64[0] + 3) >> 2);\n        writer.size_64 += 2 + ((sz_32_64[1] + 7) >> 3);\n      }\n      else if (v instanceof Array && v[0] === (v[0]|0)) {\n        if (v[0] == 251) {\n          caml_failwith(\"output_value: abstract value (Abstract)\");\n        }\n        if (caml_is_continuation_tag(v[0]))\n          caml_invalid_argument(\"output_value: continuation value\");\n        if (v.length > 1 && memo(v)) return;\n        if (v[0] < 16 && v.length - 1 < 8)\n          writer.write (8, 0x80 /*cst.PREFIX_SMALL_BLOCK*/ + v[0] + ((v.length - 1)<<4));\n        else\n          writer.write_code(32, 0x08 /*cst.CODE_BLOCK32*/, ((v.length-1) << 10) | v[0]);\n        writer.size_32 += v.length;\n        writer.size_64 += v.length;\n        if (v.length > 1) stack.push (v, 1);\n      } else if (caml_is_ml_bytes(v)) {\n        if(!(caml_is_ml_bytes(caml_string_of_jsbytes(\"\")))) {\n          caml_failwith(\"output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]\");\n        }\n        if (memo(v)) return;\n        var len = caml_ml_bytes_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_bytes_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else if (caml_is_ml_string(v)) {\n        if (memo(v)) return;\n        var len = caml_ml_string_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_string_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else {\n        if (v != (v|0)){\n          var type_of_v = typeof v;\n          //\n          // If a float happens to be an integer it is serialized as an integer\n          // (Js_of_ocaml cannot tell whether the type of an integer number is\n          // float or integer.) This can result in unexpected crashes when\n          // unmarshalling using the standard runtime. It seems better to\n          // systematically fail on marshalling.\n          //\n          //          if(type_of_v != \"number\")\n          caml_failwith(\"output_value: abstract value (\"+type_of_v+\")\");\n          //          var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));\n          //          writer.write (8, 0x0B /*cst.CODE_DOUBLE_BIG*/);\n          //          for(var i = 0; i<8; i++){writer.write(8,t[i])}\n        }\n        else if (v >= 0 && v < 0x40) {\n          writer.write (8, 0X40 /*cst.PREFIX_SMALL_INT*/ + v);\n        } else {\n          if (v >= -(1 << 7) && v < (1 << 7))\n            writer.write_code(8, 0x00 /*cst.CODE_INT8*/, v);\n          else if (v >= -(1 << 15) && v < (1 << 15))\n            writer.write_code(16, 0x01 /*cst.CODE_INT16*/, v);\n          else\n            writer.write_code(32, 0x02 /*cst.CODE_INT32*/, v);\n        }\n      }\n    }\n    extern_rec (v);\n    while (stack.length > 0) {\n      var i = stack.pop ();\n      var v = stack.pop ();\n      if (i + 1 < v.length) stack.push (v, i + 1);\n      extern_rec (v[i]);\n    }\n    if (intern_obj_table) writer.obj_counter = intern_obj_table.objs.length;\n    writer.finalize();\n    return writer.chunk;\n  }\n} ();\n\n//Provides: caml_output_value_to_string mutable\n//Requires: caml_output_val, caml_string_of_array\nfunction caml_output_value_to_string (v, flags) {\n  return caml_string_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_bytes mutable\n//Requires: caml_output_val, caml_bytes_of_array\nfunction caml_output_value_to_bytes (v, flags) {\n  return caml_bytes_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_buffer\n//Requires: caml_output_val, caml_failwith, caml_blit_bytes\nfunction caml_output_value_to_buffer (s, ofs, len, v, flags) {\n  var t = caml_output_val (v, flags);\n  if (t.length > len) caml_failwith (\"Marshal.to_buffer: buffer overflow\");\n  caml_blit_bytes(t, 0, s, ofs, t.length);\n  return 0;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_compare_val_tag\n//Requires: caml_is_ml_string, caml_is_ml_bytes\nfunction caml_compare_val_tag(a){\n  if (typeof a === \"number\") return 1000; // int_tag (we use it for all numbers)\n  else if (caml_is_ml_bytes(a)) return 252; // string_tag\n  else if (caml_is_ml_string(a)) return 1252; // ocaml string (if different from bytes)\n  else if (a instanceof Array && a[0] === (a[0]>>>0) && a[0] <= 255) {\n    // Look like an ocaml block\n    var tag = a[0] | 0;\n    // ignore double_array_tag because we cannot accurately set\n    // this tag when we create an array of float.\n    return (tag == 254)?0:tag\n  }\n  else if (a instanceof String) return 12520; // javascript string, like string_tag (252)\n  else if (typeof a == \"string\") return 12520; // javascript string, like string_tag (252)\n  else if (a instanceof Number) return 1000; // int_tag (we use it for all numbers)\n  else if (a && a.caml_custom) return 1255; // like custom_tag (255)\n  else if (a && a.compare) return 1256; // like custom_tag (255)\n  else if (typeof a == \"function\") return 1247; // like closure_tag (247)\n  else if (typeof a == \"symbol\") return 1251;\n  return 1001; //out_of_heap_tag\n}\n\n//Provides: caml_compare_val_get_custom\n//Requires: caml_custom_ops\nfunction caml_compare_val_get_custom(a){\n  return caml_custom_ops[a.caml_custom] && caml_custom_ops[a.caml_custom].compare;\n}\n\n//Provides: caml_compare_val_number_custom\n//Requires: caml_compare_val_get_custom\nfunction caml_compare_val_number_custom(num, custom, swap, total) {\n  var comp = caml_compare_val_get_custom(custom);\n  if(comp) {\n    var x = (swap > 0)?comp(custom,num,total):comp(num,custom,total);\n    if(total && x != x) return swap; // total && nan\n    if(+x != +x) return +x; // nan\n    if((x | 0) != 0) return (x | 0); // !nan\n  }\n  return swap\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: caml_int_compare, caml_string_compare, caml_bytes_compare\n//Requires: caml_invalid_argument, caml_compare_val_get_custom, caml_compare_val_tag\n//Requires: caml_compare_val_number_custom\n//Requires: caml_jsbytes_of_string\n//Requires: caml_is_continuation_tag\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      var tag_a = caml_compare_val_tag(a);\n      // forward_tag ?\n      if(tag_a == 250) { a = a[1]; continue }\n\n      var tag_b = caml_compare_val_tag(b);\n      // forward_tag ?\n      if(tag_b == 250) { b = b[1]; continue }\n\n      // tags are different\n      if(tag_a !== tag_b) {\n        if(tag_a == 1000) {\n          if(tag_b == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(a, b, -1, total);\n          }\n          return -1\n        }\n        if(tag_b == 1000) {\n          if(tag_a == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(b, a, 1, total);\n          }\n          return 1\n        }\n        return (tag_a < tag_b)?-1:1;\n      }\n      switch(tag_a){\n        // 246: Lazy_tag handled bellow\n      case 247: // Closure_tag\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 248: // Object\n        var x = caml_int_compare(a[2], b[2]);\n        if (x != 0) return (x | 0);\n        break;\n      case 249: // Infix\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 250: // Forward tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Forward_tag, should not happen\");\n        break;\n      case 251: //Abstract\n        caml_invalid_argument(\"equal: abstract value\");\n        break;\n      case 252: // OCaml bytes\n        if (a !== b) {\n          var x = caml_bytes_compare(a, b);\n          if (x != 0) return (x | 0);\n        };\n        break;\n      case 253: // Double_tag\n        // Cannot happen\n        caml_invalid_argument(\"equal: got Double_tag, should not happen\");\n        break;\n      case 254: // Double_array_tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Double_array_tag, should not happen\");\n        break\n      case 255: // Custom_tag\n        caml_invalid_argument(\"equal: got Custom_tag, should not happen\");\n        break;\n      case 1247: // Function\n        caml_invalid_argument(\"compare: functional value\");\n        break;\n      case 1255: // Custom\n        var comp = caml_compare_val_get_custom(a);\n        if(comp != caml_compare_val_get_custom(b)){\n          return (a.caml_custom<b.caml_custom)?-1:1;\n        }\n        if(!comp)\n          caml_invalid_argument(\"compare: abstract value\");\n        var x = comp(a,b,total);\n        if(x != x){ // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1256: // compare function\n        var x = a.compare(b,total);\n        if(x != x) { // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1000: // Number\n        a = +a;\n        b = +b;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1001: // The rest\n        // Here we can be in the following cases:\n        // 1. JavaScript primitive types\n        // 2. JavaScript object that can be coerced to primitive types\n        // 3. JavaScript object than cannot be coerced to primitive types\n        //\n        // (3) will raise a [TypeError]\n        // (2) will coerce to primitive types using [valueOf] or [toString]\n        // (2) and (3), after eventual coercion\n        // - if a and b are strings, apply lexicographic comparison\n        // - if a or b are not strings, convert a and b to number\n        //   and apply standard comparison\n        //\n        // Exception: `!=` will not coerce/convert if both a and b are objects\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1251: // JavaScript Symbol, no ordering.\n        if(a !== b) {\n          if (!total) return NaN;\n          return 1;\n        }\n        break;\n      case 1252: // ocaml strings\n        var a = caml_jsbytes_of_string(a);\n        var b = caml_jsbytes_of_string(b);\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 12520: // javascript strings\n        var a = a.toString();\n        var b = b.toString();\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 246: // Lazy_tag\n      case 254: // Double_array\n      default: // Block with other tag\n        if(caml_is_continuation_tag(tag_a)) {\n          caml_invalid_argument(\"compare: continuation value\");\n          break;\n        }\n        if (a.length != b.length) return (a.length < b.length)?-1:1;\n        if (a.length > 1) stack.push(a, b, 1);\n        break;\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Format\n\n//Provides: caml_parse_format\n//Requires: caml_jsbytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_jsbytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n      { justify:'+', signstyle:'-', filler:' ', alternate:false,\n        base:0, signedconv:false, width:0, uppercase:false,\n        sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n      break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_string_of_jsbytes\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += f.uppercase?\"0X\":\"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_string_of_jsbytes(buffer);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: fs_node_supported\nfunction fs_node_supported () {\n  return (\n    typeof globalThis.process !== 'undefined'\n      && typeof globalThis.process.versions !== 'undefined'\n      && typeof globalThis.process.versions.node !== 'undefined')\n}\n//Provides: fs_node_supported\n//If: browser\nfunction fs_node_supported () {\n  return false\n}\n\n\n//Provides: MlNodeDevice\n//Requires: MlNodeFd, caml_raise_sys_error, caml_raise_with_args\n//Requires: make_unix_err_args, caml_named_value, caml_string_of_jsstring\nfunction MlNodeDevice(root) {\n  this.fs = require('fs');\n  this.root = root;\n}\nMlNodeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlNodeDevice.prototype.exists = function(name) {\n  try {\n    return this.fs.existsSync(this.nm(name))?1:0;\n  } catch (err) {\n    return 0;\n  }\n}\nMlNodeDevice.prototype.isFile = function(name) {\n  try {\n    return this.fs.statSync(this.nm(name)).isFile()?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.mkdir = function(name, mode, raise_unix) {\n  try {\n    this.fs.mkdirSync(this.nm(name),{mode:mode});\n    return 0\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.rmdir = function(name, raise_unix) {\n  try {\n    this.fs.rmdirSync(this.nm(name));\n    return 0\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.readdir = function(name, raise_unix) {\n  try {\n    return this.fs.readdirSync(this.nm(name));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.is_dir = function(name) {\n  try {\n    return this.fs.statSync(this.nm(name)).isDirectory()?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.unlink = function(name, raise_unix) {\n  try {\n    var b = this.fs.existsSync(this.nm(name))?1:0;\n    this.fs.unlinkSync(this.nm(name));\n    return b;\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.open = function(name, f, raise_unix) {\n  var consts = require('constants');\n  var res = 0;\n  for(var key in f){\n    switch(key){\n    case \"rdonly\"  : res |= consts.O_RDONLY; break;\n    case \"wronly\"  : res |= consts.O_WRONLY; break;\n    case \"append\"  :\n      res |= consts.O_WRONLY | consts.O_APPEND;\n      break;\n    case \"create\"   : res |= consts.O_CREAT;    break;\n    case \"truncate\" : res |= consts.O_TRUNC;    break;\n    case \"excl\"     : res |= consts.O_EXCL;     break;\n    case \"binary\"   : res |= consts.O_BINARY;   break;\n    case \"text\"     : res |= consts.O_TEXT;     break;\n    case \"nonblock\" : res |= consts.O_NONBLOCK; break;\n    }\n  }\n  try {\n    var fd = this.fs.openSync(this.nm(name), res);\n    var isCharacterDevice = this.fs.lstatSync(this.nm(name)).isCharacterDevice();\n    f.isCharacterDevice = isCharacterDevice;\n    return new MlNodeFd(fd, f);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\n\nMlNodeDevice.prototype.rename = function(o, n, raise_unix) {\n  try {\n    this.fs.renameSync(this.nm(o), this.nm(n));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.stat = function(name, raise_unix) {\n  try {\n    var js_stats = this.fs.statSync(this.nm(name));\n    return this.stats_from_js(js_stats);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.lstat = function(name, raise_unix) {\n  try {\n    var js_stats = this.fs.lstatSync(this.nm(name));\n    return this.stats_from_js(js_stats);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.symlink = function(to_dir, target, path, raise_unix) {\n  try {\n    this.fs.symlinkSync(this.nm(target), this.nm(path), to_dir ? 'dir' : 'file');\n    return 0;\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.readlink = function(name, raise_unix) {\n  try {\n    var link = this.fs.readlinkSync(this.nm(name), 'utf8');\n    return caml_string_of_jsstring(link);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.opendir = function(name, raise_unix) {\n  try {\n    return this.fs.opendirSync(this.nm(name));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.raise_nodejs_error = function(err, raise_unix) {\n  var unix_error = caml_named_value(\"Unix.Unix_error\");\n  if (raise_unix && unix_error) {\n    var args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);\n    caml_raise_with_args(unix_error, args);\n  } else {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.stats_from_js = function(js_stats) {\n  /* ===Unix.file_kind===\n   * type file_kind =\n   *     S_REG                       (** Regular file *)\n   *   | S_DIR                       (** Directory *)\n   *   | S_CHR                       (** Character device *)\n   *   | S_BLK                       (** Block device *)\n   *   | S_LNK                       (** Symbolic link *)\n   *   | S_FIFO                      (** Named pipe *)\n   *   | S_SOCK                      (** Socket *)\n   */\n  var file_kind;\n  if (js_stats.isFile()) {\n    file_kind = 0;\n  } else if (js_stats.isDirectory()) {\n    file_kind = 1;\n  } else if (js_stats.isCharacterDevice()) {\n    file_kind = 2;\n  } else if (js_stats.isBlockDevice()) {\n    file_kind = 3;\n  } else if (js_stats.isSymbolicLink()) {\n    file_kind = 4;\n  } else if (js_stats.isFIFO()) {\n    file_kind = 5;\n  } else if (js_stats.isSocket()) {\n    file_kind = 6;\n  }\n  /* ===Unix.stats===\n   * type stats =\n   *  { st_dev : int;               (** Device number *)\n   *    st_ino : int;               (** Inode number *)\n   *    st_kind : file_kind;        (** Kind of the file *)\n   *    st_perm : file_perm;        (** Access rights *)\n   *    st_nlink : int;             (** Number of links *)\n   *    st_uid : int;               (** User id of the owner *)\n   *    st_gid : int;               (** Group ID of the file's group *)\n   *    st_rdev : int;              (** Device ID (if special file) *)\n   *    st_size : int;              (** Size in bytes *)\n   *    st_atime : float;           (** Last access time *)\n   *    st_mtime : float;           (** Last modification time *)\n   *    st_ctime : float;           (** Last status change time *)\n   *  }\n   */\n  return BLOCK(\n    0,\n    js_stats.dev,\n    js_stats.ino,\n    file_kind,\n    js_stats.mode,\n    js_stats.nlink,\n    js_stats.uid,\n    js_stats.gid,\n    js_stats.rdev,\n    js_stats.size,\n    js_stats.atimeMs,\n    js_stats.mtimeMs,\n    js_stats.ctimeMs\n  );\n}\n\nMlNodeDevice.prototype.constructor = MlNodeDevice\n\n//Provides: MlNodeDevice\n//If: browser\nfunction MlNodeDevice() {\n}\n\n//Provides: MlNodeFd\n//Requires: MlFile, caml_uint8_array_of_string, caml_uint8_array_of_bytes, caml_bytes_set, caml_raise_sys_error\nfunction MlNodeFd(fd, flags){\n  this.fs = require('fs');\n  this.fd = fd;\n  this.flags = flags;\n}\nMlNodeFd.prototype = new MlFile ();\nMlNodeFd.prototype.constructor = MlNodeFd;\n\nMlNodeFd.prototype.truncate = function(len){\n  try {\n    this.fs.ftruncateSync(this.fd,len|0);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.length = function () {\n  try {\n    return this.fs.fstatSync(this.fd).size;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.write = function(offset,buf,buf_offset,len){\n  try {\n    if(this.flags.isCharacterDevice)\n      this.fs.writeSync(this.fd, buf, buf_offset, len);\n    else\n      this.fs.writeSync(this.fd, buf, buf_offset, len, offset);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  return 0;\n}\nMlNodeFd.prototype.read = function(offset,a,buf_offset,len){\n  try {\n    if(this.flags.isCharacterDevice)\n      var read = this.fs.readSync(this.fd, a, buf_offset, len);\n    else\n      var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);\n    return read;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.close = function(){\n  try {\n    this.fs.closeSync(this.fd);\n    return 0\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\n\n\n//Provides: MlNodeFd\n//If: browser\nfunction MlNodeFd(){\n}\n\n\n//Provides: caml_sys_open_for_node\n//Requires: MlNodeFd\nfunction caml_sys_open_for_node(fd, flags){\n  if(flags.name) {\n    try {\n      var fs = require(\"fs\");\n      var fd2 = fs.openSync(flags.name, \"rs\");\n      return new MlNodeFd(fd2, flags);\n    } catch(e) {  }\n  }\n  return new MlNodeFd(fd, flags);\n}\n\n//Provides: caml_sys_open_for_node\n//If: browser\nfunction caml_sys_open_for_node(fd, flags){\n  return null;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_trailing_slash\nfunction caml_trailing_slash(name){\n  return (name.slice(-1) !== \"/\") ? (name + \"/\") : name;\n}\n\n//Provides: caml_current_dir\n//Requires: caml_trailing_slash, fs_node_supported\nif(fs_node_supported () && globalThis.process && globalThis.process.cwd)\n  var caml_current_dir = globalThis.process.cwd().replace(/\\\\/g,'/');\nelse\n  var caml_current_dir =  \"/static\";\ncaml_current_dir = caml_trailing_slash(caml_current_dir);\n\n//Provides: caml_get_root\n//Requires: path_is_absolute\nfunction caml_get_root(path){\n  var x = path_is_absolute(path);\n  if (!x) return;\n  return x[0] + \"/\"}\n\n//Provides: caml_root\n//Requires: caml_get_root, caml_current_dir, caml_failwith\nvar caml_root = caml_get_root(caml_current_dir) || caml_failwith(\"unable to compute caml_root\");\n\n\n//Provides: MlFile\nfunction MlFile(){  }\n\n//Provides: path_is_absolute\n//Requires: fs_node_supported\nfunction make_path_is_absolute() {\n  function posix(path) {\n    if (path.charAt(0) === '/') return [\"\", path.substring(1)];\n    return;\n  }\n\n  function win32(path) {\n    // https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n    var splitDeviceRe = /^([a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/]+[^\\\\/]+)?([\\\\/])?([\\s\\S]*?)$/;\n    var result = splitDeviceRe.exec(path);\n    var device = result[1] || '';\n    var isUnc = Boolean(device && device.charAt(1) !== ':');\n\n    // UNC paths are always absolute\n    if (Boolean(result[2] || isUnc)) {\n      var root = (result[1] || '');\n      var sep = (result[2] || '');\n      return [root, path.substring(root.length + sep.length)]\n    }\n    return;\n  }\n  if(fs_node_supported () && globalThis.process && globalThis.process.platform) {\n    return globalThis.process.platform === 'win32' ? win32 : posix;\n  }\n  else return posix\n}\nvar path_is_absolute = make_path_is_absolute();\n\n//Provides: caml_make_path\n//Requires: caml_current_dir\n//Requires: caml_jsstring_of_string, path_is_absolute\nfunction caml_make_path (name) {\n  name=caml_jsstring_of_string(name);\n  if( !path_is_absolute(name) )\n    name = caml_current_dir + name;\n  var comp0 = path_is_absolute(name);\n  var comp = comp0[1].split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.unshift(comp0[0]);\n  ncomp.orig = name;\n  return ncomp;\n}\n\n//Provides:jsoo_mount_point\n//Requires: MlFakeDevice, MlNodeDevice, caml_root, fs_node_supported\nvar jsoo_mount_point = []\nif (fs_node_supported()) {\n  jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});\n} else {\n  jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});\n}\njsoo_mount_point.push({path:\"/static/\", device:new MlFakeDevice(\"/static/\")});\n\n//Provides:caml_list_mount_point\n//Requires: jsoo_mount_point, caml_string_of_jsbytes\nfunction caml_list_mount_point(){\n  var prev = 0\n  for(var i = 0; i < jsoo_mount_point.length; i++){\n    var old = prev;\n    prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old]\n  }\n  return prev;\n}\n\n//Provides: resolve_fs_device\n//Requires: caml_make_path, jsoo_mount_point, caml_raise_sys_error, caml_get_root, MlNodeDevice, caml_trailing_slash, fs_node_supported\nfunction resolve_fs_device(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\");\n  var name_slash = caml_trailing_slash(name);\n  var res;\n  for(var i = 0; i < jsoo_mount_point.length; i++) {\n    var m = jsoo_mount_point[i];\n    if(name_slash.search(m.path) == 0\n       && (!res || res.path.length < m.path.length))\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n  }\n  if( !res && fs_node_supported()) {\n    var root = caml_get_root(name);\n    if (root && root.match(/^[a-zA-Z]:\\/$/)){\n      var m = {path:root,device:new MlNodeDevice(root)};\n      jsoo_mount_point.push(m);\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n    }\n  }\n  if( res ) return res;\n  caml_raise_sys_error(\"no device found for \" + name_slash);\n}\n\n//Provides: caml_mount_autoload\n//Requires: MlFakeDevice, caml_make_path, jsoo_mount_point, caml_trailing_slash\nfunction caml_mount_autoload(name,f){\n  var path = caml_make_path(name);\n  var name = caml_trailing_slash(path.join(\"/\"));\n  jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)})\n  return 0;\n}\n\n//Provides: caml_unmount\n//Requires: jsoo_mount_point, caml_make_path, caml_trailing_slash\nfunction caml_unmount(name){\n  var path = caml_make_path(name);\n  var name = caml_trailing_slash(path.join(\"/\"));\n  var idx = -1;\n  for(var i = 0; i < jsoo_mount_point.length; i++)\n    if(jsoo_mount_point[i].path == name) idx = i;\n  if(idx > -1) jsoo_mount_point.splice(idx,1);\n  return 0\n}\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_string_of_jsbytes\nfunction caml_sys_getcwd() {\n  return caml_string_of_jsbytes(caml_current_dir);\n}\n\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_raise_no_such_file, resolve_fs_device, caml_trailing_slash, caml_jsbytes_of_string\nfunction caml_sys_chdir(dir) {\n  var root = resolve_fs_device(dir);\n  if(root.device.exists(root.rest)) {\n    if(root.rest) caml_current_dir = caml_trailing_slash(root.path + root.rest);\n    else caml_current_dir = root.path;\n    return 0;\n  }\n  else {\n    caml_raise_no_such_file(caml_jsbytes_of_string(dir));\n  }\n}\n\n//Provides: caml_raise_no_such_file\n//Requires: caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_sys_file_exists\n//Requires: resolve_fs_device\nfunction caml_sys_file_exists (name) {\n  var root = resolve_fs_device(name);\n  return root.device.exists(root.rest);\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_string_of_jsbytes\n//Requires: caml_raise_not_a_dir, resolve_fs_device\nfunction caml_sys_read_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.readdir(root.rest);\n  var l = new Array(a.length + 1);\n  l[0] = 0;\n  for(var i=0;i<a.length;i++)\n    l[i+1] = caml_string_of_jsbytes(a[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_raise_no_such_file, resolve_fs_device, caml_jsbytes_of_string\nfunction caml_sys_remove(name){\n  var root = resolve_fs_device(name);\n  var ok = root.device.unlink(root.rest);\n  if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: resolve_fs_device\nfunction caml_sys_is_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.is_dir(root.rest);\n  return a?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_sys_rename(o,n){\n  var o_root = resolve_fs_device(o);\n  var n_root = resolve_fs_device(n);\n  if(o_root.device != n_root.device)\n    caml_failwith(\"caml_sys_rename: cannot move file between two filesystem\");\n  if(!o_root.device.rename)\n    caml_failwith(\"caml_sys_rename: no implemented\");\n  o_root.device.rename(o_root.rest, n_root.rest);\n}\n\n//Provides: caml_sys_mkdir\n//Requires: resolve_fs_device, caml_raise_sys_error\nfunction caml_sys_mkdir(name, perm){\n  var root = resolve_fs_device(name);\n  root.device.mkdir(root.rest,perm);\n  return 0;\n}\n\n//Provides: caml_sys_rmdir\n//Requires: resolve_fs_device, caml_raise_sys_error, caml_raise_not_a_dir\nfunction caml_sys_rmdir(name){\n  var root = resolve_fs_device(name);\n  root.device.rmdir(root.rest);\n  return 0;\n}\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n  // var data = caml_sys_fds[vfd];\n  caml_failwith(\"caml_ba_map_file not implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n//Provides: jsoo_create_file_extern\nfunction jsoo_create_file_extern(name,content){\n  if(globalThis.jsoo_create_file)\n    globalThis.jsoo_create_file(name,content);\n  else {\n    if(!globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];\n    globalThis.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: jsoo_create_file\nfunction caml_fs_init (){\n  var tmp=globalThis.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      jsoo_create_file(tmp[i].name,tmp[i].content);\n    }\n  }\n  globalThis.jsoo_create_file = jsoo_create_file;\n  globalThis.caml_fs_tmp = [];\n  return 0;\n}\n\n//Provides: caml_create_file\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_create_file(name,content) {\n  var root = resolve_fs_device(name);\n  if(! root.device.register) caml_failwith(\"cannot register file\");\n  root.device.register(root.rest,content);\n  return 0;\n}\n\n\n//Provides: jsoo_create_file\n//Requires: caml_create_file, caml_string_of_jsbytes\nfunction jsoo_create_file(name,content) {\n  var name = caml_string_of_jsbytes(name);\n  var content = caml_string_of_jsbytes(content);\n  return caml_create_file(name, content);\n}\n\n\n//Provides: caml_read_file_content\n//Requires: resolve_fs_device, caml_raise_no_such_file, caml_string_of_array\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction caml_read_file_content (name) {\n  var name = (typeof name == \"string\")?caml_string_of_jsbytes(name):name;\n  var root = resolve_fs_device(name);\n  if(root.device.exists(root.rest)) {\n    var file = root.device.open(root.rest,{rdonly:1});\n    var len  = file.length();\n    var buf = new Uint8Array(len);\n    file.read(0,buf,0,len);\n    return caml_string_of_array(buf)\n  }\n  caml_raise_no_such_file(caml_jsbytes_of_string(name));\n}\n","//Provides: caml_unix_gettimeofday\n//Alias: unix_gettimeofday\nfunction caml_unix_gettimeofday () {\n  return (new Date()).getTime() / 1000;\n}\n\n//Provides: caml_unix_time\n//Requires: caml_unix_gettimeofday\n//Alias: unix_time\nfunction caml_unix_time () {\n  return Math.floor(caml_unix_gettimeofday ());\n}\n\n//Provides: caml_unix_gmtime\n//Alias: unix_gmtime\nfunction caml_unix_gmtime (t) {\n  var d = new Date (t * 1000);\n  var d_num = d.getTime();\n  var januaryfirst = (new Date(Date.UTC(d.getUTCFullYear(), 0, 1))).getTime();\n  var doy = Math.floor((d_num - januaryfirst) / 86400000);\n  return BLOCK(0, d.getUTCSeconds(), d.getUTCMinutes(), d.getUTCHours(),\n               d.getUTCDate(), d.getUTCMonth(), d.getUTCFullYear() - 1900,\n               d.getUTCDay(), doy,\n               false | 0 /* for UTC daylight savings time is false */)\n}\n\n//Provides: caml_unix_localtime\n//Alias: unix_localtime\nfunction caml_unix_localtime (t) {\n  var d = new Date (t * 1000);\n  var d_num = d.getTime();\n  var januaryfirst = (new Date(d.getFullYear(), 0, 1)).getTime();\n  var doy = Math.floor((d_num - januaryfirst) / 86400000);\n  var jan = new Date(d.getFullYear(), 0, 1);\n  var jul = new Date(d.getFullYear(), 6, 1);\n  var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n  return BLOCK(0, d.getSeconds(), d.getMinutes(), d.getHours(),\n               d.getDate(), d.getMonth(), d.getFullYear() - 1900,\n               d.getDay(), doy,\n               (d.getTimezoneOffset() < stdTimezoneOffset) | 0 /* daylight savings time  field. */)\n}\n\n//Provides: caml_unix_mktime\n//Requires: caml_unix_localtime\n//Alias: unix_mktime\nfunction caml_unix_mktime(tm){\n  var d = (new Date(tm[6]+1900,tm[5],tm[4],tm[3],tm[2],tm[1])).getTime();\n  var t = Math.floor(d / 1000);\n  var tm2 = caml_unix_localtime(t);\n  return BLOCK(0,t,tm2);\n}\n//Provides: caml_unix_startup const\n//Alias: win_startup\nfunction caml_unix_startup() {}\n\n//Provides: caml_unix_cleanup const\n//Alias: win_cleanup\nfunction caml_unix_cleanup() {}\n\n//Provides: caml_unix_filedescr_of_fd const\n//Alias: win_handle_fd\nfunction caml_unix_filedescr_of_fd(x) {return x;}\n\n//Provides: caml_unix_isatty\n//Requires: fs_node_supported\n//Alias: unix_isatty\nfunction caml_unix_isatty(fileDescriptor) {\n  if(fs_node_supported()) {\n    var tty = require('tty');\n    return tty.isatty(fileDescriptor)?1:0;\n  } else {\n    return 0;\n  }\n}\n\n\n//Provides: caml_unix_isatty\n//Alias: unix_isatty\n//If: browser\nfunction caml_unix_isatty(fileDescriptor) {\n  return 0;\n}\n\n//Provides: make_unix_err_args\n//Requires: caml_string_of_jsstring\nvar unix_error = [\n  /* ===Unix.error===\n   *\n   * This array is in order of the variant in OCaml\n   */\n  \"E2BIG\", \"EACCES\", \"EAGAIN\", \"EBADF\", \"EBUSY\", \"ECHILD\", \"EDEADLK\", \"EDOM\",\n  \"EEXIST\", \"EFAULT\", \"EFBIG\", \"EINTR\", \"EINVAL\", \"EIO\", \"EISDIR\", \"EMFILE\",\n  \"EMLINK\", \"ENAMETOOLONG\", \"ENFILE\", \"ENODEV\", \"ENOENT\", \"ENOEXEC\", \"ENOLCK\",\n  \"ENOMEM\", \"ENOSPC\", \"ENOSYS\", \"ENOTDIR\", \"ENOTEMPTY\", \"ENOTTY\", \"ENXIO\",\n  \"EPERM\", \"EPIPE\", \"ERANGE\", \"EROFS\", \"ESPIPE\", \"ESRCH\", \"EXDEV\", \"EWOULDBLOCK\",\n  \"EINPROGRESS\", \"EALREADY\", \"ENOTSOCK\", \"EDESTADDRREQ\", \"EMSGSIZE\",\n  \"EPROTOTYPE\", \"ENOPROTOOPT\", \"EPROTONOSUPPORT\", \"ESOCKTNOSUPPORT\",\n  \"EOPNOTSUPP\", \"EPFNOSUPPORT\", \"EAFNOSUPPORT\", \"EADDRINUSE\", \"EADDRNOTAVAIL\",\n  \"ENETDOWN\", \"ENETUNREACH\", \"ENETRESET\", \"ECONNABORTED\", \"ECONNRESET\", \"ENOBUFS\",\n  \"EISCONN\", \"ENOTCONN\", \"ESHUTDOWN\", \"ETOOMANYREFS\", \"ETIMEDOUT\", \"ECONNREFUSED\",\n  \"EHOSTDOWN\", \"EHOSTUNREACH\", \"ELOOP\", \"EOVERFLOW\"\n];\nfunction make_unix_err_args(code, syscall, path, errno) {\n  var variant = unix_error.indexOf(code);\n  if (variant < 0) {\n    // Default if undefined\n    if (errno == null) {\n      errno = -9999\n    }\n    // If none of the above variants, fallback to EUNKNOWNERR(int)\n    variant = BLOCK(0, errno);\n  }\n  var args = [\n    variant,\n    caml_string_of_jsstring(syscall || \"\"),\n    caml_string_of_jsstring(path || \"\")\n  ];\n  return args;\n}\n\n//Provides: caml_unix_stat\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_stat\nfunction caml_unix_stat(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.stat) {\n    caml_failwith(\"caml_unix_stat: not implemented\");\n  }\n  return root.device.stat(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_stat_64\n//Requires: caml_unix_stat, caml_int64_of_int32\n//Alias: unix_stat_64\nfunction caml_unix_stat_64(name) {\n  var r = caml_unix_stat(name);\n  r[9] = caml_int64_of_int32(r[9]);\n}\n\n//Provides: caml_unix_lstat\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_lstat\nfunction caml_unix_lstat(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.lstat) {\n    caml_failwith(\"caml_unix_lstat: not implemented\");\n  }\n  return root.device.lstat(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_lstat_64\n//Requires: caml_unix_lstat, caml_int64_of_int32\n//Alias: unix_lstat_64\nfunction caml_unix_lstat_64(name) {\n  var r = caml_unix_lstat(name);\n  r[9] = caml_int64_of_int32(r[9]);\n}\n\n//Provides: caml_unix_mkdir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_mkdir\nfunction caml_unix_mkdir(name, perm) {\n  var root = resolve_fs_device(name);\n  if (!root.device.mkdir) {\n    caml_failwith(\"caml_unix_mkdir: not implemented\");\n  }\n  return root.device.mkdir(root.rest, perm, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_rmdir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_rmdir\nfunction caml_unix_rmdir(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.rmdir) {\n    caml_failwith(\"caml_unix_rmdir: not implemented\");\n  }\n  return root.device.rmdir(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_symlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_symlink\nfunction caml_unix_symlink(to_dir, src, dst) {\n  var src_root = resolve_fs_device(src);\n  var dst_root = resolve_fs_device(dst);\n  if(src_root.device != dst_root.device)\n    caml_failwith(\"caml_unix_symlink: cannot symlink between two filesystems\");\n  if (!src_root.device.symlink) {\n    caml_failwith(\"caml_unix_symlink: not implemented\");\n  }\n  return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_readlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_readlink\nfunction caml_unix_readlink(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.readlink) {\n    caml_failwith(\"caml_unix_readlink: not implemented\");\n  }\n  return root.device.readlink(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_unlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_unlink\nfunction caml_unix_unlink(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.unlink) {\n    caml_failwith(\"caml_unix_unlink: not implemented\");\n  }\n  return root.device.unlink(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_getuid\n//Requires: caml_raise_not_found\n//Alias: unix_getuid\nfunction caml_unix_getuid(unit) {\n  if(globalThis.process && globalThis.process.getuid){\n    return globalThis.process.getuid();\n  }\n  caml_raise_not_found();\n}\n\n//Provides: caml_unix_getpwuid\n//Requires: caml_raise_not_found\n//Alias: unix_getpwuid\nfunction caml_unix_getpwuid(unit) {\n  caml_raise_not_found();\n}\n\n//Provides: caml_unix_has_symlink\n//Requires: fs_node_supported\n//Alias: unix_has_symlink\nfunction caml_unix_has_symlink(unit) {\n  return fs_node_supported()?1:0\n}\n\n//Provides: caml_unix_opendir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_opendir\nfunction caml_unix_opendir(path) {\n  var root = resolve_fs_device(path);\n  if (!root.device.opendir) {\n    caml_failwith(\"caml_unix_opendir: not implemented\");\n  }\n  var dir_handle = root.device.opendir(root.rest, /* raise Unix_error */ true);\n  return { pointer : dir_handle, path: path }\n}\n\n//Provides: caml_unix_readdir\n//Requires: caml_raise_end_of_file\n//Requires: caml_string_of_jsstring\n//Requires: make_unix_err_args, caml_raise_with_args, caml_named_value\n//Alias: unix_readdir\nfunction caml_unix_readdir(dir_handle) {\n  var entry;\n  try {\n      entry = dir_handle.pointer.readSync();\n  } catch (e) {\n      var unix_error = caml_named_value('Unix.Unix_error');\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"readdir\", dir_handle.path));\n  }\n  if (entry === null) {\n      caml_raise_end_of_file();\n  } else {\n      return caml_string_of_jsstring(entry.name);\n  }\n}\n\n//Provides: caml_unix_closedir\n//Requires: make_unix_err_args, caml_raise_with_args, caml_named_value\n//Alias: unix_closedir\nfunction caml_unix_closedir(dir_handle) {\n  try {\n      dir_handle.pointer.closeSync();\n  } catch (e) {\n      var unix_error = caml_named_value('Unix.Unix_error');\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", dir_handle.path));\n  }\n}\n\n//Provides: caml_unix_rewinddir\n//Requires: caml_unix_closedir, caml_unix_opendir\n//Alias: unix_rewinddir\nfunction caml_unix_rewinddir(dir_handle) {\n  caml_unix_closedir(dir_handle);\n  var new_dir_handle = caml_unix_opendir(dir_handle.path);\n  dir_handle.pointer = new_dir_handle.pointer;\n  return 0;\n}\n\n//Provides: caml_unix_findfirst\n//Requires: caml_jsstring_of_string, caml_string_of_jsstring\n//Requires: caml_unix_opendir, caml_unix_readdir\n//Alias: win_findfirst\nfunction caml_unix_findfirst(path) {\n  // The Windows code adds this glob to the path, so we need to remove it\n  var path_js = caml_jsstring_of_string(path);\n  path_js = path_js.replace(/(^|[\\\\\\/])\\*\\.\\*$/, \"\");\n  path = caml_string_of_jsstring(path_js);\n  // *.* is now stripped\n  var dir_handle = caml_unix_opendir(path);\n  var first_entry = caml_unix_readdir(dir_handle);\n  // The Windows bindings type dir_handle as an `int` but it's not in JS\n  return [0, first_entry, dir_handle];\n}\n\n//Provides: caml_unix_findnext\n//Requires: caml_unix_readdir\n//Alias: win_findnext\nfunction caml_unix_findnext(dir_handle) {\n  return caml_unix_readdir(dir_handle);\n}\n\n//Provides: caml_unix_findclose\n//Requires: caml_unix_closedir\n//Alias: win_findclose\nfunction caml_unix_findclose(dir_handle) {\n  return caml_unix_closedir(dir_handle);\n}\n\n\n//Provides: caml_unix_inet_addr_of_string const\n//Alias: unix_inet_addr_of_string\nfunction caml_unix_inet_addr_of_string () {return 0;}\n\n\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlFakeDevice\n//Requires: MlFakeFile, MlFakeFd, caml_create_bytes\n//Requires: caml_raise_sys_error, caml_raise_no_such_file\n//Requires: caml_string_of_jsbytes, caml_string_of_jsstring\n//Requires: caml_bytes_of_array, caml_bytes_of_string, caml_bytes_of_jsbytes\n//Requires: caml_is_ml_bytes, caml_is_ml_string\n//Requires: caml_named_value, caml_raise_with_args, caml_named_values\n//Requires: make_unix_err_args\nfunction MlFakeDevice (root, f) {\n  this.content={};\n  this.root = root;\n  this.lookupFun = f;\n}\nMlFakeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlFakeDevice.prototype.create_dir_if_needed = function(name) {\n  var comp = name.split(\"/\");\n  var res = \"\";\n  for(var i = 0; i < comp.length - 1; i++){\n    res += comp[i] + \"/\";\n    if(this.content[res]) continue;\n    this.content[res] = Symbol(\"directory\");\n  }\n}\nMlFakeDevice.prototype.slash = function(name){\n  return /\\/$/.test(name)?name:(name + \"/\");\n}\nMlFakeDevice.prototype.lookup = function(name) {\n  if(!this.content[name] && this.lookupFun) {\n    var res = this.lookupFun(caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));\n    if(res !== 0) {\n      this.create_dir_if_needed(name);\n      this.content[name]=new MlFakeFile(caml_bytes_of_string(res[1]));\n    }\n  }\n}\nMlFakeDevice.prototype.exists = function(name) {\n  // The root of the device exists\n  if(name == \"\") return 1;\n  // Check if a directory exists\n  var name_slash = this.slash(name);\n  if(this.content[name_slash]) return 1;\n  // Check if a file exists\n  this.lookup(name);\n  return this.content[name]?1:0;\n}\nMlFakeDevice.prototype.isFile = function(name) {\n  if(this.exists(name) && !this.is_dir(name)) {\n    return 1\n  }\n  else {\n    return 0\n  }\n}\nMlFakeDevice.prototype.mkdir = function(name,mode, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n  if(this.exists(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EEXIST\", \"mkdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": File exists\");\n    }\n  }\n  var parent = /^(.*)\\/[^/]+/.exec(name);\n  parent = (parent && parent[1]) || '';\n  if(!this.exists(parent)){\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOENT\", \"mkdir\", this.nm(parent)));\n    }\n    else {\n      caml_raise_sys_error(parent + \": No such file or directory\");\n    }\n  }\n  if(!this.is_dir(parent)){\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTDIR\", \"mkdir\", this.nm(parent)));\n    }\n    else {\n      caml_raise_sys_error(parent + \": Not a directory\");\n    }\n  }\n  this.create_dir_if_needed(this.slash(name));\n}\nMlFakeDevice.prototype.rmdir = function(name, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n  var name_slash = (name == \"\")?\"\":(this.slash(name));\n  var r = new RegExp(\"^\" + name_slash + \"([^/]+)\");\n  if(!this.exists(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOENT\", \"rmdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": No such file or directory\");\n    }\n  }\n  if(!this.is_dir(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTDIR\", \"rmdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": Not a directory\");\n    }\n  }\n  for(var n in this.content) {\n    if(n.match(r)) {\n      if (unix_error) {\n        caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTEMPTY\", \"rmdir\", this.nm(name)));\n      } else {\n        caml_raise_sys_error(this.nm(name) + \": Directory not empty\");\n      }\n    }\n  }\n  delete this.content[name_slash];\n}\nMlFakeDevice.prototype.readdir = function(name) {\n  var name_slash = (name == \"\")?\"\":(this.slash(name));\n  if(!this.exists(name)) {\n    caml_raise_sys_error(name + \": No such file or directory\");\n  }\n  if(!this.is_dir(name)) {\n    caml_raise_sys_error(name + \": Not a directory\");\n  }\n  var r = new RegExp(\"^\" + name_slash + \"([^/]+)\");\n  var seen = {}\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m && !seen[m[1]]) {seen[m[1]] = true; a.push(m[1])}\n  }\n  return a;\n}\nMlFakeDevice.prototype.opendir = function(name, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n\n  var a = this.readdir(name);\n  var c = false;\n  var i = 0;\n  return { readSync : (function () {\n    if (c) {\n      if (unix_error) {\n        caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", this.nm(name)));\n      }\n      else {\n        caml_raise_sys_error(name + \": closedir failed\");\n      }\n    }\n    if(i == a.length) return null;\n    var entry = a[i];\n    i++;\n    return { name: entry }\n  })\n    , closeSync: (function () {\n      if (c) {\n        if (unix_error) {\n          caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", this.nm(name)));\n        }\n        else {\n          caml_raise_sys_error(name + \": closedir failed\");\n        }\n      }\n      c = true;\n      a = [];\n    })\n  }\n}\nMlFakeDevice.prototype.is_dir = function(name) {\n  if(name == \"\")  return true;\n  var name_slash = this.slash(name);\n  return this.content[name_slash]?1:0;\n}\nMlFakeDevice.prototype.unlink = function(name) {\n  var ok = this.content[name]?true:false;\n  delete this.content[name];\n  return ok;\n}\nMlFakeDevice.prototype.open = function(name, f) {\n  var file;\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    file = this.content[name];\n    if(f.truncate) file.truncate();\n  } else if (f.create) {\n    this.create_dir_if_needed(name);\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    file = this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n  return new MlFakeFd(this.nm(name), file, f);\n}\n\nMlFakeDevice.prototype.open = function(name, f) {\n  var file;\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    file = this.content[name];\n    if(f.truncate) file.truncate();\n  } else if (f.create) {\n    this.create_dir_if_needed(name);\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    file = this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n  return new MlFakeFd(this.nm(name), file, f);\n}\n\nMlFakeDevice.prototype.register= function (name,content){\n  var file;\n  if(this.content[name]) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n  if(caml_is_ml_bytes(content))\n    file = new MlFakeFile(content);\n  if(caml_is_ml_string(content))\n    file = new MlFakeFile(caml_bytes_of_string(content));\n  else if(content instanceof Array)\n    file = new MlFakeFile(caml_bytes_of_array(content));\n  else if(typeof content === \"string\")\n    file = new MlFakeFile(caml_bytes_of_jsbytes(content));\n  else if(content.toString) {\n    var bytes = caml_bytes_of_string(caml_string_of_jsstring(content.toString()));\n    file = new MlFakeFile(bytes);\n  }\n  if(file){\n    this.create_dir_if_needed(name);\n    this.content[name] = file;\n  }\n  else caml_raise_sys_error(this.nm(name) + \" : registering file with invalid content type\");\n}\n\nMlFakeDevice.prototype.constructor = MlFakeDevice\n\n//Provides: MlFakeFile\n//Requires: MlFile\n//Requires: caml_create_bytes, caml_ml_bytes_length, caml_blit_bytes\n//Requires: caml_uint8_array_of_bytes, caml_bytes_of_array\nfunction MlFakeFile(content){\n  this.data = content;\n}\nMlFakeFile.prototype = new MlFile ();\nMlFakeFile.prototype.constructor = MlFakeFile\nMlFakeFile.prototype.truncate = function(len){\n  var old = this.data;\n  this.data = caml_create_bytes(len|0);\n  caml_blit_bytes(old, 0, this.data, 0, len);\n}\nMlFakeFile.prototype.length = function () {\n  return caml_ml_bytes_length(this.data);\n}\nMlFakeFile.prototype.write = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    var new_str = caml_create_bytes(offset + len);\n    var old_data = this.data;\n    this.data = new_str;\n    caml_blit_bytes(old_data, 0, this.data, 0, clen);\n  }\n  caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);\n  return 0\n}\nMlFakeFile.prototype.read = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    len = clen - offset;\n  }\n  if(len) {\n    var data = caml_create_bytes(len|0);\n    caml_blit_bytes(this.data, offset, data, 0, len);\n    buf.set(caml_uint8_array_of_bytes(data), pos);\n  }\n  return len\n}\n\n\n//Provides: MlFakeFd_out\n//Requires: MlFakeFile, caml_create_bytes, caml_blit_bytes, caml_bytes_of_array\n//Requires: caml_raise_sys_error\nfunction MlFakeFd_out(fd,flags) {\n  MlFakeFile.call(this, caml_create_bytes(0));\n  this.log = (function (s) { return 0 });\n  if(fd == 1 && typeof console.log == \"function\")\n    this.log = console.log;\n  else if(fd == 2 && typeof console.error == \"function\")\n    this.log = console.error;\n  else if(typeof console.log == \"function\")\n    this.log = console.log\n  this.flags = flags;\n}\nMlFakeFd_out.prototype.length = function() { return 0 }\nMlFakeFd_out.prototype.write = function (offset,buf,pos,len) {\n  if(this.log) {\n    if(len > 0\n       && pos >= 0\n       && pos+len <= buf.length\n       && buf[pos+len-1] == 10)\n      len --;\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    var src = caml_create_bytes(len);\n    caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);\n    this.log(src.toUtf16());\n    return 0;\n  }\n  caml_raise_sys_error(this.fd  + \": file descriptor already closed\");\n}\nMlFakeFd_out.prototype.read = function (offset, buf, pos, len) {\n  caml_raise_sys_error(this.fd  + \": file descriptor is write only\");\n}\nMlFakeFd_out.prototype.close = function () {\n  this.log = undefined;\n}\n\n\n//Provides: MlFakeFd\n//Requires: MlFakeFile\n//Requires: caml_raise_sys_error\nfunction MlFakeFd(name, file,flags) {\n  this.file = file;\n  this.name = name;\n  this.flags = flags;\n}\n\nMlFakeFd.prototype.err_closed = function () {\n  caml_raise_sys_error(this.name  + \": file descriptor already closed\");\n}\nMlFakeFd.prototype.length = function() {\n  if(this.file) return this.file.length ()\n  this.err_closed();\n}\nMlFakeFd.prototype.write = function (offset,buf,pos,len) {\n  if(this.file) return this.file.write(offset,buf,pos,len)\n  this.err_closed();\n}\nMlFakeFd.prototype.read = function (offset, buf, pos, len) {\n  if(this.file) return this.file.read(offset, buf, pos, len)\n  this.err_closed();\n}\nMlFakeFd.prototype.close = function () {\n  this.file = undefined;\n}\n","\n//Provides: caml_lxm_next\n//Requires: caml_int64_shift_left\n//Requires: caml_int64_shift_right_unsigned\n//Requires: caml_int64_or\n//Requires: caml_int64_xor\n//Requires: caml_int64_add\n//Requires: caml_int64_mul\n//Requires: caml_ba_get_1\n//Requires: caml_ba_set_1\n//Requires: caml_int64_of_string\n//Requires: caml_new_string\nfunction caml_lxm_next(v) {\n  function shift_l(x, k){\n    return caml_int64_shift_left(x,k);\n  }\n  function shift_r(x, k){\n    return caml_int64_shift_right_unsigned(x,k);\n  }\n  function or(a, b){\n    return caml_int64_or(a,b);\n  }\n  function xor(a, b){\n    return caml_int64_xor(a,b);\n  }\n  function add(a, b){\n    return caml_int64_add(a,b);\n  }\n  function mul(a, b){\n    return caml_int64_mul(a,b);\n  }\n  function rotl(x, k) {\n    return or(shift_l(x,k),shift_r (x, 64 - k));\n  }\n  function get(a, i) {\n    return caml_ba_get_1(a, i);\n  }\n  function set(a, i, x) {\n    return caml_ba_set_1(a, i, x);\n  }\n  var M = caml_int64_of_string(caml_new_string(\"0xd1342543de82ef95\"));\n  var daba = caml_int64_of_string(caml_new_string(\"0xdaba0b6eb09322e3\"));\n  var z, q0, q1;\n  var st = v;\n  var a = get(st,0);\n  var s = get(st,1);\n  var x0 = get(st,2);\n  var x1 = get(st,3);\n  /* Combining operation */\n  z = add(s, x0);\n  /* Mixing function */\n  z = mul(xor(z,shift_r(z,32)), daba);\n  z = mul(xor(z,shift_r(z,32)), daba);\n  z = xor(z,shift_r(z,32));\n  /* LCG update */\n  set(st, 1, add (mul(s,M), a));\n  /* XBG update */\n  var q0 = x0\n  var q1 = x1\n  q1 = xor(q1,q0);\n  q0 = rotl(q0, 24);\n  q0 = xor(xor(q0, q1), (shift_l(q1,16)));\n  q1 = rotl(q1, 37);\n  set(st, 2, q0);\n  set(st, 3, q1);\n  /* Return result */\n  return z;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_md5_chan\n//Requires: caml_string_of_array\n//Requires: caml_raise_end_of_file, caml_ml_input_block\n//Requires: caml_MD5Init, caml_MD5Update, caml_MD5Final\nfunction caml_md5_chan(chanid,toread){\n  var ctx = caml_MD5Init();\n  var buffer = new Uint8Array(4096);\n  if(toread < 0){\n    while(true){\n      var read = caml_ml_input_block(chanid,buffer,0,buffer.length);\n      if(read == 0) break;\n      caml_MD5Update(ctx,buffer.subarray(0, read), read);\n    }\n  } else {\n    while(toread > 0) {\n      var read = caml_ml_input_block(chanid,buffer,0, (toread > buffer.length ? buffer.length : toread));\n      if(read == 0) caml_raise_end_of_file();\n      caml_MD5Update(ctx,buffer.subarray(0, read), read);\n      toread -= read\n    }\n  }\n  return caml_string_of_array(caml_MD5Final(ctx));\n}\n\n//Provides: caml_md5_string\n//Requires: caml_bytes_of_string, caml_md5_bytes\nfunction caml_md5_string(s, ofs, len) {\n  return caml_md5_bytes(caml_bytes_of_string(s),ofs,len);\n}\n\n//Provides: caml_MD5Transform\nvar caml_MD5Transform = (function () {\n  function add (x, y) { return (x + y) | 0; }\n  function xx(q,a,b,x,s,t) {\n    a = add(add(a, q), add(x, t));\n    return add((a << s) | (a >>> (32 - s)), b);\n  }\n  function ff(a,b,c,d,x,s,t) {\n    return xx((b & c) | ((~b) & d), a, b, x, s, t);\n  }\n  function gg(a,b,c,d,x,s,t) {\n    return xx((b & d) | (c & (~d)), a, b, x, s, t);\n  }\n  function hh(a,b,c,d,x,s,t) { return xx(b ^ c ^ d, a, b, x, s, t); }\n  function ii(a,b,c,d,x,s,t) { return xx(c ^ (b | (~d)), a, b, x, s, t); }\n\n  return function (w, buffer) {\n    var a = w[0], b = w[1], c = w[2], d = w[3];\n\n    a = ff(a, b, c, d, buffer[ 0], 7, 0xD76AA478);\n    d = ff(d, a, b, c, buffer[ 1], 12, 0xE8C7B756);\n    c = ff(c, d, a, b, buffer[ 2], 17, 0x242070DB);\n    b = ff(b, c, d, a, buffer[ 3], 22, 0xC1BDCEEE);\n    a = ff(a, b, c, d, buffer[ 4], 7, 0xF57C0FAF);\n    d = ff(d, a, b, c, buffer[ 5], 12, 0x4787C62A);\n    c = ff(c, d, a, b, buffer[ 6], 17, 0xA8304613);\n    b = ff(b, c, d, a, buffer[ 7], 22, 0xFD469501);\n    a = ff(a, b, c, d, buffer[ 8], 7, 0x698098D8);\n    d = ff(d, a, b, c, buffer[ 9], 12, 0x8B44F7AF);\n    c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);\n    b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);\n    a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);\n    d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);\n    c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);\n    b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);\n\n    a = gg(a, b, c, d, buffer[ 1], 5, 0xF61E2562);\n    d = gg(d, a, b, c, buffer[ 6], 9, 0xC040B340);\n    c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);\n    b = gg(b, c, d, a, buffer[ 0], 20, 0xE9B6C7AA);\n    a = gg(a, b, c, d, buffer[ 5], 5, 0xD62F105D);\n    d = gg(d, a, b, c, buffer[10], 9, 0x02441453);\n    c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);\n    b = gg(b, c, d, a, buffer[ 4], 20, 0xE7D3FBC8);\n    a = gg(a, b, c, d, buffer[ 9], 5, 0x21E1CDE6);\n    d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);\n    c = gg(c, d, a, b, buffer[ 3], 14, 0xF4D50D87);\n    b = gg(b, c, d, a, buffer[ 8], 20, 0x455A14ED);\n    a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);\n    d = gg(d, a, b, c, buffer[ 2], 9, 0xFCEFA3F8);\n    c = gg(c, d, a, b, buffer[ 7], 14, 0x676F02D9);\n    b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);\n\n    a = hh(a, b, c, d, buffer[ 5], 4, 0xFFFA3942);\n    d = hh(d, a, b, c, buffer[ 8], 11, 0x8771F681);\n    c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);\n    b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);\n    a = hh(a, b, c, d, buffer[ 1], 4, 0xA4BEEA44);\n    d = hh(d, a, b, c, buffer[ 4], 11, 0x4BDECFA9);\n    c = hh(c, d, a, b, buffer[ 7], 16, 0xF6BB4B60);\n    b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);\n    a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);\n    d = hh(d, a, b, c, buffer[ 0], 11, 0xEAA127FA);\n    c = hh(c, d, a, b, buffer[ 3], 16, 0xD4EF3085);\n    b = hh(b, c, d, a, buffer[ 6], 23, 0x04881D05);\n    a = hh(a, b, c, d, buffer[ 9], 4, 0xD9D4D039);\n    d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);\n    c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);\n    b = hh(b, c, d, a, buffer[ 2], 23, 0xC4AC5665);\n\n    a = ii(a, b, c, d, buffer[ 0], 6, 0xF4292244);\n    d = ii(d, a, b, c, buffer[ 7], 10, 0x432AFF97);\n    c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);\n    b = ii(b, c, d, a, buffer[ 5], 21, 0xFC93A039);\n    a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);\n    d = ii(d, a, b, c, buffer[ 3], 10, 0x8F0CCC92);\n    c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);\n    b = ii(b, c, d, a, buffer[ 1], 21, 0x85845DD1);\n    a = ii(a, b, c, d, buffer[ 8], 6, 0x6FA87E4F);\n    d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);\n    c = ii(c, d, a, b, buffer[ 6], 15, 0xA3014314);\n    b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);\n    a = ii(a, b, c, d, buffer[ 4], 6, 0xF7537E82);\n    d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);\n    c = ii(c, d, a, b, buffer[ 2], 15, 0x2AD7D2BB);\n    b = ii(b, c, d, a, buffer[ 9], 21, 0xEB86D391);\n\n    w[0] = add(a, w[0]);\n    w[1] = add(b, w[1]);\n    w[2] = add(c, w[2]);\n    w[3] = add(d, w[3]);\n  }})()\n\n//Provides: caml_MD5Init\nfunction caml_MD5Init() {\n  var buffer = new ArrayBuffer(64);\n  var b32 = new Uint32Array(buffer);\n  var b8 = new Uint8Array(buffer);\n  return {len:0,\n          w:new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),\n          b32:b32,\n          b8:b8}\n}\n\n//Provides: caml_MD5Update\n//Requires: caml_MD5Transform\nfunction caml_MD5Update(ctx, input, input_len){\n  var in_buf = ctx.len & 0x3f;\n  var input_pos = 0;\n  ctx.len += input_len;\n  if(in_buf){\n    var missing = 64 - in_buf;\n    if(input_len < missing) {\n      ctx.b8.set(input.subarray(0,input_len),in_buf);\n      return\n    }\n    ctx.b8.set(input.subarray(0,missing),in_buf);\n    caml_MD5Transform(ctx.w, ctx.b32);\n    input_len -= missing;\n    input_pos += missing;\n  }\n  while(input_len >= 64){\n    ctx.b8.set(input.subarray(input_pos,input_pos + 64), 0);\n    caml_MD5Transform(ctx.w, ctx.b32);\n    input_len -= 64;\n    input_pos += 64;\n  }\n  if(input_len)\n    ctx.b8.set(input.subarray(input_pos,input_pos + input_len), 0);\n}\n\n//Provides: caml_MD5Final\n//Requires: caml_MD5Transform\nfunction caml_MD5Final(ctx){\n  var in_buf = ctx.len & 0x3f;\n  ctx.b8[in_buf] = 0x80;\n  in_buf ++;\n  if(in_buf > 56) {\n    for(var j = in_buf; j < 64; j++){\n      ctx.b8[j] = 0;\n    }\n    caml_MD5Transform(ctx.w, ctx.b32);\n    for(var j = 0; j < 56; j++){\n      ctx.b8[j] = 0;\n    }\n  } else {\n    for(var j = in_buf; j < 56; j++){\n      ctx.b8[j] = 0;\n    }\n  }\n  ctx.b32[14] = ctx.len << 3;\n  ctx.b32[15] = (ctx.len >> 29) & 0x1FFFFFFF;\n  caml_MD5Transform(ctx.w, ctx.b32);\n  var t = new Uint8Array(16);\n  for (var i = 0; i < 4; i++)\n    for (var j = 0; j < 4; j++)\n      t[i * 4 + j] = (ctx.w[i] >> (8 * j)) & 0xFF;\n  return t;\n}\n\n\n//Provides: caml_md5_bytes\n//Requires: caml_uint8_array_of_bytes, caml_string_of_array\n//Requires: caml_MD5Init, caml_MD5Update, caml_MD5Final\nfunction caml_md5_bytes(s, ofs, len) {\n  var ctx = caml_MD5Init();\n  var a = caml_uint8_array_of_bytes(s);\n  caml_MD5Update(ctx,a.subarray(ofs, ofs + len), len);\n  return caml_string_of_array(caml_MD5Final(ctx));\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_fds\nvar caml_sys_fds = new Array(3);\n\n//Provides: caml_sys_close\n//Requires: caml_sys_fds\nfunction caml_sys_close(fd) {\n  var file = caml_sys_fds[fd];\n  if(file) file.close();\n  delete caml_sys_fds[fd];\n  return 0;\n}\n\n\n//Provides: caml_sys_open\n//Requires: caml_raise_sys_error\n//Requires: MlFakeFd_out\n//Requires: resolve_fs_device\n//Requires: caml_jsbytes_of_string\n//Requires: fs_node_supported\n//Requires: caml_sys_fds\n//Requires: caml_sys_open_for_node\nfunction caml_sys_open_internal(file,idx) {\n  if(idx == undefined){\n    idx = caml_sys_fds.length;\n  }\n  caml_sys_fds[idx] = file;\n  return idx | 0;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_text and Open_binary are not compatible\");\n  var root = resolve_fs_device(name);\n  var file = root.device.open(root.rest,f);\n  return caml_sys_open_internal (file, undefined);\n}\n(function () {\n  function file(fd, flags) {\n    if(fs_node_supported()) {\n      return caml_sys_open_for_node(fd, flags);\n    }\n    else\n      return new MlFakeFd_out(fd, flags)\n  }\n  caml_sys_open_internal(file(0,{rdonly:1,altname:\"/dev/stdin\",isCharacterDevice:true}), 0);\n  caml_sys_open_internal(file(1,{buffered:2,wronly:1,isCharacterDevice:true}), 1);\n  caml_sys_open_internal(file(2,{buffered:2,wronly:1,isCharacterDevice:true}), 2);\n})()\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\n//Requires: caml_ml_channels\nfunction caml_ml_set_channel_name(chanid, name) {\n  var chan = caml_ml_channels[chanid];\n  chan.name = name;\n  return 0;\n}\n\n//Provides: caml_ml_channels\nvar caml_ml_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_channels.length; c++){\n    if(caml_ml_channels[c] && caml_ml_channels[c].opened && caml_ml_channels[c].out)\n      l=[0,caml_ml_channels[c].fd,l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: caml_ml_channels, caml_sys_fds\n//Requires: caml_raise_sys_error\n//Requires: caml_sys_open\nfunction caml_ml_open_descriptor_out (fd) {\n  var file = caml_sys_fds[fd];\n  if(file.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var buffered = (file.flags.buffered !== undefined) ? file.flags.buffered : 1;\n  var channel = {\n    file:file,\n    offset:file.flags.append?file.length():0,\n    fd:fd,\n    opened:true,\n    out:true,\n    buffer_curr:0,\n    buffer:new Uint8Array(65536),\n    buffered:buffered\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_ml_channels, caml_sys_fds\n//Requires: caml_raise_sys_error\n//Requires: caml_sys_open\nfunction caml_ml_open_descriptor_in (fd)  {\n  var file = caml_sys_fds[fd];\n  if(file.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n  var refill = null;\n  var channel = {\n    file:file,\n    offset:file.flags.append?file.length():0,\n    fd:fd,\n    opened:true,\n    out: false,\n    buffer_curr:0,\n    buffer_max:0,\n    buffer:new Uint8Array(65536),\n    refill:refill\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n\n//Provides: caml_ml_open_descriptor_in_with_flags\n//Requires: caml_ml_open_descriptor_in\n//Version: >= 5.1\nfunction caml_ml_open_descriptor_in_with_flags(fd, flags){\n  return caml_ml_open_descriptor_in(fd);\n}\n\n//Provides: caml_ml_open_descriptor_out_with_flags\n//Requires: caml_ml_open_descriptor_out\n//Version: >= 5.1\nfunction caml_ml_open_descriptor_out_with_flags(fd, flags){\n  return caml_ml_open_descriptor_out(fd);\n}\n\n//Provides: caml_channel_descriptor\n//Requires: caml_ml_channels\n//Alias: win_filedescr_of_channel\nfunction caml_channel_descriptor(chanid){\n  var chan = caml_ml_channels[chanid];\n  return chan.fd;\n}\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_ml_channels\nfunction caml_ml_set_binary_mode(chanid,mode){\n  var chan = caml_ml_channels[chanid];\n  chan.file.flags.text = !mode\n  chan.file.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (chanid) {\n  var chan = caml_ml_channels[chanid];\n  chan.opened = false;\n  caml_sys_close(chan.fd)\n  return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_channels\nfunction caml_ml_channel_size(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.file.length();\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_int64_of_float,caml_ml_channels\nfunction caml_ml_channel_size_64(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return caml_int64_of_float(chan.file.length ());\n}\n\n//Provides: caml_ml_set_channel_output\n//Requires: caml_ml_channels\nfunction caml_ml_set_channel_output(chanid,f) {\n  var chan = caml_ml_channels[chanid];\n  chan.output = (function (s) {f(s)});\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\n//Requires: caml_ml_channels\nfunction caml_ml_set_channel_refill(chanid,f) {\n  caml_ml_channels[chanid].refill = f;\n  return 0;\n}\n\n//Provides: caml_refill\n//Requires: caml_ml_string_length, caml_uint8_array_of_string\nfunction caml_refill (chan) {\n  if(chan.refill != null){\n    var str = chan.refill();\n    var str_a = caml_uint8_array_of_string(str);\n    if (str_a.length == 0) {\n      chan.refill = null\n    }\n    else {\n      if(chan.buffer.length < chan.buffer_max + str_a.length){\n        var b = new Uint8Array(chan.buffer_max + str_a.length);\n        b.set(chan.buffer);\n        chan.buffer = b;\n      }\n      chan.buffer.set(str_a,chan.buffer_max);\n      chan.offset += str_a.length;\n      chan.buffer_max += str_a.length;\n    }\n  } else {\n    var nread = chan.file.read(chan.offset, chan.buffer, chan.buffer_max, chan.buffer.length - chan.buffer_max);\n    chan.offset += nread;\n    chan.buffer_max += nread;\n  }\n}\n\n//Provides: caml_ml_input\n//Requires: caml_ml_input_block\n//Requires: caml_uint8_array_of_bytes\nfunction caml_ml_input (chanid, b, i, l) {\n  var ba = caml_uint8_array_of_bytes(b);\n  return caml_ml_input_block(chanid, ba, i, l)\n}\n\n//Provides: caml_ml_input_block\n//Requires: caml_refill, caml_ml_channels\nfunction caml_ml_input_block (chanid, ba, i, l) {\n  var chan = caml_ml_channels[chanid];\n  var n = l;\n  var avail = chan.buffer_max - chan.buffer_curr;\n  if(l <= avail) {\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + l), i);\n    chan.buffer_curr += l;\n  }\n  else if(avail > 0) {\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + avail), i);\n    chan.buffer_curr += avail;\n    n = avail;\n  } else {\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n    caml_refill(chan);\n    var avail = chan.buffer_max - chan.buffer_curr;\n    if(n > avail) n = avail;\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + n), i);\n    chan.buffer_curr += n;\n  }\n  return n | 0;\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_bytes, caml_create_bytes, caml_ml_channels, caml_bytes_of_array\n//Requires: caml_refill, caml_failwith, caml_raise_end_of_file\n//Requires: caml_marshal_header_size\nfunction caml_input_value (chanid) {\n  var chan = caml_ml_channels[chanid];\n  var header = new Uint8Array(caml_marshal_header_size);\n  function block(buffer, offset, n) {\n    var r = 0;\n    while(r < n){\n      if(chan.buffer_curr >= chan.buffer_max){\n        chan.buffer_curr = 0;\n        chan.buffer_max = 0;\n        caml_refill(chan);\n      }\n      if (chan.buffer_curr >= chan.buffer_max)\n        break;\n      buffer[offset+r] = chan.buffer[chan.buffer_curr];\n      chan.buffer_curr++;\n      r++;\n    }\n    return r;\n  }\n  var r = block(header, 0, caml_marshal_header_size);\n  if(r == 0)\n    caml_raise_end_of_file();\n  else if (r < caml_marshal_header_size)\n    caml_failwith(\"input_value: truncated object\");\n  var len = caml_marshal_data_size (caml_bytes_of_array(header), 0);\n  var buf = new Uint8Array(len + caml_marshal_header_size);\n  buf.set(header,0);\n  var r = block(buf, caml_marshal_header_size, len)\n  if(r < len)\n    caml_failwith(\"input_value: truncated object \" + r + \"  \" + len);\n  var offset = [0];\n  var res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);\n  chan.offset = chan.offset + offset[0];\n  return res;\n}\n\n//Provides: caml_input_value_to_outside_heap\n//Requires: caml_input_value\nfunction caml_input_value_to_outside_heap(c) {\n  return caml_input_value(c);\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_channels, caml_refill\nfunction caml_ml_input_char (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if(chan.buffer_curr >= chan.buffer_max){\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n    caml_refill(chan);\n  }\n  if (chan.buffer_curr >= chan.buffer_max)\n    caml_raise_end_of_file();\n  var res = chan.buffer[chan.buffer_curr];\n  chan.buffer_curr++;\n  return res;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_input_char, caml_ml_channels\nfunction caml_ml_input_int (chanid) {\n  var chan = caml_ml_channels[chanid];\n  var res = 0;\n  for(var i = 0; i < 4; i++){\n    res = (res << 8) + caml_ml_input_char(chanid) | 0;\n  }\n  return res | 0;\n}\n\n//Provides: caml_seek_in\n//Requires: caml_raise_sys_error, caml_ml_channels\nfunction caml_seek_in(chanid, pos) {\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  if(pos >= chan.offset - chan.buffer_max\n     && pos <= chan.offset\n     && chan.file.flags.binary) {\n    chan.buffer_curr = chan.buffer_max - (chan.offset - pos);\n  } else {\n    chan.offset = pos;\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_seek_in\nfunction caml_ml_seek_in(chanid,pos){\n  return caml_seek_in(chanid,pos);\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_seek_in\nfunction caml_ml_seek_in_64(chanid,pos){\n  var pos = caml_int64_to_float(pos);\n  return caml_seek_in(chanid, pos);\n}\n\n//Provides: caml_pos_in\n//Requires: caml_ml_channels\nfunction caml_pos_in(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;\n}\n\n//Provides: caml_ml_pos_in\n//Requires: caml_pos_in\nfunction caml_ml_pos_in(chanid) {\n  return caml_pos_in(chanid);\n}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float, caml_pos_in\nfunction caml_ml_pos_in_64(chanid) {\n  return caml_int64_of_float(caml_pos_in(chanid));\n}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error\n//Requires: caml_ml_channels, caml_refill\nfunction caml_ml_input_scan_line(chanid){\n  var chan = caml_ml_channels[chanid];\n  var p = chan.buffer_curr;\n  do {\n    if(p >= chan.buffer_max) {\n      if(chan.buffer_curr > 0) {\n        chan.buffer.set(chan.buffer.subarray(chan.buffer_curr),0);\n        p -= chan.buffer_curr;\n        chan.buffer_max -= chan.buffer_curr;\n        chan.buffer_curr = 0;\n      }\n      if(chan.buffer_max >= chan.buffer.length) {\n        return -(chan.buffer_max) | 0;\n      }\n      var prev_max = chan.buffer_max;\n      caml_refill (chan);\n      if(prev_max == chan.buffer_max) {\n        return -(chan.buffer_max) | 0;\n      }\n    }\n  } while (chan.buffer[p++] != 10);\n  return (p - chan.buffer_curr) | 0;\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error, caml_ml_channels\n//Requires: caml_subarray_to_jsbytes\nfunction caml_ml_flush (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n  if(!chan.buffer || chan.buffer_curr == 0) return 0;\n  if(chan.output) {\n    chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));\n  } else {\n    chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);\n  }\n  chan.offset += chan.buffer_curr;\n  chan.buffer_curr = 0;\n  return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_ml_flush,caml_ml_bytes_length\n//Requires: caml_create_bytes, caml_blit_bytes, caml_raise_sys_error, caml_ml_channels, caml_string_of_bytes\n//Requires: caml_uint8_array_of_bytes\nfunction caml_ml_output_bytes(chanid,buffer,offset,len) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n  var buffer = caml_uint8_array_of_bytes(buffer);\n  buffer = buffer.subarray(offset, offset + len);\n  if(chan.buffer_curr + buffer.length > chan.buffer.length) {\n    var b = new Uint8Array(chan.buffer_curr + buffer.length);\n    b.set(chan.buffer);\n    chan.buffer = b\n  }\n  switch(chan.buffered){\n  case 0: // Unbuffered\n    chan.buffer.set(buffer, chan.buffer_curr);\n    chan.buffer_curr += buffer.length;\n    caml_ml_flush (chanid);\n    break\n  case 1: // Buffered (the default)\n    chan.buffer.set(buffer, chan.buffer_curr);\n    chan.buffer_curr += buffer.length;\n    if(chan.buffer_curr >= chan.buffer.length)\n      caml_ml_flush (chanid);\n    break;\n  case 2: // Buffered (only for stdout and stderr)\n    var id = buffer.lastIndexOf(10)\n    if(id < 0) {\n      chan.buffer.set(buffer, chan.buffer_curr);\n      chan.buffer_curr += buffer.length;\n      if(chan.buffer_curr >= chan.buffer.length)\n        caml_ml_flush (chanid);\n    }\n    else {\n      chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);\n      chan.buffer_curr += id + 1;\n      caml_ml_flush (chanid);\n      chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);\n      chan.buffer_curr += buffer.length - id - 1;\n    }\n    break;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_output\n//Requires: caml_ml_output_bytes, caml_bytes_of_string\nfunction caml_ml_output(chanid,buffer,offset,len){\n  return caml_ml_output_bytes(chanid,caml_bytes_of_string(buffer),offset,len);\n}\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_string_of_jsbytes\nfunction caml_ml_output_char (chanid,c) {\n  var s = caml_string_of_jsbytes(String.fromCharCode(c));\n  caml_ml_output(chanid,s,0,1);\n  return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chanid,v,flags) {\n  var s = caml_output_value_to_string(v, flags);\n  caml_ml_output(chanid,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_seek_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_seek_out(chanid, pos){\n  caml_ml_flush(chanid);\n  var chan = caml_ml_channels[chanid];\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out\n//Requires: caml_seek_out\nfunction caml_ml_seek_out(chanid,pos){\n  return caml_seek_out(chanid, pos);\n}\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float, caml_seek_out\nfunction caml_ml_seek_out_64(chanid,pos){\n  var pos = caml_int64_to_float(pos);\n  return caml_seek_out(chanid, pos);\n}\n\n//Provides: caml_pos_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_pos_out(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.offset + chan.buffer_curr\n}\n\n//Provides: caml_ml_pos_out\n//Requires: caml_pos_out\nfunction caml_ml_pos_out(chanid) {\n  return caml_pos_out(chanid);\n}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float, caml_pos_out\nfunction caml_ml_pos_out_64(chanid) {\n  return caml_int64_of_float (caml_pos_out(chanid));\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (chanid,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(chanid,s,0,4);\n  return 0\n}\n\n//Provides: caml_ml_is_buffered\n//Requires: caml_ml_channels\nfunction caml_ml_is_buffered(chanid) {\n  return caml_ml_channels[chanid].buffered ? 1 : 0\n}\n\n//Provides: caml_ml_set_buffered\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_ml_set_buffered(chanid,v) {\n  caml_ml_channels[chanid].buffered = v;\n  if(!v) caml_ml_flush(chanid);\n  return 0\n}\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float ((Float_flag_, Float_f),\n              pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool pad_opt ->\n    Param_format_EBB (Bool (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision fconv =\n  match snd fconv with\n  | Float_f | Float_e | Float_E | Float_g | Float_G | Float_h | Float_H\n  | Float_CF -> -6\n  (* For %h %H and %#F formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n  | Float_F -> 12\n  (* Default precision for OCaml float printing (%F). *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = Int.max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd | Int_Cd -> 'd' | Int_i | Int_pi | Int_si\n  | Int_Ci -> 'i' | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o\n  | Int_Co -> 'o' | Int_u | Int_Cu -> 'u'\n\n(* Convert a float conversion to char. *)\n(* `cF' will be 'F' for displaying format and 'g' to call libc printf *)\nlet char_of_fconv ?(cF='F') fconv = match snd fconv with\n  | Float_f -> 'f' | Float_e -> 'e'\n  | Float_E -> 'E' | Float_g -> 'g'\n  | Float_G -> 'G' | Float_F -> cF\n  | Float_h -> 'h' | Float_H -> 'H'\n  | Float_CF -> 'F'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (Int.to_string width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (Int.to_string n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optional '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co | Int_Cd | Int_Ci | Int_Cu ->\n      buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optional '+', ' ' and/or '#' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv =\n  begin match fst fconv with\n  | Float_flag_p -> buffer_add_char buf '+'\n  | Float_flag_s -> buffer_add_char buf ' '\n  | Float_flag_ -> () end;\n  match snd fconv with\n  | Float_CF -> buffer_add_char buf '#'\n  | Float_f | Float_e | Float_E | Float_g | Float_G\n  | Float_F | Float_h | Float_H -> ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a Formatting_lit. *)\n(* Used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'B';\n      fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      begin match fmting_gen with\n      | Open_tag (Format (_, str)) ->\n        buffer_add_string buf \"@{\"; buffer_add_string buf str\n      | Open_box (Format (_, str)) ->\n        buffer_add_string buf \"@[\"; buffer_add_string buf str\n      end;\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool (pad, rest)           ->\n      fmtty_of_padding_fmtty pad (Bool_ty (fmtty_of_fmt rest))\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool _                  -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, Bool_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Bool (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool _             as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces around a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d | Int_Cd -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i | Int_Ci -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u | Int_Cu -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d | Int_Cd -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i | Int_Ci -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u | Int_Cu -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d | Int_Cd -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i | Int_Ci -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u | Int_Cu -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d | Int_Cd -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i | Int_Ci -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u | Int_Cu -> \"%nu\"\n\n(* Generate the format_float first argument from a float_conv. *)\nlet format_of_fconv fconv prec =\n    let prec = abs prec in\n    let symb = char_of_fconv ~cF:'g' fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\nlet transform_int_alt iconv s =\n  match iconv with\n  | Int_Cd | Int_Ci | Int_Cu ->\n    let digits =\n      let n = ref 0 in\n      for i = 0 to String.length s - 1 do\n        match String.unsafe_get s i with\n        | '0'..'9' -> incr n\n        | _ -> ()\n      done;\n      !n\n    in\n    let buf = Bytes.create (String.length s + (digits - 1) / 3) in\n    let pos = ref 0 in\n    let put c = Bytes.set buf !pos c; incr pos in\n    let left = ref ((digits - 1) mod 3 + 1) in\n    for i = 0 to String.length s - 1 do\n      match String.unsafe_get s i with\n      | '0'..'9' as c ->\n          if !left = 0 then (put '_'; left := 3); decr left; put c\n      | c -> put c\n    done;\n    Bytes.unsafe_to_string buf\n  | _ -> s\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n =\n  transform_int_alt iconv (format_int (format_of_iconv iconv) n)\nlet convert_int32 iconv n =\n  transform_int_alt iconv (format_int32 (format_of_iconvl iconv) n)\nlet convert_nativeint iconv n =\n  transform_int_alt iconv (format_nativeint (format_of_iconvn iconv) n)\nlet convert_int64 iconv n =\n  transform_int_alt iconv (format_int64 (format_of_iconvL iconv) n)\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  let hex () =\n    let sign =\n      match fst fconv with\n      | Float_flag_p -> '+'\n      | Float_flag_s -> ' '\n      | _ -> '-' in\n    hexstring_of_float x prec sign in\n  let add_dot_if_needed str =\n    let len = String.length str in\n    let rec is_valid i =\n      if i = len then false else\n        match str.[i] with\n        | '.' | 'e' | 'E' -> true\n        | _ -> is_valid (i + 1) in\n    if is_valid 0 then str else str ^ \".\" in\n  let caml_special_val str = match classify_float x with\n    | FP_normal | FP_subnormal | FP_zero -> str\n    | FP_infinite -> if x < 0.0 then \"neg_infinity\" else \"infinity\"\n    | FP_nan -> \"nan\" in\n  match snd fconv with\n  | Float_h -> hex ()\n  | Float_H -> String.uppercase_ascii (hex ())\n  | Float_CF -> caml_special_val (hex ())\n  | Float_F ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    caml_special_val (add_dot_if_needed str)\n  | Float_f | Float_e | Float_E | Float_g | Float_G ->\n    format_float (format_of_fconv fconv prec) x\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k new_acc rest\n  | String (pad, rest) ->\n    make_padding k acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_padding k acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k acc rest pad prec fconv\n  | Bool (pad, rest) ->\n    make_padding k acc rest pad string_of_bool\n  | Alpha rest ->\n    fun f x -> make_printf k (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' End_of_acc fmt'\n\n  | End_of_format ->\n    k acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k acc fmt\n  | Ignored_string _                -> make_invalid_arg k acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_bool _                  -> make_invalid_arg k acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt ->\n  make_printf k (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_padding : type x z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  ((b, c) acc -> f) -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun _ -> k o) (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f state.\n  (state -> f) ->\n  state -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error management *)\n\n(* Raise [Failure] with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb from a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise [Failure] in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbers) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise [Failure] with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encountered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise [Failure] with a friendly error message about an option dependency\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise [Failure] with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; note that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () : (x,y) padding =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatibility, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a b) (pad : (a, b) padding) : (a,b) padding =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv =\n        compute_float_conv pct_ind str_ind\n          (get_plus ()) (get_hash ()) (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_bool (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Bool (pad', fmt_rest'))\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting information (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  (* Try to read the optional <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting =\n          if is_open_tag then Open_tag sub_format else Open_box sub_format in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optional <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}'\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')'\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | false,  true, false, 'd' -> Int_Cd\n    | false,  true, false, 'i' -> Int_Ci\n    | false,  true, false, 'u' -> Int_Cu\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, space, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus hash space symb =\n    let flag = match plus, space with\n    | false, false -> Float_flag_\n    | false,  true -> Float_flag_s\n    |  true, false -> Float_flag_p\n    |  true,  true ->\n      (* plus and space: legacy implementation prefers plus *)\n      if legacy_behavior then Float_flag_p\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\" in\n    let kind = match hash, symb with\n    | _, 'f' -> Float_f\n    | _, 'e' -> Float_e\n    | _, 'E' -> Float_E\n    | _, 'g' -> Float_g\n    | _, 'G' -> Float_G\n    | _, 'h' -> Float_h\n    | _, 'H' -> Float_H\n    | false, 'F' -> Float_F\n    | true, 'F' -> Float_CF\n    | _ -> assert false in\n    flag, kind\n\n  (* Raise [Failure] with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\ntype t = exn = ..\n\nlet printers = Atomic.make []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet use_printers x =\n  let rec conv = function\n    | hd :: tl ->\n        (match hd x with\n         | None | exception _ -> conv tl\n         | Some s -> Some s)\n    | [] -> None in\n  conv (Atomic.get printers)\n\nlet destruct_ext_constructor x =\n  if Obj.tag x <> 0 then\n    ((Obj.magic (Obj.field x 0) : string), None)\n  else\n    let constructor =\n      (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n    (constructor, Some (fields x))\n\nlet string_of_extension_constructor t =\n  let constructor, fields_opt = destruct_ext_constructor t in\n  match fields_opt with\n  | None -> constructor\n  | Some f -> constructor ^ f\n\nlet to_string_default = function\n  | Out_of_memory -> \"Out of memory\"\n  | Stack_overflow -> \"Stack overflow\"\n  | Match_failure(file, line, char) ->\n      sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n  | Assert_failure(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Assertion failed\"\n  | Undefined_recursive_module(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n  | x ->\n      string_of_extension_constructor (Obj.repr x)\n\nlet to_string e =\n  match use_printers e with\n  | Some s -> s\n  | None -> to_string_default e\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace_entry = private int\ntype raw_backtrace = raw_backtrace_entry array\n\nlet raw_backtrace_entries bt = bt\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\nexternal raise_with_backtrace: exn -> raw_backtrace -> 'a\n  = \"%raise_with_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n      defname     : string;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false; defname = \"\" };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s %s in file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.defname l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slot_defname = function\n  | Unknown_location _\n  | Known_location { defname = \"\" } -> None\n  | Known_location l -> Some l.defname\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nlet backtrace_slots_of_raw_entry entry =\n  backtrace_slots [| entry |]\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\n  let name = backtrace_slot_defname\nend\n\nlet raw_backtrace_length bt = Array.length bt\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () = raw_backtrace_to_string (get_raw_backtrace ())\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet rec register_printer fn =\n  let old_printers = Atomic.get printers in\n  let new_printers = fn :: old_printers in\n  let success = Atomic.compare_and_set printers old_printers new_printers in\n  if not success then register_printer fn\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\nexternal get_debug_info_status : unit -> int = \"caml_ml_debug_info_status\"\n\n(* Descriptions for errors in startup.h. See also backtrace.c *)\nlet errors = [| \"\";\n  (* FILE_NOT_FOUND *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file not found)\";\n  (* BAD_BYTECODE *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file appears to be corrupt)\";\n  (* WRONG_MAGIC *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file has wrong magic number)\";\n  (* NO_FDS *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file cannot be opened;\\n \\\n      -- too many open files. Try running with OCAMLRUNPARAM=b=2)\"\n|]\n\nlet default_uncaught_exception_handler exn raw_backtrace =\n  eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n  print_raw_backtrace stderr raw_backtrace;\n  let status = get_debug_info_status () in\n  if status < 0 then\n    prerr_endline errors.(abs status);\n  flush stderr\n\nlet uncaught_exception_handler = ref default_uncaught_exception_handler\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := fn\n\nlet empty_backtrace : raw_backtrace = [| |]\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [runtime/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Stdlib.do_at_exit () with _ -> ());\n    try\n      !uncaught_exception_handler exn raw_backtrace\n    with exn' ->\n      let raw_backtrace' = try_get_raw_backtrace () in\n      eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n      print_raw_backtrace stderr raw_backtrace;\n      eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n        (to_string exn');\n      print_raw_backtrace stderr raw_backtrace';\n      flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [runtime/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","(* This is essentially the result type, however Ok/Error makes less sense for my usecase *)\ntype ('a, 'b) either = Left of 'a | Right of 'b\ntype variable = string\n\nexception Unbalanced_parens\nexception Unfinished_fun\nexception Unfinished_str\nexception Bad_int\n\ntype tok =\n  | Def of variable * tok list\n  | Fun of variable * tok list\n  | Var of variable\n  | Parens of tok list\n  | Integer of int\n  | Str of string\n\nlet rec tok_to_str = function\n  | Def (name, toks) ->\n      Printf.sprintf \"%s := %s\" name\n        (List.map tok_to_str toks |> String.concat \" \")\n  | Fun (var, toks) ->\n      Printf.sprintf \"(λ%s. %s)\" var\n        (List.map tok_to_str toks |> String.concat \" \")\n  | Var var -> var\n  | Parens toks ->\n      Printf.sprintf \"(%s)\" (List.map tok_to_str toks |> String.concat \" \")\n  | Integer i -> string_of_int i\n  | Str s -> Printf.sprintf \"\\\"%s\\\"\" s\n\nopen Seq\n\ntype setts = { parens : int; lambda : bool; str : bool }\n\nlet default_setts = { parens = 0; lambda = false; str = false }\nlet incr_parens sett = { sett with parens = sett.parens + 1 }\nlet decr_parens sett = { sett with parens = sett.parens - 1 }\n\nlet rec parse sett = function\n  | Cons ((' ' | '\\n'), cs) -> parse sett (cs ())\n  | Cons (c, cs) ->\n      let toks, rest = expr sett (Cons (c, cs)) in\n      toks @ parse sett rest\n  | Nil -> []\n\nand expr sett = function\n  | Cons ('\\\\', cs) ->\n      let name, (body, rest) = lambda sett (cs ()) in\n      ([ Fun (String.of_seq (fun () -> name), body) ], rest)\n  | Cons ('(', cs) -> (\n      let toks, rest = expr (incr_parens sett) (cs ()) in\n      match rest with\n      | Cons (')', cs) when sett.parens = 0 -> ([ Parens toks ], cs ())\n      | Cons (')', cs) when sett.parens = 1 ->\n          let inn_toks, rest = expr sett (cs ()) in\n          (Parens toks :: inn_toks, rest)\n      | Cons (')', cs) when sett.parens > 1 ->\n          let inn_toks, rest = expr (decr_parens sett) (cs ()) in\n          (Parens toks :: inn_toks, rest)\n      | _ -> raise Unbalanced_parens)\n  | Cons (')', cs) when sett.parens > 0 -> ([], Cons (')', cs))\n  | Cons (')', _) when sett.parens = 0 -> raise Unbalanced_parens\n  | Cons ((' ' | '\\n'), cs) -> expr sett (cs ())\n  | Cons ('\"', cs) ->\n      let str, rest = str sett (cs ()) in\n      let toks, rest = expr sett rest in\n      (Str (String.of_seq (fun () -> str)) :: toks, rest)\n  | Cons (('0' .. '9' as c), cs) ->\n      let intg, rest = integer sett (Cons (c, cs)) in\n      let intg_len = length (fun () -> intg) in\n      let toks, rest = expr sett rest in\n      ( Integer\n          (fold_lefti\n             (fun acc i x ->\n               acc\n               + (x * (int_of_float @@ (10. ** float_of_int (intg_len - i - 1)))))\n             0\n             (fun () -> intg))\n        :: toks,\n        rest )\n  | Cons (c, cs) when sett.lambda -> (\n      match try_lambda sett (Cons (c, cs)) with\n      | Left lamb, rest ->\n          let body, rest = expr sett rest in\n          ([ Fun (String.of_seq (fun () -> lamb), body) ], rest)\n      | Right str, rest ->\n          let toks, rest = expr sett rest in\n          (Var (String.of_seq (fun () -> str)) :: toks, rest))\n  | Cons (c, cs) -> (\n      match try_def sett (Cons (c, cs)) with\n      | Left def, rest ->\n          let body, rest = expr sett rest in\n          ([ Def (String.of_seq (fun () -> def), body) ], rest)\n      | Right str, rest ->\n          let toks, rest = expr sett rest in\n          (Var (String.of_seq (fun () -> str)) :: toks, rest))\n  | Nil -> ([], Nil)\n\nand lambda sett = function\n  | Cons ('.', cs) -> (Nil, expr { sett with lambda = true } (cs ()))\n  | Cons ((' ' | '\\n'), cs) -> lambda sett (cs ())\n  | Cons (c, cs) ->\n      let name, body = lambda sett (cs ()) in\n      (Cons (c, fun () -> name), body)\n  | _ -> raise Unfinished_fun\n\nand try_lambda sett = function\n  | Cons ('.', cs) -> (Left Nil, cs ())\n  | Cons ((('(' | ')') as c), cs) -> (Right Nil, Cons (c, cs))\n  | Cons ((' ' | '\\n'), cs) -> (Right Nil, cs ())\n  | Cons (c, cs) -> (\n      let resl, rest = try_lambda sett (cs ()) in\n      match resl with\n      | Left lamb -> (Left (Cons (c, fun () -> lamb)), rest)\n      | Right str -> (Right (Cons (c, fun () -> str)), rest))\n  | Nil -> (Right Nil, Nil)\n\nand try_def sett =\n  let try_match c cs =\n    let resl, rest = try_def sett (cs ()) in\n    match resl with\n    | Left def -> (Left (Cons (c, fun () -> def)), rest)\n    | Right str -> (Right (Cons (c, fun () -> str)), rest)\n  in\n  function\n  | Cons (':', cs) -> (\n      match cs () with\n      | Cons ('=', cs) -> (Left Nil, cs ())\n      | _ -> try_match ':' cs)\n  | Cons ((('(' | ')') as c), cs) -> (Right Nil, Cons (c, cs))\n  | Cons ((' ' | '\\n'), cs) -> (\n      match (drop_while (function ' ' | '\\n' -> true | _ -> false) cs) () with\n      | Cons (':', pc) -> (\n          match pc () with\n          | Cons ('=', cs) -> (Left Nil, cs ())\n          | _ -> (Right Nil, cs ()))\n      | _ -> (Right Nil, cs ()))\n  | Cons (c, cs) -> try_match c cs\n  | Nil -> (Right Nil, Nil)\n\nand integer sett = function\n  | Cons ((('(' | ')') as c), cs) -> (Nil, Cons (c, cs))\n  | Cons ((' ' | '\\n'), cs) -> (Nil, cs ())\n  | Cons (('0' .. '9' as c), cs) ->\n      let intg, rest = integer sett (cs ()) in\n      (Cons (int_of_char c - 48, fun () -> intg), rest)\n  | Nil -> (Nil, Nil)\n  | _ -> raise Bad_int\n\nand str sett = function\n  | Cons ('\"', cs) -> (Nil, cs ())\n  | Cons (c, cs) ->\n      let str, rest = str sett (cs ()) in\n      (Cons (c, fun () -> str), rest)\n  | Nil -> raise Unfinished_str\n\n(* let test str = lex default_setts (String.to_seq str ()) *)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of lists. *)\ntype 'a t = 'a list = [] | (::) of 'a * 'a list\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet nth_opt l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> None\n    | a::l -> if n = 0 then Some a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec init_tailrec_aux acc i n f =\n  if i >= n then acc\n  else init_tailrec_aux (f i :: acc) (i+1) n f\n\nlet rec init_aux i n f =\n  if i >= n then []\n  else\n    let r = f i in\n    r :: init_aux (i+1) n f\n\nlet rev_init_threshold =\n  match Sys.backend_type with\n  | Sys.Native | Sys.Bytecode -> 10_000\n  (* We don't know the size of the stack, better be safe and assume it's\n     small. *)\n  | Sys.Other _ -> 50\n\nlet init len f =\n  if len < 0 then invalid_arg \"List.init\" else\n  if len > rev_init_threshold then rev (init_tailrec_aux [] 0 len f)\n  else init_aux 0 len f\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assoc_opt x = function\n    [] -> None\n  | (a,b)::l -> if compare a x = 0 then Some b else assoc_opt x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec assq_opt x = function\n    [] -> None\n  | (a,b)::l -> if a == x then Some b else assq_opt x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet rec find_opt p = function\n  | [] -> None\n  | x :: l -> if p x then Some x else find_opt p l\n\nlet rec find_map f = function\n  | [] -> None\n  | x :: l ->\n     begin match f x with\n       | Some _ as result -> result\n       | None -> find_map f l\n     end\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet filteri p l =\n  let rec aux i acc = function\n  | [] -> rev acc\n  | x::l -> aux (i + 1) (if p i x then x::acc else acc) l\n  in\n  aux 0 [] l\n\nlet filter_map f =\n  let rec aux accu = function\n    | [] -> rev accu\n    | x :: l ->\n        match f x with\n        | None -> aux accu l\n        | Some v -> aux (v :: accu) l\n  in\n  aux []\n\nlet concat_map f l =\n  let rec aux f acc = function\n    | [] -> rev acc\n    | x :: l ->\n       let xs = f x in\n       aux f (rev_append xs acc) l\n  in aux f [] l\n\nlet fold_left_map f accu l =\n  let rec aux accu l_accu = function\n    | [] -> accu, rev l_accu\n    | x :: l ->\n        let accu, x = f accu x in\n        aux accu (x :: l_accu) l in\n  aux accu [] l\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet partition_map p l =\n  let rec part left right = function\n  | [] -> (rev left, rev right)\n  | x :: l ->\n     begin match p x with\n       | Either.Left v -> part (v :: left) right l\n       | Either.Right v -> part left (v :: right) l\n     end\n  in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 <= 0 then\n            if cmp x2 x3 <= 0 then [x1; x2; x3]\n            else if cmp x1 x3 <= 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 <= 0 then [x2; x1; x3]\n          else if cmp x2 x3 <= 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 > 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 > 0 then\n            if cmp x2 x3 > 0 then [x1; x2; x3]\n            else if cmp x1 x3 > 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 > 0 then [x2; x1; x3]\n          else if cmp x2 x3 > 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c < 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c < 0 then [x2; x3] else [x3; x2]\n          else if c < 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c < 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c < 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c < 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c < 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c > 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c > 0 then [x2; x3] else [x3; x2]\n          else if c > 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c > 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c > 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c > 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c > 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet rec compare_lengths l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _ -> -1\n  | _, [] -> 1\n  | _ :: l1, _ :: l2 -> compare_lengths l1 l2\n\nlet rec compare_length_with l n =\n  match l with\n  | [] ->\n    if n = 0 then 0 else\n      if n > 0 then -1 else 1\n  | _ :: l ->\n    if n <= 0 then 1 else\n      compare_length_with l (n-1)\n\n(** {1 Comparison} *)\n\n(* Note: we are *not* shortcutting the list by using\n   [List.compare_lengths] first; this may be slower on long lists\n   immediately start with distinct elements. It is also incorrect for\n   [compare] below, and it is better (principle of least surprise) to\n   use the same approach for both functions. *)\nlet rec equal eq l1 l2 =\n  match l1, l2 with\n  | [], [] -> true\n  | [], _::_ | _::_, [] -> false\n  | a1::l1, a2::l2 -> eq a1 a2 && equal eq l1 l2\n\nlet rec compare cmp l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _::_ -> -1\n  | _::_, [] -> 1\n  | a1::l1, a2::l2 ->\n    let c = cmp a1 a2 in\n    if c <> 0 then c\n    else compare cmp l1 l2\n\n(** {1 Iterators} *)\n\nlet to_seq l =\n  let rec aux l () = match l with\n    | [] -> Seq.Nil\n    | x :: tail -> Seq.Cons (x, aux tail)\n  in\n  aux l\n\nlet of_seq seq =\n  let rec direct depth seq : _ list =\n    if depth=0\n    then\n      Seq.fold_left (fun acc x -> x::acc) [] seq\n      |> rev (* tailrec *)\n    else match seq() with\n      | Seq.Nil -> []\n      | Seq.Cons (x, next) -> x :: direct (depth-1) next\n  in\n  direct 500 seq\n","open Js_of_ocaml\nmodule Html = Dom_html\nopen Lambdish.Parser\nopen Lambdish.Interpreter\n\nlet string_run modl str =\n  try\n    parse default_setts (String.to_seq str ())\n    |> interpret modl |> List.map tok_to_str |> String.concat \" \"\n  with\n  | Unbalanced_parens -> \"Unbalanced Parenthesis\"\n  | Unfinished_fun -> \"Unfinished Function\"\n  | Unfinished_str -> \"Unfinished String\"\n  | Bad_int -> \"Bad Number\"\n  | Undefined_var var -> \"Undefined Variable: \" ^ var\n  | _ -> \"Unknown Error\"\n\nlet make_div d parent text =\n  let div = Html.createDiv d in\n  div##.innerHTML := text;\n  Dom.appendChild parent div\n\nlet std_lib : string =\n  {|\n  (S := \\x.y.z.x z(y z))\n  (K := \\x.y.x)\n  (I := \\x.x)\n\n  (true := K)\n  (false := S K)\n\n  (cons := \\x.y.f.f x y)\n  (nil := \\x.true)\n  (car := \\p.p true)\n  (cdr := \\p.p false)\n|}\n\nlet onload _ =\n  let d = Html.document in\n  let hist =\n    Js.Opt.get\n      (d##getElementById (Js.string \"history\"))\n      (fun () -> assert false)\n  in\n  let interp =\n    Js.Opt.get\n      (d##getElementById (Js.string \"interpreter\"))\n      (fun () -> assert false)\n  in\n  interp##focus;\n  (* Initialize Empty Module and Import List Module *)\n  let modl = default_modl in\n  let _ = string_run modl std_lib in\n  let match_key modl e =\n    match e##.keyCode with\n    | 13 ->\n        (match Js.Opt.to_option interp##.textContent with\n        | Some s ->\n            let res = string_run modl (Js.to_string s) in\n            make_div d hist\n              ((Js.string \"> \")##concat_2 s (Js.string (\"<br/>\" ^ res)));\n            interp##.textContent := Js.Opt.return (Js.string \"\")\n        | None -> ());\n        Js._false\n    | 76 when Js.to_bool e##.ctrlKey ->\n        hist##.textContent := Js.Opt.return (Js.string \"\");\n        Js._false\n    | _ -> Js._true\n  in\n  ignore\n  @@ Html.addEventListener interp Html.Event.keydown\n       (Html.handler (match_key modl))\n       Js._true;\n  ignore\n  @@ Html.addEventListener d Html.Event.mousedown\n       (Html.handler (fun _ ->\n            interp##focus;\n            Js._false))\n       Js._true;\n  Js._false\n\nlet _ = Html.window##.onload := Html.handler onload\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n  | Int_Cd | Int_Ci | Int_Cu       (*  %#d | %#i | %#u *)\n\n(* Float conversion. *)\ntype float_flag_conv =\n  | Float_flag_                    (* %[feEgGFhH] *)\n  | Float_flag_p                   (* %+[feEgGFhH] *)\n  | Float_flag_s                   (* % [feEgGFhH] *)\ntype float_kind_conv =\n  | Float_f                        (*  %f | %+f | % f  *)\n  | Float_e                        (*  %e | %+e | % e  *)\n  | Float_E                        (*  %E | %+E | % E  *)\n  | Float_g                        (*  %g | %+g | % g  *)\n  | Float_G                        (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F | %+F | % F  *)\n  | Float_h                        (*  %h | %+h | % h  *)\n  | Float_H                        (*  %H | %+H | % H  *)\n  | Float_CF                       (*  %#F| %+#F| % #F *)\ntype float_conv = float_flag_conv * float_kind_conv\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargument and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two inputs have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGFhH] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('x, bool -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     intended for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool (pad, rest) ->\n    Bool (pad, concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for runtime/fail_nat.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\nexception Match_failure = Match_failure\nexception Assert_failure = Assert_failure\nexception Invalid_argument = Invalid_argument\nexception Failure = Failure\nexception Not_found = Not_found\nexception Out_of_memory = Out_of_memory\nexception Stack_overflow = Stack_overflow\nexception Sys_error = Sys_error\nexception End_of_file = End_of_file\nexception Division_by_zero = Division_by_zero\nexception Sys_blocked_io = Sys_blocked_io\nexception Undefined_recursive_module = Undefined_recursive_module\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\nexternal __FUNCTION__ : string = \"%loc_FUNCTION\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal acosh : float -> float = \"caml_acosh_float\" \"caml_acosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal asinh : float -> float = \"caml_asinh_float\" \"caml_asinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal atanh : float -> float = \"caml_atanh_float\" \"caml_atanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%bytes_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet bool_of_string_opt = function\n  | \"true\" -> Some true\n  | \"false\" -> Some false\n  | _ -> None\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\n\nlet int_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (int_of_string s)\n  with Failure _ -> None\n\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\nlet float_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (float_of_string s)\n  with Failure _ -> None\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a::l ->\n        begin try\n            flush a\n        with Sys_error _ ->\n          () (* ignore channels closed during a preceding flush. *)\n        end;\n        iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_int_opt () = int_of_string_opt(read_line())\nlet read_float () = float_of_string(read_line())\nlet read_float_opt () = float_of_string_opt(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\n(* for at_exit *)\ntype 'a atomic_t\nexternal atomic_make : 'a -> 'a atomic_t = \"%makemutable\"\nexternal atomic_get : 'a atomic_t -> 'a = \"%atomic_load\"\nexternal atomic_compare_and_set : 'a atomic_t -> 'a -> 'a -> bool\n  = \"%atomic_cas\"\n\nlet exit_function = atomic_make flush_all\n\nlet rec at_exit f =\n  (* MPR#7253, MPR#7796: make sure \"f\" is executed only once *)\n  let f_yet_to_run = atomic_make true in\n  let old_exit = atomic_get exit_function in\n  let new_exit () =\n    if atomic_compare_and_set f_yet_to_run true false then f () ;\n    old_exit ()\n  in\n  let success = atomic_compare_and_set exit_function old_exit new_exit in\n  if not success then at_exit f\n\nlet do_domain_local_at_exit = ref (fun () -> ())\n\nlet do_at_exit () =\n  (!do_domain_local_at_exit) ();\n  (atomic_get exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n\n(*MODULE_ALIASES*)\nmodule Arg            = Arg\nmodule Array          = Array\nmodule ArrayLabels    = ArrayLabels\nmodule Atomic         = Atomic\nmodule Bigarray       = Bigarray\nmodule Bool           = Bool\nmodule Buffer         = Buffer\nmodule Bytes          = Bytes\nmodule BytesLabels    = BytesLabels\nmodule Callback       = Callback\nmodule Char           = Char\nmodule Complex        = Complex\nmodule Condition      = Condition\nmodule Digest         = Digest\nmodule Domain         = Domain\nmodule Effect         = Effect\nmodule Either         = Either\nmodule Ephemeron      = Ephemeron\nmodule Filename       = Filename\nmodule Float          = Float\nmodule Format         = Format\nmodule Fun            = Fun\nmodule Gc             = Gc\nmodule Hashtbl        = Hashtbl\nmodule In_channel     = In_channel\nmodule Int            = Int\nmodule Int32          = Int32\nmodule Int64          = Int64\nmodule Lazy           = Lazy\nmodule Lexing         = Lexing\nmodule List           = List\nmodule ListLabels     = ListLabels\nmodule Map            = Map\nmodule Marshal        = Marshal\nmodule MoreLabels     = MoreLabels\nmodule Mutex          = Mutex\nmodule Nativeint      = Nativeint\nmodule Obj            = Obj\nmodule Oo             = Oo\nmodule Option         = Option\nmodule Out_channel    = Out_channel\nmodule Parsing        = Parsing\nmodule Printexc       = Printexc\nmodule Printf         = Printf\nmodule Queue          = Queue\nmodule Random         = Random\nmodule Result         = Result\nmodule Scanf          = Scanf\nmodule Semaphore      = Semaphore\nmodule Seq            = Seq\nmodule Set            = Set\nmodule Stack          = Stack\nmodule StdLabels      = StdLabels\nmodule String         = String\nmodule StringLabels   = StringLabels\nmodule Sys            = Sys\nmodule Uchar          = Uchar\nmodule Unit           = Unit\nmodule Weak           = Weak\n","(* @configure_input@ *)\n#3 \"sys.ml.in\"\n(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype backend_type =\n  | Native\n  | Bytecode\n  | Other of string\n(* System interface *)\n\nexternal get_config: unit -> string * int * bool = \"caml_sys_get_config\"\nexternal get_executable_name : unit -> string = \"caml_sys_executable_name\"\nexternal argv : string array = \"%sys_argv\"\nexternal big_endian : unit -> bool = \"%big_endian\"\nexternal word_size : unit -> int = \"%word_size\"\nexternal int_size : unit -> int = \"%int_size\"\nexternal max_wosize : unit -> int = \"%max_wosize\"\nexternal unix : unit -> bool = \"%ostype_unix\"\nexternal win32 : unit -> bool = \"%ostype_win32\"\nexternal cygwin : unit -> bool = \"%ostype_cygwin\"\nexternal get_backend_type : unit -> backend_type = \"%backend_type\"\n\nlet executable_name = get_executable_name()\nlet (os_type, _, _) = get_config()\nlet backend_type = get_backend_type ()\nlet big_endian = big_endian ()\nlet word_size = word_size ()\nlet int_size = int_size ()\nlet unix = unix ()\nlet win32 = win32 ()\nlet cygwin = cygwin ()\nlet max_array_length = max_wosize ()\nlet max_floatarray_length = max_array_length / (64 / word_size)\nlet max_string_length = word_size / 8 * max_array_length - 1\nexternal runtime_variant : unit -> string = \"caml_runtime_variant\"\nexternal runtime_parameters : unit -> string = \"caml_runtime_parameters\"\n\nexternal file_exists: string -> bool = \"caml_sys_file_exists\"\nexternal is_directory : string -> bool = \"caml_sys_is_directory\"\nexternal remove: string -> unit = \"caml_sys_remove\"\nexternal rename : string -> string -> unit = \"caml_sys_rename\"\nexternal getenv: string -> string = \"caml_sys_getenv\"\n\nlet getenv_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (getenv s)\n  with Not_found -> None\n\nexternal command: string -> int = \"caml_sys_system_command\"\nexternal time: unit -> (float [@unboxed]) =\n  \"caml_sys_time\" \"caml_sys_time_unboxed\" [@@noalloc]\nexternal chdir: string -> unit = \"caml_sys_chdir\"\nexternal mkdir: string -> int -> unit = \"caml_sys_mkdir\"\nexternal rmdir: string -> unit = \"caml_sys_rmdir\"\nexternal getcwd: unit -> string = \"caml_sys_getcwd\"\nexternal readdir : string -> string array = \"caml_sys_read_directory\"\n\nlet interactive = ref false\n\ntype signal_behavior =\n    Signal_default\n  | Signal_ignore\n  | Signal_handle of (int -> unit)\n\nexternal signal : int -> signal_behavior -> signal_behavior\n                = \"caml_install_signal_handler\"\n\nlet set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)\n\nlet sigabrt = -1\nlet sigalrm = -2\nlet sigfpe = -3\nlet sighup = -4\nlet sigill = -5\nlet sigint = -6\nlet sigkill = -7\nlet sigpipe = -8\nlet sigquit = -9\nlet sigsegv = -10\nlet sigterm = -11\nlet sigusr1 = -12\nlet sigusr2 = -13\nlet sigchld = -14\nlet sigcont = -15\nlet sigstop = -16\nlet sigtstp = -17\nlet sigttin = -18\nlet sigttou = -19\nlet sigvtalrm = -20\nlet sigprof = -21\nlet sigbus = -22\nlet sigpoll = -23\nlet sigsys = -24\nlet sigtrap = -25\nlet sigurg = -26\nlet sigxcpu = -27\nlet sigxfsz = -28\n\nexception Break\n\nlet catch_break on =\n  if on then\n    set_signal sigint (Signal_handle(fun _ -> raise Break))\n  else\n    set_signal sigint Signal_default\n\n\nexternal enable_runtime_warnings: bool -> unit =\n  \"caml_ml_enable_runtime_warnings\"\nexternal runtime_warnings_enabled: unit -> bool =\n  \"caml_ml_runtime_warnings_enabled\"\n\n(* The version string is found in file ../VERSION *)\n\nlet ocaml_version = \"@VERSION@\"\n\nlet development_version = @OCAML_DEVELOPMENT_VERSION@\n\ntype extra_prefix = Plus | Tilde\n\ntype extra_info = extra_prefix * string\n\ntype ocaml_release_info = {\n  major : int;\n  minor : int;\n  patchlevel : int;\n  extra : extra_info option\n}\n\nlet ocaml_release = {\n  major = @OCAML_VERSION_MAJOR@;\n  minor = @OCAML_VERSION_MINOR@;\n  patchlevel = @OCAML_VERSION_PATCHLEVEL@;\n  extra = @OCAML_RELEASE_EXTRA@\n}\n\n(* Optimization *)\n\nexternal opaque_identity : 'a -> 'a = \"%opaque\"\n\nmodule Immediate64 = struct\n  module type Non_immediate = sig\n    type t\n  end\n  module type Immediate = sig\n    type t [@@immediate]\n  end\n\n  module Make(Immediate : Immediate)(Non_immediate : Non_immediate) = struct\n    type t [@@immediate64]\n    type 'a repr =\n      | Immediate : Immediate.t repr\n      | Non_immediate : Non_immediate.t repr\n    external magic : _ repr -> t repr = \"%identity\"\n    let repr =\n      if word_size = 64 then\n        magic Immediate\n      else\n        magic Non_immediate\n  end\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = int\n\nlet zero = 0\nlet one = 1\nlet minus_one = -1\nexternal neg : int -> int = \"%negint\"\nexternal add : int -> int -> int = \"%addint\"\nexternal sub : int -> int -> int = \"%subint\"\nexternal mul : int -> int -> int = \"%mulint\"\nexternal div : int -> int -> int = \"%divint\"\nexternal rem : int -> int -> int = \"%modint\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nlet abs x = if x >= 0 then x else -x\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\nexternal logand : int -> int -> int = \"%andint\"\nexternal logor : int -> int -> int = \"%orint\"\nexternal logxor : int -> int -> int = \"%xorint\"\nlet lognot x = logxor x (-1)\nexternal shift_left : int -> int -> int = \"%lslint\"\nexternal shift_right : int -> int -> int = \"%asrint\"\nexternal shift_right_logical : int -> int -> int = \"%lsrint\"\nlet equal : int -> int -> bool = ( = )\nlet compare : int -> int -> int = Stdlib.compare\nlet min x y : t = if x <= y then x else y\nlet max x y : t = if x >= y then x else y\nexternal to_float : int -> float = \"%floatofint\"\nexternal of_float : float -> int = \"%intoffloat\"\n\n(*\nexternal int_of_string : string -> int = \"caml_int_of_string\"\nlet of_string s = try Some (int_of_string s) with Failure _ -> None\n*)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nlet to_string x = format_int \"%d\" x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\n(* addition with an overflow check *)\nlet (++) a b =\n  let c = a + b in\n  match a < 0, b < 0, c < 0 with\n  | true , true , false\n  | false, false, true  -> invalid_arg \"Bytes.extend\" (* overflow *)\n  | _ -> c\n\nlet extend s left right =\n  let len = length s ++ left ++ right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = Int.min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits\n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet unsafe_escape s =\n  (* We perform two passes on the input sequence, one to compute the\n     result size and one to write the result.\n\n     #11508, #11509: This logic would be incorrect in presence of\n     concurrent modification to the input, making the use of\n     [unsafe_set] below memory-unsafe.\n\n     Precondition: This function may be safely called on:\n     - an immutable byte sequence\n     - a uniquely-owned byte sequence (the function takes ownership)\n\n     In either case we return a uniquely-owned byte sequence.\n  *)\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then s\n  else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet escaped b =\n  let b = copy b in\n  (* We copy our input to obtain a uniquely-owned byte sequence [b]\n     to satisfy [unsafe_escape]'s precondition *)\n  unsafe_escape b\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p s =\n  let n = length s in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get s i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p s =\n  let n = length s in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get s i) then loop (succ i)\n    else false in\n  loop 0\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet starts_with ~prefix s =\n  let len_s = length s\n  and len_pre = length prefix in\n  let rec aux i =\n    if i = len_pre then true\n    else if unsafe_get s i <> unsafe_get prefix i then false\n    else aux (i + 1)\n  in len_s >= len_pre && aux 0\n\n(* duplicated in string.ml *)\nlet ends_with ~suffix s =\n  let len_s = length s\n  and len_suf = length suffix in\n  let diff = len_s - len_suf in\n  let rec aux i =\n    if i = len_suf then true\n    else if unsafe_get s (diff + i) <> unsafe_get suffix i then false\n    else aux (i + 1)\n  in diff >= 0 && aux 0\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\" [@@noalloc]\n\n(* duplicated in string.ml *)\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(** {1 Iterators} *)\n\nlet to_seq s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet of_seq i =\n  let n = ref 0 in\n  let buf = ref (make 256 '\\000') in\n  let resize () =\n    (* resize *)\n    let new_len = Int.min (2 * length !buf) Sys.max_string_length in\n    if length !buf = new_len then failwith \"Bytes.of_seq: cannot grow bytes\";\n    let new_buf = make new_len '\\000' in\n    blit !buf 0 new_buf 0 !n;\n    buf := new_buf\n  in\n  Seq.iter\n    (fun c ->\n       if !n = length !buf then resize();\n       set !buf !n c;\n       incr n)\n    i;\n  sub !buf 0 !n\n\n(** {6 Binary encoding/decoding of integers} *)\n\n(* The get_ functions are all duplicated in string.ml *)\n\nexternal unsafe_get_uint8 : bytes -> int -> int = \"%bytes_unsafe_get\"\nexternal unsafe_get_uint16_ne : bytes -> int -> int = \"%caml_bytes_get16u\"\nexternal get_uint8 : bytes -> int -> int = \"%bytes_safe_get\"\nexternal get_uint16_ne : bytes -> int -> int = \"%caml_bytes_get16\"\nexternal get_int32_ne : bytes -> int -> int32 = \"%caml_bytes_get32\"\nexternal get_int64_ne : bytes -> int -> int64 = \"%caml_bytes_get64\"\n\nexternal unsafe_set_uint8 : bytes -> int -> int -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_set_uint16_ne : bytes -> int -> int -> unit\n                              = \"%caml_bytes_set16u\"\nexternal set_int8 : bytes -> int -> int -> unit = \"%bytes_safe_set\"\nexternal set_int16_ne : bytes -> int -> int -> unit = \"%caml_bytes_set16\"\nexternal set_int32_ne : bytes -> int -> int32 -> unit = \"%caml_bytes_set32\"\nexternal set_int64_ne : bytes -> int -> int64 -> unit = \"%caml_bytes_set64\"\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\nlet unsafe_get_uint16_le b i =\n  if Sys.big_endian\n  then swap16 (unsafe_get_uint16_ne b i)\n  else unsafe_get_uint16_ne b i\n\nlet unsafe_get_uint16_be b i =\n  if Sys.big_endian\n  then unsafe_get_uint16_ne b i\n  else swap16 (unsafe_get_uint16_ne b i)\n\nlet get_int8 b i =\n  ((get_uint8 b i) lsl (Sys.int_size - 8)) asr (Sys.int_size - 8)\n\nlet get_uint16_le b i =\n  if Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_uint16_be b i =\n  if not Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_int16_ne b i =\n  ((get_uint16_ne b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_le b i =\n  ((get_uint16_le b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_be b i =\n  ((get_uint16_be b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int32_le b i =\n  if Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int32_be b i =\n  if not Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int64_le b i =\n  if Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet get_int64_be b i =\n  if not Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet unsafe_set_uint16_le b i x =\n  if Sys.big_endian\n  then unsafe_set_uint16_ne b i (swap16 x)\n  else unsafe_set_uint16_ne b i x\n\nlet unsafe_set_uint16_be b i x =\n  if Sys.big_endian\n  then unsafe_set_uint16_ne b i x else\n  unsafe_set_uint16_ne b i (swap16 x)\n\nlet set_int16_le b i x =\n  if Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int16_be b i x =\n  if not Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int32_le b i x =\n  if Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int32_be b i x =\n  if not Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int64_le b i x =\n  if Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_int64_be b i x =\n  if not Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_uint8 = set_int8\nlet set_uint16_ne = set_int16_ne\nlet set_uint16_be = set_int16_be\nlet set_uint16_le = set_int16_le\n\n(* UTF codecs and validations *)\n\nlet dec_invalid = Uchar.utf_decode_invalid\nlet[@inline] dec_ret n u = Uchar.utf_decode n (Uchar.unsafe_of_int u)\n\n(* In case of decoding error, if we error on the first byte, we\n   consume the byte, otherwise we consume the [n] bytes preceding\n   the erroring byte.\n\n   This means that if a client uses decodes without caring about\n   validity it naturally replace bogus data with Uchar.rep according\n   to the WHATWG Encoding standard. Other schemes are possible by\n   consulting the number of used bytes on invalid decodes. For more\n   details see https://hsivonen.fi/broken-utf-8/\n\n   For this reason in [get_utf_8_uchar] we gradually check the next\n   byte is available rather than doing it immediately after the\n   first byte. Contrast with [is_valid_utf_8]. *)\n\n(* UTF-8 *)\n\nlet[@inline] not_in_x80_to_xBF b = b lsr 6 <> 0b10\nlet[@inline] not_in_xA0_to_xBF b = b lsr 5 <> 0b101\nlet[@inline] not_in_x80_to_x9F b = b lsr 5 <> 0b100\nlet[@inline] not_in_x90_to_xBF b = b < 0x90 || 0xBF < b\nlet[@inline] not_in_x80_to_x8F b = b lsr 4 <> 0x8\n\nlet[@inline] utf_8_uchar_2 b0 b1 =\n  ((b0 land 0x1F) lsl 6) lor\n  ((b1 land 0x3F))\n\nlet[@inline] utf_8_uchar_3 b0 b1 b2 =\n  ((b0 land 0x0F) lsl 12) lor\n  ((b1 land 0x3F) lsl 6) lor\n  ((b2 land 0x3F))\n\nlet[@inline] utf_8_uchar_4 b0 b1 b2 b3 =\n  ((b0 land 0x07) lsl 18) lor\n  ((b1 land 0x3F) lsl 12) lor\n  ((b2 land 0x3F) lsl 6) lor\n  ((b3 land 0x3F))\n\nlet get_utf_8_uchar b i =\n  let b0 = get_uint8 b i in (* raises if [i] is not a valid index. *)\n  let get = unsafe_get_uint8 in\n  let max = length b - 1 in\n  match Char.unsafe_chr b0 with (* See The Unicode Standard, Table 3.7 *)\n  | '\\x00' .. '\\x7F' -> dec_ret 1 b0\n  | '\\xC2' .. '\\xDF' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      dec_ret 2 (utf_8_uchar_2 b0 b1)\n  | '\\xE0' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_xA0_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xE1' .. '\\xEC' | '\\xEE' .. '\\xEF' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xED' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_x9F b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xF0' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x90_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | '\\xF1' .. '\\xF3' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | '\\xF4' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_x8F b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | _ -> dec_invalid 1\n\nlet set_utf_8_uchar b i u =\n  let set = unsafe_set_uint8 in\n  let max = length b - 1 in\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0x007F ->\n      set_uint8 b i u;\n      1\n  | u when u <= 0x07FF ->\n      let last = i + 1 in\n      if last > max then 0 else\n      (set_uint8 b i (0xC0 lor (u lsr 6));\n       set b last (0x80 lor (u land 0x3F));\n       2)\n  | u when u <= 0xFFFF ->\n      let last = i + 2 in\n      if last > max then 0 else\n      (set_uint8 b i (0xE0 lor (u lsr 12));\n       set b (i + 1) (0x80 lor ((u lsr 6) land 0x3F));\n       set b last (0x80 lor (u land 0x3F));\n       3)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      (set_uint8 b i (0xF0 lor (u lsr 18));\n       set b (i + 1) (0x80 lor ((u lsr 12) land 0x3F));\n       set b (i + 2) (0x80 lor ((u lsr 6) land 0x3F));\n       set b last (0x80 lor (u land 0x3F));\n       4)\n  | _ -> assert false\n\nlet is_valid_utf_8 b =\n  let rec loop max b i =\n    if i > max then true else\n    let get = unsafe_get_uint8 in\n    match Char.unsafe_chr (get b i) with\n    | '\\x00' .. '\\x7F' -> loop max b (i + 1)\n    | '\\xC2' .. '\\xDF' ->\n        let last = i + 1 in\n        if last > max\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xE0' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_xA0_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xE1' .. '\\xEC' | '\\xEE' .. '\\xEF' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_x80_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xED' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_x80_to_x9F (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF0' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x90_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF1' .. '\\xF3' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x80_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF4' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x80_to_x8F (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | _ -> false\n  in\n  loop (length b - 1) b 0\n\n(* UTF-16BE *)\n\nlet get_utf_16be_uchar b i =\n  let get = unsafe_get_uint16_be in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  if i = max then dec_invalid 1 else\n  match get b i with\n  | u when u < 0xD800 || u > 0xDFFF -> dec_ret 2 u\n  | u when u > 0xDBFF -> dec_invalid 2\n  | hi -> (* combine [hi] with a low surrogate *)\n      let last = i + 3 in\n      if last > max then dec_invalid (max - i + 1) else\n      match get b (i + 2) with\n      | u when u < 0xDC00 || u > 0xDFFF -> dec_invalid 2 (* retry here *)\n      | lo ->\n          let u = (((hi land 0x3FF) lsl 10) lor (lo land 0x3FF)) + 0x10000 in\n          dec_ret 4 u\n\nlet set_utf_16be_uchar b i u =\n  let set = unsafe_set_uint16_be in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0xFFFF ->\n      let last = i + 1 in\n      if last > max then 0 else (set b i u; 2)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      let u' = u - 0x10000 in\n      let hi = (0xD800 lor (u' lsr 10)) in\n      let lo = (0xDC00 lor (u' land 0x3FF)) in\n      set b i hi; set b (i + 2) lo; 4\n  | _ -> assert false\n\nlet is_valid_utf_16be b =\n  let rec loop max b i =\n    let get = unsafe_get_uint16_be in\n    if i > max then true else\n    if i = max then false else\n    match get b i with\n    | u when u < 0xD800 || u > 0xDFFF -> loop max b (i + 2)\n    | u when u > 0xDBFF -> false\n    | _hi ->\n        let last = i + 3 in\n        if last > max then false else\n        match get b (i + 2) with\n        | u when u < 0xDC00 || u > 0xDFFF -> false\n        | _lo -> loop max b (i + 4)\n  in\n  loop (length b - 1) b 0\n\n(* UTF-16LE *)\n\nlet get_utf_16le_uchar b i =\n  let get = unsafe_get_uint16_le in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  if i = max then dec_invalid 1 else\n  match get b i with\n  | u when u < 0xD800 || u > 0xDFFF -> dec_ret 2 u\n  | u when u > 0xDBFF -> dec_invalid 2\n  | hi -> (* combine [hi] with a low surrogate *)\n      let last = i + 3 in\n      if last > max then dec_invalid (max - i + 1) else\n      match get b (i + 2) with\n      | u when u < 0xDC00 || u > 0xDFFF -> dec_invalid 2 (* retry here *)\n      | lo ->\n          let u = (((hi land 0x3FF) lsl 10) lor (lo land 0x3FF)) + 0x10000 in\n          dec_ret 4 u\n\nlet set_utf_16le_uchar b i u =\n  let set = unsafe_set_uint16_le in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0xFFFF ->\n      let last = i + 1 in\n      if last > max then 0 else (set b i u; 2)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      let u' = u - 0x10000 in\n      let hi = (0xD800 lor (u' lsr 10)) in\n      let lo = (0xDC00 lor (u' land 0x3FF)) in\n      set b i hi; set b (i + 2) lo; 4\n  | _ -> assert false\n\nlet is_valid_utf_16le b =\n  let rec loop max b i =\n    let get = unsafe_get_uint16_le in\n    if i > max then true else\n    if i = max then false else\n    match get b i with\n    | u when u < 0xD800 || u > 0xDFFF -> loop max b (i + 2)\n    | u when u > 0xDBFF -> false\n    | _hi ->\n        let last = i + 3 in\n        if last > max then false else\n        match get b (i + 2) with\n        | u when u < 0xDC00 || u > 0xDFFF -> false\n        | _lo -> loop max b (i + 4)\n  in\n  loop (length b - 1) b 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet empty = \"\"\nlet of_bytes = B.to_string\nlet to_bytes = B.of_string\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet blit =\n  B.blit_string\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits\n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat = ( ^ )\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\nlet fold_right f x a =\n  B.fold_right f (bos x) a\nlet fold_left f a x =\n  B.fold_left f a (bos x)\nlet exists f s =\n  B.exists f (bos s)\nlet for_all f s =\n  B.for_all f (bos s)\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let b = bos s in\n  (* We satisfy [unsafe_escape]'s precondition by passing an\n     immutable byte sequence [b]. *)\n  bts (B.unsafe_escape b)\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\n(* duplicated in bytes.ml *)\nlet starts_with ~prefix s =\n  let len_s = length s\n  and len_pre = length prefix in\n  let rec aux i =\n    if i = len_pre then true\n    else if unsafe_get s i <> unsafe_get prefix i then false\n    else aux (i + 1)\n  in len_s >= len_pre && aux 0\n\n(* duplicated in bytes.ml *)\nlet ends_with ~suffix s =\n  let len_s = length s\n  and len_suf = length suffix in\n  let diff = len_s - len_suf in\n  let rec aux i =\n    if i = len_suf then true\n    else if unsafe_get s (diff + i) <> unsafe_get suffix i then false\n    else aux (i + 1)\n  in diff >= 0 && aux 0\n\nexternal seeded_hash : int -> string -> int = \"caml_string_hash\" [@@noalloc]\nlet hash x = seeded_hash 0 x\n\n(* duplicated in bytes.ml *)\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\ntype t = string\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\" [@@noalloc]\n\n(** {1 Iterators} *)\n\nlet to_seq s = bos s |> B.to_seq\n\nlet to_seqi s = bos s |> B.to_seqi\n\nlet of_seq g = B.of_seq g |> bts\n\n(* UTF decoders and validators *)\n\nlet get_utf_8_uchar s i = B.get_utf_8_uchar (bos s) i\nlet is_valid_utf_8 s = B.is_valid_utf_8 (bos s)\n\nlet get_utf_16be_uchar s i = B.get_utf_16be_uchar (bos s) i\nlet is_valid_utf_16be s = B.is_valid_utf_16be (bos s)\n\nlet get_utf_16le_uchar s i = B.get_utf_16le_uchar (bos s) i\nlet is_valid_utf_16le s = B.is_valid_utf_16le (bos s)\n\n(** {6 Binary encoding/decoding of integers} *)\n\nexternal get_uint8 : string -> int -> int = \"%string_safe_get\"\nexternal get_uint16_ne : string -> int -> int = \"%caml_string_get16\"\nexternal get_int32_ne : string -> int -> int32 = \"%caml_string_get32\"\nexternal get_int64_ne : string -> int -> int64 = \"%caml_string_get64\"\n\nlet get_int8 s i = B.get_int8 (bos s) i\nlet get_uint16_le s i = B.get_uint16_le (bos s) i\nlet get_uint16_be s i = B.get_uint16_be (bos s) i\nlet get_int16_ne s i = B.get_int16_ne (bos s) i\nlet get_int16_le s i = B.get_int16_le (bos s) i\nlet get_int16_be s i = B.get_int16_be (bos s) i\nlet get_int32_le s i = B.get_int32_le (bos s) i\nlet get_int32_be s i = B.get_int32_be (bos s) i\nlet get_int64_le s i = B.get_int64_le (bos s) i\nlet get_int64_be s i = B.get_int64_be (bos s) i\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                 Simon Cruanes                                          *)\n(*                                                                        *)\n(*   Copyright 2017 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Seq]: functional iterators *)\n\ntype +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\nand 'a t = unit -> 'a node\n\nlet empty () = Nil\n\nlet return x () = Cons (x, empty)\n\nlet cons x next () = Cons (x, next)\n\nlet rec append seq1 seq2 () =\n  match seq1() with\n  | Nil -> seq2()\n  | Cons (x, next) -> Cons (x, append next seq2)\n\nlet rec map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) -> Cons (f x, map f next)\n\nlet rec filter_map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      match f x with\n        | None -> filter_map f next ()\n        | Some y -> Cons (y, filter_map f next)\n\nlet rec filter f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      if f x\n      then Cons (x, filter f next)\n      else filter f next ()\n\nlet rec concat seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n     append x (concat next) ()\n\nlet rec flat_map f seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n    append (f x) (flat_map f next) ()\n\nlet concat_map = flat_map\n\nlet rec fold_left f acc seq =\n  match seq () with\n    | Nil -> acc\n    | Cons (x, next) ->\n        let acc = f acc x in\n        fold_left f acc next\n\nlet rec iter f seq =\n  match seq () with\n    | Nil -> ()\n    | Cons (x, next) ->\n        f x;\n        iter f next\n\nlet rec unfold f u () =\n  match f u with\n  | None -> Nil\n  | Some (x, u') -> Cons (x, unfold f u')\n\nlet is_empty xs =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (_, _) ->\n      false\n\nlet uncons xs =\n  match xs() with\n  | Cons (x, xs) ->\n      Some (x, xs)\n  | Nil ->\n      None\n\n\n\nlet rec length_aux accu xs =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (_, xs) ->\n      length_aux (accu + 1) xs\n\nlet[@inline] length xs =\n  length_aux 0 xs\n\nlet rec iteri_aux f i xs =\n  match xs() with\n  | Nil ->\n      ()\n  | Cons (x, xs) ->\n      f i x;\n      iteri_aux f (i+1) xs\n\nlet[@inline] iteri f xs =\n  iteri_aux f 0 xs\n\nlet rec fold_lefti_aux f accu i xs =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (x, xs) ->\n      let accu = f accu i x in\n      fold_lefti_aux f accu (i+1) xs\n\nlet[@inline] fold_lefti f accu xs =\n  fold_lefti_aux f accu 0 xs\n\nlet rec for_all p xs =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (x, xs) ->\n      p x && for_all p xs\n\nlet rec exists p xs =\n  match xs() with\n  | Nil ->\n      false\n  | Cons (x, xs) ->\n      p x || exists p xs\n\nlet rec find p xs =\n  match xs() with\n  | Nil ->\n      None\n  | Cons (x, xs) ->\n      if p x then Some x else find p xs\n\nlet rec find_map f xs =\n  match xs() with\n  | Nil ->\n      None\n  | Cons (x, xs) ->\n      match f x with\n      | None ->\n          find_map f xs\n      | Some _ as result ->\n          result\n\n(* [iter2], [fold_left2], [for_all2], [exists2], [map2], [zip] work also in\n   the case where the two sequences have different lengths. They stop as soon\n   as one sequence is exhausted. Their behavior is slightly asymmetric: when\n   [xs] is empty, they do not force [ys]; however, when [ys] is empty, [xs] is\n   forced, even though the result of the function application [xs()] turns out\n   to be useless. *)\n\nlet rec iter2 f xs ys =\n  match xs() with\n  | Nil ->\n      ()\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          ()\n      | Cons (y, ys) ->\n          f x y;\n          iter2 f xs ys\n\nlet rec fold_left2 f accu xs ys =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          accu\n      | Cons (y, ys) ->\n          let accu = f accu x y in\n          fold_left2 f accu xs ys\n\nlet rec for_all2 f xs ys =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          true\n      | Cons (y, ys) ->\n          f x y && for_all2 f xs ys\n\nlet rec exists2 f xs ys =\n  match xs() with\n  | Nil ->\n      false\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          false\n      | Cons (y, ys) ->\n          f x y || exists2 f xs ys\n\nlet rec equal eq xs ys =\n  match xs(), ys() with\n  | Nil, Nil ->\n      true\n  | Cons (x, xs), Cons (y, ys) ->\n      eq x y && equal eq xs ys\n  | Nil, Cons (_, _)\n  | Cons (_, _), Nil ->\n      false\n\nlet rec compare cmp xs ys =\n  match xs(), ys() with\n  | Nil, Nil ->\n      0\n  | Cons (x, xs), Cons (y, ys) ->\n      let c = cmp x y in\n      if c <> 0 then c else compare cmp xs ys\n  | Nil, Cons (_, _) ->\n      -1\n  | Cons (_, _), Nil ->\n      +1\n\n\n\n(* [init_aux f i j] is the sequence [f i, ..., f (j-1)]. *)\n\nlet rec init_aux f i j () =\n  if i < j then begin\n    Cons (f i, init_aux f (i + 1) j)\n  end\n  else\n    Nil\n\nlet init n f =\n  if n < 0 then\n    invalid_arg \"Seq.init\"\n  else\n    init_aux f 0 n\n\nlet rec repeat x () =\n  Cons (x, repeat x)\n\nlet rec forever f () =\n  Cons (f(), forever f)\n\n(* This preliminary definition of [cycle] requires the sequence [xs]\n   to be nonempty. Applying it to an empty sequence would produce a\n   sequence that diverges when it is forced. *)\n\nlet rec cycle_nonempty xs () =\n  append xs (cycle_nonempty xs) ()\n\n(* [cycle xs] checks whether [xs] is empty and, if so, returns an empty\n   sequence. Otherwise, [cycle xs] produces one copy of [xs] followed\n   with the infinite sequence [cycle_nonempty xs]. Thus, the nonemptiness\n   check is performed just once. *)\n\nlet cycle xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs') ->\n      Cons (x, append xs' (cycle_nonempty xs))\n\n(* [iterate1 f x] is the sequence [f x, f (f x), ...].\n   It is equivalent to [tail (iterate f x)].\n   [iterate1] is used as a building block in the definition of [iterate]. *)\n\nlet rec iterate1 f x () =\n  let y = f x in\n  Cons (y, iterate1 f y)\n\n(* [iterate f x] is the sequence [x, f x, ...]. *)\n\n(* The reason why we give this slightly indirect definition of [iterate],\n   as opposed to the more naive definition that may come to mind, is that\n   we are careful to avoid evaluating [f x] until this function call is\n   actually necessary. The naive definition (not shown here) computes the\n   second argument of the sequence, [f x], when the first argument is\n   requested by the user. *)\n\nlet iterate f x =\n  cons x (iterate1 f x)\n\n\n\nlet rec mapi_aux f i xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      Cons (f i x, mapi_aux f (i+1) xs)\n\nlet[@inline] mapi f xs =\n  mapi_aux f 0 xs\n\n(* [tail_scan f s xs] is equivalent to [tail (scan f s xs)].\n   [tail_scan] is used as a building block in the definition of [scan]. *)\n\n(* This slightly indirect definition of [scan] is meant to avoid computing\n   elements too early; see the above comment about [iterate1] and [iterate]. *)\n\nlet rec tail_scan f s xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      let s = f s x in\n      Cons (s, tail_scan f s xs)\n\nlet scan f s xs =\n  cons s (tail_scan f s xs)\n\n(* [take] is defined in such a way that [take 0 xs] returns [empty]\n   immediately, without allocating any memory. *)\n\nlet rec take_aux n xs =\n  if n = 0 then\n    empty\n  else\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (x, take_aux (n-1) xs)\n\nlet take n xs =\n  if n < 0 then invalid_arg \"Seq.take\";\n  take_aux n xs\n\n(* [force_drop n xs] is equivalent to [drop n xs ()].\n   [force_drop n xs] requires [n > 0].\n   [force_drop] is used as a building block in the definition of [drop]. *)\n\nlet rec force_drop n xs =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (_, xs) ->\n      let n = n - 1 in\n      if n = 0 then\n        xs()\n      else\n        force_drop n xs\n\n(* [drop] is defined in such a way that [drop 0 xs] returns [xs] immediately,\n   without allocating any memory. *)\n\nlet drop n xs =\n  if n < 0 then invalid_arg \"Seq.drop\"\n  else if n = 0 then\n    xs\n  else\n    fun () ->\n      force_drop n xs\n\nlet rec take_while p xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      if p x then Cons (x, take_while p xs) else Nil\n\nlet rec drop_while p xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) as node ->\n      if p x then drop_while p xs () else node\n\nlet rec group eq xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      Cons (cons x (take_while (eq x) xs), group eq (drop_while (eq x) xs))\n\nexception Forced_twice\n\nmodule Suspension = struct\n\n  type 'a suspension =\n    unit -> 'a\n\n  (* Conversions. *)\n\n  let to_lazy : 'a suspension -> 'a Lazy.t =\n    Lazy.from_fun\n    (* fun s -> lazy (s()) *)\n\n  let from_lazy (s : 'a Lazy.t) : 'a suspension =\n    fun () -> Lazy.force s\n\n  (* [memoize] turns an arbitrary suspension into a persistent suspension. *)\n\n  let memoize (s : 'a suspension) : 'a suspension =\n    from_lazy (to_lazy s)\n\n  (* [failure] is a suspension that fails when forced. *)\n\n  let failure : _ suspension =\n    fun () ->\n      (* A suspension created by [once] has been forced twice. *)\n      raise Forced_twice\n\n  (* If [f] is a suspension, then [once f] is a suspension that can be forced\n     at most once. If it is forced more than once, then [Forced_twice] is\n     raised. *)\n\n  let once (f : 'a suspension) : 'a suspension =\n    let action = Atomic.make f in\n    fun () ->\n      (* Get the function currently stored in [action], and write the\n         function [failure] in its place, so the next access will result\n         in a call to [failure()]. *)\n      let f = Atomic.exchange action failure in\n      f()\n\nend (* Suspension *)\n\nlet rec memoize xs =\n  Suspension.memoize (fun () ->\n    match xs() with\n    | Nil ->\n        Nil\n    | Cons (x, xs) ->\n        Cons (x, memoize xs)\n  )\n\nlet rec once xs =\n  Suspension.once (fun () ->\n    match xs() with\n    | Nil ->\n        Nil\n    | Cons (x, xs) ->\n        Cons (x, once xs)\n  )\n\n\nlet rec zip xs ys () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          Nil\n      | Cons (y, ys) ->\n          Cons ((x, y), zip xs ys)\n\nlet rec map2 f xs ys () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          Nil\n      | Cons (y, ys) ->\n          Cons (f x y, map2 f xs ys)\n\nlet rec interleave xs ys () =\n  match xs() with\n  | Nil ->\n      ys()\n  | Cons (x, xs) ->\n      Cons (x, interleave ys xs)\n\n(* [sorted_merge1l cmp x xs ys] is equivalent to\n     [sorted_merge cmp (cons x xs) ys].\n\n   [sorted_merge1r cmp xs y ys] is equivalent to\n     [sorted_merge cmp xs (cons y ys)].\n\n   [sorted_merge1 cmp x xs y ys] is equivalent to\n     [sorted_merge cmp (cons x xs) (cons y ys)].\n\n   These three functions are used as building blocks in the definition\n   of [sorted_merge]. *)\n\nlet rec sorted_merge1l cmp x xs ys () =\n  match ys() with\n  | Nil ->\n      Cons (x, xs)\n  | Cons (y, ys) ->\n      sorted_merge1 cmp x xs y ys\n\nand sorted_merge1r cmp xs y ys () =\n  match xs() with\n  | Nil ->\n      Cons (y, ys)\n  | Cons (x, xs) ->\n      sorted_merge1 cmp x xs y ys\n\nand sorted_merge1 cmp x xs y ys =\n  if cmp x y <= 0 then\n    Cons (x, sorted_merge1r cmp xs y ys)\n  else\n    Cons (y, sorted_merge1l cmp x xs ys)\n\nlet sorted_merge cmp xs ys () =\n  match xs(), ys() with\n    | Nil, Nil ->\n        Nil\n    | Nil, c\n    | c, Nil ->\n        c\n    | Cons (x, xs), Cons (y, ys) ->\n        sorted_merge1 cmp x xs y ys\n\n\nlet rec map_fst xys () =\n  match xys() with\n  | Nil ->\n      Nil\n  | Cons ((x, _), xys) ->\n      Cons (x, map_fst xys)\n\nlet rec map_snd xys () =\n  match xys() with\n  | Nil ->\n      Nil\n  | Cons ((_, y), xys) ->\n      Cons (y, map_snd xys)\n\nlet unzip xys =\n  map_fst xys, map_snd xys\n\nlet split =\n  unzip\n\n(* [filter_map_find_left_map f xs] is equivalent to\n   [filter_map Either.find_left (map f xs)]. *)\n\nlet rec filter_map_find_left_map f xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match f x with\n      | Either.Left y ->\n          Cons (y, filter_map_find_left_map f xs)\n      | Either.Right _ ->\n          filter_map_find_left_map f xs ()\n\nlet rec filter_map_find_right_map f xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match f x with\n      | Either.Left _ ->\n          filter_map_find_right_map f xs ()\n      | Either.Right z ->\n          Cons (z, filter_map_find_right_map f xs)\n\nlet partition_map f xs =\n  filter_map_find_left_map f xs,\n  filter_map_find_right_map f xs\n\nlet partition p xs =\n  filter p xs, filter (fun x -> not (p x)) xs\n\n(* If [xss] is a matrix (a sequence of rows), then [peel xss] is a pair of\n   the first column (a sequence of elements) and of the remainder of the\n   matrix (a sequence of shorter rows). These two sequences have the same\n   length. The rows of the matrix [xss] are not required to have the same\n   length. An empty row is ignored. *)\n\n(* Because [peel] uses [unzip], its argument must be persistent. The same\n   remark applies to [transpose], [diagonals], [product], etc. *)\n\nlet peel xss =\n  unzip (filter_map uncons xss)\n\nlet rec transpose xss () =\n  let heads, tails = peel xss in\n  if is_empty heads then begin\n    assert (is_empty tails);\n    Nil\n  end\n  else\n    Cons (heads, transpose tails)\n\n(* The internal function [diagonals] takes an extra argument, [remainders],\n   which contains the remainders of the rows that have already been\n   discovered. *)\n\nlet rec diagonals remainders xss () =\n  match xss() with\n  | Cons (xs, xss) ->\n      begin match xs() with\n      | Cons (x, xs) ->\n          (* We discover a new nonempty row [x :: xs]. Thus, the next diagonal\n             is [x :: heads]: this diagonal begins with [x] and continues with\n             the first element of every row in [remainders]. In the recursive\n             call, the argument [remainders] is instantiated with [xs ::\n             tails], which means that we have one more remaining row, [xs],\n             and that we keep the tails of the pre-existing remaining rows. *)\n          let heads, tails = peel remainders in\n          Cons (cons x heads, diagonals (cons xs tails) xss)\n      | Nil ->\n          (* We discover a new empty row. In this case, the new diagonal is\n             just [heads], and [remainders] is instantiated with just [tails],\n             as we do not have one more remaining row. *)\n          let heads, tails = peel remainders in\n          Cons (heads, diagonals tails xss)\n      end\n  | Nil ->\n      (* There are no more rows to be discovered. There remains to exhaust\n         the remaining rows. *)\n      transpose remainders ()\n\n(* If [xss] is a matrix (a sequence of rows), then [diagonals xss] is\n   the sequence of its diagonals.\n\n   The first diagonal contains just the first element of the\n   first row. The second diagonal contains the first element of the\n   second row and the second element of the first row; and so on.\n   This kind of diagonal is in fact sometimes known as an antidiagonal.\n\n   - Every diagonal is a finite sequence.\n   - The rows of the matrix [xss] are not required to have the same length.\n   - The matrix [xss] is not required to be finite (in either direction).\n   - The matrix [xss] must be persistent. *)\n\nlet diagonals xss =\n  diagonals empty xss\n\nlet map_product f xs ys =\n  concat (diagonals (\n    map (fun x ->\n      map (fun y ->\n        f x y\n      ) ys\n    ) xs\n  ))\n\nlet product xs ys =\n  map_product (fun x y -> (x, y)) xs ys\n\nlet of_dispenser it =\n  let rec c () =\n    match it() with\n    | None ->\n        Nil\n    | Some x ->\n        Cons (x, c)\n  in\n  c\n\nlet to_dispenser xs =\n  let s = ref xs in\n  fun () ->\n    match (!s)() with\n    | Nil ->\n        None\n    | Cons (x, xs) ->\n        s := xs;\n        Some x\n\n\n\nlet rec ints i () =\n  Cons (i, ints (i + 1))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\n(* The [inner_buffer] type ensures that the [length] and [buffer] fields are\n   always synchronized, [length = Bytes.length buffer], even in presence\n   of data races.\n*)\ntype inner_buffer = {\n  buffer: bytes;\n  length: int;\n}\n\ntype t =\n {mutable inner : inner_buffer;\n  mutable position : int;\n  initial_buffer : bytes}\n(* Invariants: all parts of the code preserve the invariants that:\n   - [inner.length = Bytes.length inner.buffer]\n   In absence of data races, we also have\n   - [0 <= b.position <= b.inner.length]\n\n   Note in particular that [b.position = b.inner.length] is legal,\n   it means that the buffer is full and will have to be extended\n   before any further addition. *)\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n { inner = { buffer = s; length = n}; position = 0; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.inner.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.inner.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.inner.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.blit src.inner.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  let position = b.position in\n  let {buffer;length} = b.inner in\n  if ofs < 0 || ofs >= position || position > length then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0;\n  let inner =\n    { buffer = b.initial_buffer; length = Bytes.length b.initial_buffer }\n  in\n  b.inner <- inner\n\n(* [resize b more] ensures that [b.position + more <= b.inner.length] holds\n   by dynamically extending [b.inner] if necessary -- and thus\n   increasing [b.inner.length].\n*)\nlet resize b more =\n  let old_pos = b.position in\n  let old_len = b.inner.length in\n  let new_len = ref old_len in\n  while old_pos + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if old_pos + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.inner.buffer 0 new_buffer 0 b.position;\n  b.inner <- { buffer = new_buffer; length = !new_len }\n\n(* Note:\n    Some of the functions below have a fast path when the inner\n  buffer doesn't need to be extended.\n    In this case, it is possible to use unsafe accesses on the\n  contents of the [inner] field since its fields are immutable.\n  In presence of data races, we may access the wrong inner buffer, but we\n  will use this buffer safely.\n  As soon as we need to resize the buffer, we fall back to safe accesses.\n*)\n\nlet add_char b c =\n  let pos = b.position in\n  let {buffer;length} = b.inner in\n  if pos >= length then (\n    resize b 1;\n    Bytes.set b.inner.buffer b.position c\n  ) else\n    Bytes.unsafe_set buffer pos c;\n  b.position <- pos + 1\n\nlet uchar_utf_8_byte_length_max = 4\nlet uchar_utf_16_byte_length_max = 4\n\nlet rec add_utf_8_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_8_byte_length_max;\n  let n = Bytes.set_utf_8_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_8_byte_length_max; add_utf_8_uchar b u)\n  else (b.position <- pos + n)\n\nlet rec add_utf_16be_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_16_byte_length_max;\n  let n = Bytes.set_utf_16be_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_16_byte_length_max; add_utf_16be_uchar b u)\n  else (b.position <- pos + n)\n\nlet rec add_utf_16le_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_16_byte_length_max;\n  let n = Bytes.set_utf_16le_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_16_byte_length_max; add_utf_16le_uchar b u)\n  else (b.position <- pos + n)\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let position = b.position in\n  let {buffer;length} = b.inner in\n  let new_position = position + len in\n  if new_position > length then (\n    resize b len;\n    Bytes.blit_string s offset b.inner.buffer b.position len\n  ) else\n    Bytes.unsafe_blit_string s offset buffer position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let position = b.position in\n  let {buffer; length} = b.inner in\n  let new_position = b.position + len in\n  if new_position > length then (\n    resize b len;\n    Bytes.blit_string s 0 b.inner.buffer b.position len;\n  ) else\n    Bytes.unsafe_blit_string s 0 buffer position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.inner.buffer 0 bs.position\n\n(* this (private) function could move into the standard library *)\nlet really_input_up_to ic buf ofs len =\n  let rec loop ic buf ~already_read ~ofs ~to_read =\n    if to_read = 0 then already_read\n    else begin\n      let r = input ic buf ofs to_read in\n      if r = 0 then already_read\n      else begin\n        let already_read = already_read + r in\n        let ofs = ofs + r in\n        let to_read = to_read - r in\n        loop ic buf ~already_read ~ofs ~to_read\n      end\n    end\n  in loop ic buf ~already_read:0 ~ofs ~to_read:len\n\n\nlet unsafe_add_channel_up_to b ic len =\n  if b.position + len > b.inner.length then resize b len;\n  let n = really_input_up_to ic b.inner.buffer b.position len in\n  b.position <- b.position + n;\n  n\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  let n = unsafe_add_channel_up_to b ic len in\n  (* It is intentional that a consumer catching End_of_file\n     will see the data written (see #6719, #7136). *)\n  if n < len then raise End_of_file;\n  ()\n\nlet output_buffer oc b =\n  output oc b.inner.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n\nlet truncate b len =\n    if len < 0 || len > length b then\n      invalid_arg \"Buffer.truncate\"\n    else\n      b.position <- len\n\n(** {1 Iterators} *)\n\nlet to_seq b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.inner.buffer i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.inner.buffer i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet add_seq b seq = Seq.iter (add_char b) seq\n\nlet of_seq i =\n  let b = create 32 in\n  add_seq b i;\n  b\n\n(** {6 Binary encoding of integers} *)\n\nexternal unsafe_set_int8 : bytes -> int -> int -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_set_int16 : bytes -> int -> int -> unit = \"%caml_bytes_set16u\"\nexternal unsafe_set_int32 : bytes -> int -> int32 -> unit = \"%caml_bytes_set32u\"\nexternal unsafe_set_int64 : bytes -> int -> int64 -> unit = \"%caml_bytes_set64u\"\nexternal set_int8 : bytes -> int -> int -> unit = \"%bytes_safe_set\"\nexternal set_int16 : bytes -> int -> int -> unit = \"%caml_bytes_set16\"\nexternal set_int32 : bytes -> int -> int32 -> unit = \"%caml_bytes_set32\"\nexternal set_int64 : bytes -> int -> int64 -> unit = \"%caml_bytes_set64\"\n\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\n\nlet add_int8 b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 1 in\n  if new_position > length then (\n    resize b 1;\n    set_int8 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int8 buffer position x;\n  b.position <- new_position\n\nlet add_int16_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 2 in\n  if new_position > length then (\n    resize b 2;\n    set_int16 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int16 buffer position x;\n  b.position <- new_position\n\nlet add_int32_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 4 in\n  if new_position > length then (\n    resize b 4;\n    set_int32 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int32 buffer position x;\n  b.position <- new_position\n\nlet add_int64_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 8 in\n  if new_position > length then (\n    resize b 8;\n    set_int64 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int64 buffer position x;\n  b.position <- new_position\n\nlet add_int16_le b x =\n  add_int16_ne b (if Sys.big_endian then swap16 x else x)\n\nlet add_int16_be b x =\n  add_int16_ne b (if Sys.big_endian then x else swap16 x)\n\nlet add_int32_le b x =\n  add_int32_ne b (if Sys.big_endian then swap32 x else x)\n\nlet add_int32_be b x =\n  add_int32_ne b (if Sys.big_endian then x else swap32 x)\n\nlet add_int64_le b x =\n  add_int64_ne b (if Sys.big_endian then swap64 x else x)\n\nlet add_int64_be b x =\n  add_int64_ne b (if Sys.big_endian then x else swap64 x)\n\nlet add_uint8 = add_int8\nlet add_uint16_ne = add_int16_ne\nlet add_uint16_le = add_int16_le\nlet add_uint16_be = add_int16_be\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*      KC Sivaramakrishnan, Indian Institute of Technology, Madras       *)\n(*                 Stephen Dolan, University of Cambridge                 *)\n(*                   Tom Kelly, OCaml Labs Consultancy                    *)\n(*                                                                        *)\n(*   Copyright 2019 Indian Institute of Technology, Madras                *)\n(*   Copyright 2014 University of Cambridge                               *)\n(*   Copyright 2021 OCaml Labs Consultancy Ltd                            *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule Raw = struct\n  (* Low-level primitives provided by the runtime *)\n  type t = private int\n  external spawn : (unit -> unit) -> Mutex.t -> t\n    = \"caml_domain_spawn\"\n  external self : unit -> t\n    = \"caml_ml_domain_id\"\n  external cpu_relax : unit -> unit\n    = \"caml_ml_domain_cpu_relax\"\n  external get_recommended_domain_count: unit -> int\n    = \"caml_recommended_domain_count\" [@@noalloc]\nend\n\nlet cpu_relax () = Raw.cpu_relax ()\n\ntype id = Raw.t\n\ntype 'a state =\n| Running\n| Finished of ('a, exn) result\n\ntype 'a t = {\n  domain : Raw.t;\n  term_mutex: Mutex.t;\n  term_condition: Condition.t;\n  term_state: 'a state ref (* protected by [term_mutex] *)\n}\n\nmodule DLS = struct\n\n  type dls_state = Obj.t array\n\n  let unique_value = Obj.repr (ref 0)\n\n  external get_dls_state : unit -> dls_state = \"%dls_get\"\n\n  external set_dls_state : dls_state -> unit =\n    \"caml_domain_dls_set\" [@@noalloc]\n\n  let create_dls () =\n    let st = Array.make 8 unique_value in\n    set_dls_state st\n\n  let _ = create_dls ()\n\n  type 'a key = int * (unit -> 'a)\n\n  let key_counter = Atomic.make 0\n\n  type key_initializer =\n    KI: 'a key * ('a -> 'a) -> key_initializer\n\n  let parent_keys = Atomic.make ([] : key_initializer list)\n\n  let rec add_parent_key ki =\n    let l = Atomic.get parent_keys in\n    if not (Atomic.compare_and_set parent_keys l (ki :: l))\n    then add_parent_key ki\n\n  let new_key ?split_from_parent init_orphan =\n    let idx = Atomic.fetch_and_add key_counter 1 in\n    let k = (idx, init_orphan) in\n    begin match split_from_parent with\n    | None -> ()\n    | Some split -> add_parent_key (KI(k, split))\n    end;\n    k\n\n  (* If necessary, grow the current domain's local state array such that [idx]\n   * is a valid index in the array. *)\n  let maybe_grow idx =\n    let st = get_dls_state () in\n    let sz = Array.length st in\n    if idx < sz then st\n    else begin\n      let rec compute_new_size s =\n        if idx < s then s else compute_new_size (2 * s)\n      in\n      let new_sz = compute_new_size sz in\n      let new_st = Array.make new_sz unique_value in\n      Array.blit st 0 new_st 0 sz;\n      set_dls_state new_st;\n      new_st\n    end\n\n  let set (idx, _init) x =\n    let st = maybe_grow idx in\n    (* [Sys.opaque_identity] ensures that flambda does not look at the type of\n     * [x], which may be a [float] and conclude that the [st] is a float array.\n     * We do not want OCaml's float array optimisation kicking in here. *)\n    st.(idx) <- Obj.repr (Sys.opaque_identity x)\n\n  let get (idx, init) =\n    let st = maybe_grow idx in\n    let v = st.(idx) in\n    if v == unique_value then\n      let v' = Obj.repr (init ()) in\n      st.(idx) <- (Sys.opaque_identity v');\n      Obj.magic v'\n    else Obj.magic v\n\n  let get_initial_keys () : (int * Obj.t) list =\n    List.map\n      (fun (KI ((idx, _) as k, split)) ->\n           (idx, Obj.repr (split (get k))))\n      (Atomic.get parent_keys)\n\n  let set_initial_keys (l: (int * Obj.t) list) =\n    List.iter\n      (fun (idx, v) ->\n        let st = maybe_grow idx in st.(idx) <- v)\n      l\n\nend\n\n(******** Identity **********)\n\nlet get_id { domain; _ } = domain\n\nlet self () = Raw.self ()\n\nlet is_main_domain () = (self () :> int) = 0\n\n(******** Callbacks **********)\n\n(* first spawn, domain startup and at exit functionality *)\nlet first_domain_spawned = Atomic.make false\n\nlet first_spawn_function = ref (fun () -> ())\n\nlet before_first_spawn f =\n  if Atomic.get first_domain_spawned then\n    raise (Invalid_argument \"first domain already spawned\")\n  else begin\n    let old_f = !first_spawn_function in\n    let new_f () = old_f (); f () in\n    first_spawn_function := new_f\n  end\n\nlet do_before_first_spawn () =\n  if not (Atomic.get first_domain_spawned) then begin\n    Atomic.set first_domain_spawned true;\n    !first_spawn_function();\n    (* Release the old function *)\n    first_spawn_function := (fun () -> ())\n  end\n\nlet at_exit_key = DLS.new_key (fun () -> (fun () -> ()))\n\nlet at_exit f =\n  let old_exit : unit -> unit = DLS.get at_exit_key in\n  let new_exit () =\n    (* The domain termination callbacks ([at_exit]) are run in\n       last-in-first-out (LIFO) order in order to be symmetric with the domain\n       creation callbacks ([at_each_spawn]) which run in first-in-fisrt-out\n       (FIFO) order. *)\n    f (); old_exit ()\n  in\n  DLS.set at_exit_key new_exit\n\nlet do_at_exit () =\n  let f : unit -> unit = DLS.get at_exit_key in\n  f ()\n\nlet _ = Stdlib.do_domain_local_at_exit := do_at_exit\n\n(******* Creation and Termination ********)\n\nlet spawn f =\n  do_before_first_spawn ();\n  let pk = DLS.get_initial_keys () in\n\n  (* The [term_mutex] and [term_condition] are used to\n     synchronize with the joining domains *)\n  let term_mutex = Mutex.create () in\n  let term_condition = Condition.create () in\n  let term_state = ref Running in\n\n  let body () =\n    let result =\n      match\n        DLS.create_dls ();\n        DLS.set_initial_keys pk;\n        let res = f () in\n        res\n      with\n      | x -> Ok x\n      | exception ex -> Error ex\n    in\n\n    let result' =\n      (* Run the [at_exit] callbacks when the domain computation either\n         terminates normally or exceptionally. *)\n      match do_at_exit () with\n      | () -> result\n      | exception ex ->\n          begin match result with\n          | Ok _ ->\n              (* If the domain computation terminated normally, but the\n                 [at_exit] callbacks raised an exception, then return the\n                 exception. *)\n              Error ex\n          | Error _ ->\n              (* If both the domain computation and the [at_exit] callbacks\n                 raised exceptions, then ignore the exception from the\n                 [at_exit] callbacks and return the original exception. *)\n              result\n          end\n    in\n\n    (* Synchronize with joining domains *)\n    Mutex.lock term_mutex;\n    match !term_state with\n    | Running ->\n        term_state := Finished result';\n        Condition.broadcast term_condition;\n    | Finished _ ->\n        failwith \"internal error: Am I already finished?\"\n    (* [term_mutex] is unlocked in the runtime after the cleanup functions on\n       the C side are finished. *)\n  in\n  { domain = Raw.spawn body term_mutex;\n    term_mutex;\n    term_condition;\n    term_state }\n\nlet join { term_mutex; term_condition; term_state; _ } =\n  Mutex.lock term_mutex;\n  let rec loop () =\n    match !term_state with\n    | Running ->\n        Condition.wait term_condition term_mutex;\n        loop ()\n    | Finished res ->\n        Mutex.unlock term_mutex;\n        res\n  in\n  match loop () with\n  | Ok x -> x\n  | Error ex -> raise ex\n\nlet recommended_domain_count = Raw.get_recommended_domain_count\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of arrays. *)\ntype 'a t = 'a array\n\n(* Array operations *)\n\nexternal length : 'a array -> int = \"%array_length\"\nexternal get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nexternal unsafe_get: 'a array -> int -> 'a = \"%array_unsafe_get\"\nexternal unsafe_set: 'a array -> int -> 'a -> unit = \"%array_unsafe_set\"\nexternal make: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal create: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal unsafe_sub : 'a array -> int -> int -> 'a array = \"caml_array_sub\"\nexternal append_prim : 'a array -> 'a array -> 'a array = \"caml_array_append\"\nexternal concat : 'a array list -> 'a array = \"caml_array_concat\"\nexternal unsafe_blit :\n  'a array -> int -> 'a array -> int -> int -> unit = \"caml_array_blit\"\nexternal unsafe_fill :\n  'a array -> int -> int -> 'a -> unit = \"caml_array_fill\"\nexternal create_float: int -> float array = \"caml_make_float_vect\"\n\nmodule Floatarray = struct\n  external create : int -> floatarray = \"caml_floatarray_create\"\n  external length : floatarray -> int = \"%floatarray_length\"\n  external get : floatarray -> int -> float = \"%floatarray_safe_get\"\n  external set : floatarray -> int -> float -> unit = \"%floatarray_safe_set\"\n  external unsafe_get : floatarray -> int -> float = \"%floatarray_unsafe_get\"\n  external unsafe_set : floatarray -> int -> float -> unit\n      = \"%floatarray_unsafe_set\"\nend\n\nlet init l f =\n  if l = 0 then [||] else\n  if l < 0 then invalid_arg \"Array.init\"\n  (* See #6575. We could also check for maximum array size, but this depends\n     on whether we create a float array or a regular one... *)\n  else\n   let res = create l (f 0) in\n   for i = 1 to pred l do\n     unsafe_set res i (f i)\n   done;\n   res\n\nlet make_matrix sx sy init =\n  let res = create sx [||] in\n  for x = 0 to pred sx do\n    unsafe_set res x (create sy init)\n  done;\n  res\n\nlet copy a =\n  let l = length a in if l = 0 then [||] else unsafe_sub a 0 l\n\nlet append a1 a2 =\n  let l1 = length a1 in\n  if l1 = 0 then copy a2\n  else if length a2 = 0 then unsafe_sub a1 0 l1\n  else append_prim a1 a2\n\nlet sub a ofs len =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.sub\"\n  else unsafe_sub a ofs len\n\nlet fill a ofs len v =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.fill\"\n  else unsafe_fill a ofs len v\n\nlet blit a1 ofs1 a2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len\n             || ofs2 < 0 || ofs2 > length a2 - len\n  then invalid_arg \"Array.blit\"\n  else unsafe_blit a1 ofs1 a2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet iter2 f a b =\n  if length a <> length b then\n    invalid_arg \"Array.iter2: arrays must have the same length\"\n  else\n    for i = 0 to length a - 1 do f (unsafe_get a i) (unsafe_get b i) done\n\nlet map f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f(unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f(unsafe_get a i))\n    done;\n    r\n  end\n\nlet map2 f a b =\n  let la = length a in\n  let lb = length b in\n  if la <> lb then\n    invalid_arg \"Array.map2: arrays must have the same length\"\n  else begin\n    if la = 0 then [||] else begin\n      let r = create la (f (unsafe_get a 0) (unsafe_get b 0)) in\n      for i = 1 to la - 1 do\n        unsafe_set r i (f (unsafe_get a i) (unsafe_get b i))\n      done;\n      r\n    end\n  end\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet mapi f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f 0 (unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n  end\n\nlet to_list a =\n  let rec tolist i res =\n    if i < 0 then res else tolist (i - 1) (unsafe_get a i :: res) in\n  tolist (length a - 1) []\n\n(* Cannot use List.length here because the List module depends on Array. *)\nlet rec list_length accu = function\n  | [] -> accu\n  | _::t -> list_length (succ accu) t\n\nlet of_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let a = create (list_length 0 l) hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i+1) tl in\n      fill 1 tl\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_left_map f acc input_array =\n  let len = length input_array in\n  if len = 0 then (acc, [||]) else begin\n    let acc, elt = f acc (unsafe_get input_array 0) in\n    let output_array = create len elt in\n    let acc = ref acc in\n    for i = 1 to len - 1 do\n      let acc', elt = f !acc (unsafe_get input_array i) in\n      acc := acc';\n      unsafe_set output_array i elt;\n    done;\n    !acc, output_array\n  end\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get a i) then loop (succ i)\n    else false in\n  loop 0\n\nlet for_all2 p l1 l2 =\n  let n1 = length l1\n  and n2 = length l2 in\n  if n1 <> n2 then invalid_arg \"Array.for_all2\"\n  else let rec loop i =\n    if i = n1 then true\n    else if p (unsafe_get l1 i) (unsafe_get l2 i) then loop (succ i)\n    else false in\n  loop 0\n\nlet exists2 p l1 l2 =\n  let n1 = length l1\n  and n2 = length l2 in\n  if n1 <> n2 then invalid_arg \"Array.exists2\"\n  else let rec loop i =\n    if i = n1 then false\n    else if p (unsafe_get l1 i) (unsafe_get l2 i) then true\n    else loop (succ i) in\n  loop 0\n\nlet mem x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if compare (unsafe_get a i) x = 0 then true\n    else loop (succ i) in\n  loop 0\n\nlet memq x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if x == (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet find_opt p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else\n      let x = unsafe_get a i in\n      if p x then Some x\n      else loop (succ i)\n  in\n  loop 0\n\nlet find_map f a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else\n      match f (unsafe_get a i) with\n      | None -> loop (succ i)\n      | Some _ as r -> r\n  in\n  loop 0\n\nlet split x =\n  if x = [||] then [||], [||]\n  else begin\n    let a0, b0 = unsafe_get x 0 in\n    let n = length x in\n    let a = create n a0 in\n    let b = create n b0 in\n    for i = 1 to n - 1 do\n      let ai, bi = unsafe_get x i in\n      unsafe_set a i ai;\n      unsafe_set b i bi\n    done;\n    a, b\n  end\n\nlet combine a b =\n  let na = length a in\n  let nb = length b in\n  if na <> nb then invalid_arg \"Array.combine\";\n  if na = 0 then [||]\n  else begin\n    let x = create na (unsafe_get a 0, unsafe_get b 0) in\n    for i = 1 to na - 1 do\n      unsafe_set x i (unsafe_get a i, unsafe_get b i)\n    done;\n    x\n  end\n\nexception Bottom of int\nlet sort cmp a =\n  let maxson l i =\n    let i31 = i+i+i+1 in\n    let x = ref i31 in\n    if i31+2 < l then begin\n      if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n      if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n      !x\n    end else\n      if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n      then i31+1\n      else if i31 < l then i31 else raise (Bottom i)\n  in\n  let rec trickledown l i e =\n    let j = maxson l i in\n    if cmp (get a j) e > 0 then begin\n      set a i (get a j);\n      trickledown l j e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n  let rec bubbledown l i =\n    let j = maxson l i in\n    set a i (get a j);\n    bubbledown l j\n  in\n  let bubble l i = try bubbledown l i with Bottom i -> i in\n  let rec trickleup i e =\n    let father = (i - 1) / 3 in\n    assert (i <> father);\n    if cmp (get a father) e < 0 then begin\n      set a i (get a father);\n      if father > 0 then trickleup father e else set a 0 e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let l = length a in\n  for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n  for i = l - 1 downto 2 do\n    let e = (get a i) in\n    set a i (get a 0);\n    trickleup (bubble i 0) e;\n  done;\n  if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e)\n\n\nlet cutoff = 5\nlet stable_sort cmp a =\n  let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n    let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n    let rec loop i1 s1 i2 s2 d =\n      if cmp s1 s2 <= 0 then begin\n        set dst d s1;\n        let i1 = i1 + 1 in\n        if i1 < src1r then\n          loop i1 (get a i1) i2 s2 (d + 1)\n        else\n          blit src2 i2 dst (d + 1) (src2r - i2)\n      end else begin\n        set dst d s2;\n        let i2 = i2 + 1 in\n        if i2 < src2r then\n          loop i1 s1 i2 (get src2 i2) (d + 1)\n        else\n          blit a i1 dst (d + 1) (src1r - i1)\n      end\n    in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n  in\n  let isortto srcofs dst dstofs len =\n    for i = 0 to len - 1 do\n      let e = (get a (srcofs + i)) in\n      let j = ref (dstofs + i - 1) in\n      while (!j >= dstofs && cmp (get dst !j) e > 0) do\n        set dst (!j + 1) (get dst !j);\n        decr j;\n      done;\n      set dst (!j + 1) e;\n    done;\n  in\n  let rec sortto srcofs dst dstofs len =\n    if len <= cutoff then isortto srcofs dst dstofs len else begin\n      let l1 = len / 2 in\n      let l2 = len - l1 in\n      sortto (srcofs + l1) dst (dstofs + l1) l2;\n      sortto srcofs a (srcofs + l2) l1;\n      merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n    end;\n  in\n  let l = length a in\n  if l <= cutoff then isortto 0 a 0 l else begin\n    let l1 = l / 2 in\n    let l2 = l - l1 in\n    let t = make l2 (get a 0) in\n    sortto l1 t 0 l2;\n    sortto 0 a l2 l1;\n    merge l2 l1 t 0 l2 a 0;\n  end\n\n\nlet fast_sort = stable_sort\n\n(** {1 Iterators} *)\n\nlet to_seq a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons (x, aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet to_seqi a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons ((i,x), aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet of_rev_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let len = list_length 0 l in\n      let a = create len hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i-1) tl\n      in\n      fill (len-2) tl\n\nlet of_seq i =\n  let l = Seq.fold_left (fun acc x -> x::acc) [] i in\n  of_rev_list l\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase_ascii = function\n  | 'A' .. 'Z' as c -> unsafe_chr(code c + 32)\n  | c -> c\n\nlet uppercase_ascii = function\n  | 'a' .. 'z' as c -> unsafe_chr(code c - 32)\n  | c -> c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun acc -> output_acc o acc; k o) End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun acc -> bufput_acc b acc; k b) End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\nlet ikbprintf = ikfprintf\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet ibprintf b fmt = ikbprintf ignore b fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Operations on internal representations of values *)\n\ntype t\n\ntype raw_data = nativeint\n\nexternal repr : 'a -> t = \"%identity\"\nexternal obj : t -> 'a = \"%identity\"\nexternal magic : 'a -> 'b = \"%identity\"\nexternal is_int : t -> bool = \"%obj_is_int\"\nlet [@inline always] is_block a = not (is_int a)\nexternal tag : t -> int = \"caml_obj_tag\" [@@noalloc]\nexternal size : t -> int = \"%obj_size\"\nexternal reachable_words : t -> int = \"caml_obj_reachable_words\"\nexternal field : t -> int -> t = \"%obj_field\"\nexternal set_field : t -> int -> t -> unit = \"%obj_set_field\"\nexternal compare_and_swap_field : t -> int -> t -> t -> bool\n  = \"caml_obj_compare_and_swap\"\nexternal is_shared : t -> bool = \"caml_obj_is_shared\"\nexternal floatarray_get : floatarray -> int -> float = \"caml_floatarray_get\"\nexternal floatarray_set :\n    floatarray -> int -> float -> unit = \"caml_floatarray_set\"\nlet [@inline always] double_field x i = floatarray_get (obj x : floatarray) i\nlet [@inline always] set_double_field x i v =\n  floatarray_set (obj x : floatarray) i v\nexternal raw_field : t -> int -> raw_data = \"caml_obj_raw_field\"\nexternal set_raw_field : t -> int -> raw_data -> unit\n                                          = \"caml_obj_set_raw_field\"\n\nexternal new_block : int -> int -> t = \"caml_obj_block\"\nexternal dup : t -> t = \"caml_obj_dup\"\nexternal add_offset : t -> Int32.t -> t = \"caml_obj_add_offset\"\nexternal with_tag : int -> t -> t = \"caml_obj_with_tag\"\n\nlet first_non_constant_constructor_tag = 0\nlet last_non_constant_constructor_tag = 243\n\nlet forcing_tag = 244\nlet cont_tag = 245\nlet lazy_tag = 246\nlet closure_tag = 247\nlet object_tag = 248\nlet infix_tag = 249\nlet forward_tag = 250\n\nlet no_scan_tag = 251\n\nlet abstract_tag = 251\nlet string_tag = 252\nlet double_tag = 253\nlet double_array_tag = 254\nlet custom_tag = 255\n\n\nlet int_tag = 1000\nlet out_of_heap_tag = 1001\nlet unaligned_tag = 1002\n\nmodule Closure = struct\n  type info = {\n    arity: int;\n    start_env: int;\n  }\n\n  let info_of_raw (info : nativeint) =\n    let open Nativeint in\n    let arity =\n      (* signed: negative for tupled functions *)\n      if Sys.word_size = 64 then\n        to_int (shift_right info 56)\n      else\n        to_int (shift_right info 24)\n    in\n    let start_env =\n      (* start_env is unsigned, but we know it can always fit an OCaml\n         integer so we use [to_int] instead of [unsigned_to_int]. *)\n      to_int (shift_right_logical (shift_left info 8) 9) in\n    { arity; start_env }\n\n  (* note: we expect a closure, not an infix pointer *)\n  let info (obj : t) =\n    assert (tag obj = closure_tag);\n    info_of_raw (raw_field obj 1)\nend\n\nmodule Extension_constructor =\nstruct\n  type t = extension_constructor\n  let of_val x =\n    let x = repr x in\n    let slot =\n      if (is_block x) && (tag x) <> object_tag && (size x) >= 1 then field x 0\n      else x\n    in\n    let name =\n      if (is_block slot) && (tag slot) = object_tag then field slot 0\n      else invalid_arg \"Obj.extension_constructor\"\n    in\n      if (tag name) = string_tag then (obj slot : t)\n      else invalid_arg \"Obj.extension_constructor\"\n\n  let [@inline always] name (slot : t) =\n    (obj (field (repr slot) 0) : string)\n\n  let [@inline always] id (slot : t) =\n    (obj (field (repr slot) 1) : int)\nend\n\nmodule Ephemeron = struct\n  type obj_t = t\n\n  type t (** ephemeron *)\n\n   (** To change in sync with weak.h *)\n  let additional_values = 2\n  let max_ephe_length = Sys.max_array_length - additional_values\n\n  external create : int -> t = \"caml_ephe_create\"\n  let create l =\n    if not (0 <= l && l <= max_ephe_length) then\n      invalid_arg \"Obj.Ephemeron.create\";\n    create l\n\n  let length x = size(repr x) - additional_values\n\n  let raise_if_invalid_offset e o msg =\n    if not (0 <= o && o < length e) then\n      invalid_arg msg\n\n  external get_key: t -> int -> obj_t option = \"caml_ephe_get_key\"\n  let get_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.get_key\";\n    get_key e o\n\n  external get_key_copy: t -> int -> obj_t option = \"caml_ephe_get_key_copy\"\n  let get_key_copy e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.get_key_copy\";\n    get_key_copy e o\n\n  external set_key: t -> int -> obj_t -> unit = \"caml_ephe_set_key\"\n  let set_key e o x =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.set_key\";\n    set_key e o x\n\n  external unset_key: t -> int -> unit = \"caml_ephe_unset_key\"\n  let unset_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.unset_key\";\n    unset_key e o\n\n  external check_key: t -> int -> bool = \"caml_ephe_check_key\"\n  let check_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.check_key\";\n    check_key e o\n\n  external blit_key : t -> int -> t -> int -> int -> unit\n    = \"caml_ephe_blit_key\"\n\n  let blit_key e1 o1 e2 o2 l =\n    if l < 0 || o1 < 0 || o1 > length e1 - l\n       || o2 < 0 || o2 > length e2 - l\n    then invalid_arg \"Obj.Ephemeron.blit_key\"\n    else if l <> 0 then blit_key e1 o1 e2 o2 l\n\n  external get_data: t -> obj_t option = \"caml_ephe_get_data\"\n  external get_data_copy: t -> obj_t option = \"caml_ephe_get_data_copy\"\n  external set_data: t -> obj_t -> unit = \"caml_ephe_set_data\"\n  external unset_data: t -> unit = \"caml_ephe_unset_data\"\n  external check_data: t -> bool = \"caml_ephe_check_data\"\n  external blit_data : t -> t -> unit = \"caml_ephe_blit_data\"\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Message digest (MD5) *)\n\ntype t = string\n\nlet compare = String.compare\nlet equal = String.equal\n\nexternal unsafe_string: string -> int -> int -> t = \"caml_md5_string\"\nexternal channel: in_channel -> int -> t = \"caml_md5_chan\"\n\nlet string str =\n  unsafe_string str 0 (String.length str)\n\nlet bytes b = string (Bytes.unsafe_to_string b)\n\nlet substring str ofs len =\n  if ofs < 0 || len < 0 || ofs > String.length str - len\n  then invalid_arg \"Digest.substring\"\n  else unsafe_string str ofs len\n\nlet subbytes b ofs len = substring (Bytes.unsafe_to_string b) ofs len\n\nlet file filename =\n  let ic = open_in_bin filename in\n  match channel ic (-1) with\n    | d -> close_in ic; d\n    | exception e -> close_in ic; raise e\n\nlet output chan digest =\n  output_string chan digest\n\nlet input chan = really_input_string chan 16\n\nlet char_hex n =\n  Char.unsafe_chr (n + if n < 10 then Char.code '0' else (Char.code 'a' - 10))\n\nlet to_hex d =\n  if String.length d <> 16 then invalid_arg \"Digest.to_hex\";\n  let result = Bytes.create 32 in\n  for i = 0 to 15 do\n    let x = Char.code d.[i] in\n    Bytes.unsafe_set result (i*2) (char_hex (x lsr 4));\n    Bytes.unsafe_set result (i*2+1) (char_hex (x land 0x0f));\n  done;\n  Bytes.unsafe_to_string result\n\nlet from_hex s =\n  if String.length s <> 32 then invalid_arg \"Digest.from_hex\";\n  let digit c =\n    match c with\n    | '0'..'9' -> Char.code c - Char.code '0'\n    | 'A'..'F' -> Char.code c - Char.code 'A' + 10\n    | 'a'..'f' -> Char.code c - Char.code 'a' + 10\n    | _ -> raise (Invalid_argument \"Digest.from_hex\")\n  in\n  let byte i = digit s.[i] lsl 4 + digit s.[i+1] in\n  let result = Bytes.create 16 in\n  for i = 0 to 15 do\n    Bytes.set result i (Char.chr (byte (2 * i)));\n  done;\n  Bytes.unsafe_to_string result\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*               Damien Doligez, projet Para, INRIA Rocquencourt          *)\n(*          Xavier Leroy, projet Cambium, College de France and Inria     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Pseudo-random number generator *)\n\nexternal random_seed: unit -> int array = \"caml_sys_random_seed\"\n\nmodule State = struct\n\n  open Bigarray\n\n  type t = (int64, int64_elt, c_layout) Array1.t\n\n  external next: t -> (int64[@unboxed])\n      = \"caml_lxm_next\" \"caml_lxm_next_unboxed\" [@@noalloc]\n\n  let create () : t =\n    Array1.create Int64 C_layout 4\n\n  let set s i1 i2 i3 i4 =\n    Array1.unsafe_set s 0 (Int64.logor i1 1L); (* must be odd *)\n    Array1.unsafe_set s 1 i2;\n    Array1.unsafe_set s 2 (if i3 <> 0L then i3 else 1L); (* must not be 0 *)\n    Array1.unsafe_set s 3 (if i4 <> 0L then i4 else 2L) (* must not be 0 *)\n\n  let mk i1 i2 i3 i4 =\n    let s = create () in\n    set s i1 i2 i3 i4; s\n\n  let assign (dst: t) (src: t) =\n    Array1.blit src dst\n\n  let copy s =\n    let s' = create() in assign s' s; s'\n\n  (* The seed is an array of integers.  It can be just one integer,\n     but it can also be 12 or more bytes.  To hide the difference,\n     we serialize the array as a sequence of bytes, then hash the\n     sequence with MD5 (Digest.bytes).  MD5 gives only 128 bits while\n     we need 256 bits, so we hash twice with different suffixes. *)\n  let reinit s seed =\n    let n = Array.length seed in\n    let b = Bytes.create (n * 8 + 1) in\n    for i = 0 to n-1 do\n      Bytes.set_int64_le b (i * 8) (Int64.of_int seed.(i))\n    done;\n    Bytes.set b (n * 8) '\\x01';\n    let d1 = Digest.bytes b in\n    Bytes.set b (n * 8) '\\x02';\n    let d2 = Digest.bytes b in\n    set s (String.get_int64_le d1 0)\n          (String.get_int64_le d1 8)\n          (String.get_int64_le d2 0)\n          (String.get_int64_le d2 8)\n\n  let make seed =\n    let s = create() in reinit s seed; s\n\n  let make_self_init () =\n    make (random_seed ())\n\n  (* Return 30 random bits as an integer 0 <= x < 1073741824 *)\n  let bits s =\n    Int64.to_int (next s) land 0x3FFF_FFFF\n\n  (* Return an integer between 0 (included) and [bound] (excluded) *)\n  let rec intaux s n =\n    let r = bits s in\n    let v = r mod n in\n    if r - v > 0x3FFFFFFF - n + 1 then intaux s n else v\n\n  let int s bound =\n    if bound > 0x3FFFFFFF || bound <= 0\n    then invalid_arg \"Random.int\"\n    else intaux s bound\n\n  (* Return an integer between 0 (included) and [bound] (excluded).\n     [bound] may be any positive [int]. *)\n  let rec int63aux s n =\n    let r = Int64.to_int (next s) land max_int in\n    let v = r mod n in\n    if r - v > max_int - n + 1 then int63aux s n else v\n\n  let full_int s bound =\n    if bound <= 0 then\n      invalid_arg \"Random.full_int\"\n    else if bound > 0x3FFFFFFF then\n      int63aux s bound\n    else\n      intaux s bound\n\n  (* Return 32 random bits as an [int32] *)\n  let bits32 s =\n    Int64.to_int32 (next s)\n\n  (* Return an [int32] between 0 (included) and [bound] (excluded). *)\n  let rec int32aux s n =\n    let r = Int32.shift_right_logical (bits32 s) 1 in\n    let v = Int32.rem r n in\n    if Int32.(sub r v > add (sub max_int n) 1l)\n    then int32aux s n\n    else v\n\n  let int32 s bound =\n    if bound <= 0l\n    then invalid_arg \"Random.int32\"\n    else int32aux s bound\n\n  (* Return 64 random bits as an [int64] *)\n  let bits64 s =\n    next s\n\n  (* Return an [int64] between 0 (included) and [bound] (excluded). *)\n  let rec int64aux s n =\n    let r = Int64.shift_right_logical (bits64 s) 1 in\n    let v = Int64.rem r n in\n    if Int64.(sub r v > add (sub max_int n) 1L)\n    then int64aux s n\n    else v\n\n  let int64 s bound =\n    if bound <= 0L\n    then invalid_arg \"Random.int64\"\n    else int64aux s bound\n\n  (* Return 32 or 64 random bits as a [nativeint] *)\n  let nativebits =\n    if Nativeint.size = 32\n    then fun s -> Nativeint.of_int32 (bits32 s)\n    else fun s -> Int64.to_nativeint (bits64 s)\n\n  (* Return a [nativeint] between 0 (included) and [bound] (excluded). *)\n  let nativeint =\n    if Nativeint.size = 32\n    then fun s bound -> Nativeint.of_int32 (int32 s (Nativeint.to_int32 bound))\n    else fun s bound -> Int64.to_nativeint (int64 s (Int64.of_nativeint bound))\n\n  (* Return a float 0 < x < 1 uniformly distributed among the\n     multiples of 2^-53 *)\n  let rec rawfloat s =\n    let b = next s in\n    let n = Int64.shift_right_logical b 11 in\n    if n <> 0L then Int64.to_float n *. 0x1.p-53 else rawfloat s\n\n  (* Return a float between 0 and [bound] *)\n  let float s bound = rawfloat s *. bound\n\n  (* Return a random Boolean *)\n  let bool s = next s < 0L\n\n  (* Split a new PRNG off the given PRNG *)\n  let split s =\n    let i1 = bits64 s in let i2 = bits64 s in\n    let i3 = bits64 s in let i4 = bits64 s in\n    mk i1 i2 i3 i4\nend\n\nlet mk_default () =\n  (* This is the state obtained with [State.make [| 314159265 |]]. *)\n  State.mk (-6196874289567705097L)\n           586573249833713189L\n           (-8591268803865043407L)\n           6388613595849772044L\n\nlet random_key =\n  Domain.DLS.new_key ~split_from_parent:State.split mk_default\n\nlet bits () = State.bits (Domain.DLS.get random_key)\nlet int bound = State.int (Domain.DLS.get random_key) bound\nlet full_int bound = State.full_int (Domain.DLS.get random_key) bound\nlet int32 bound = State.int32 (Domain.DLS.get random_key) bound\nlet nativeint bound = State.nativeint (Domain.DLS.get random_key) bound\nlet int64 bound = State.int64 (Domain.DLS.get random_key) bound\nlet float scale = State.float (Domain.DLS.get random_key) scale\nlet bool () = State.bool (Domain.DLS.get random_key)\nlet bits32 () = State.bits32 (Domain.DLS.get random_key)\nlet bits64 () = State.bits64 (Domain.DLS.get random_key)\nlet nativebits () = State.nativebits (Domain.DLS.get random_key)\n\nlet full_init seed = State.reinit (Domain.DLS.get random_key) seed\nlet init seed = full_init [| seed |]\nlet self_init () = full_init (random_seed())\n\n(* Splitting *)\n\nlet split () = State.split (Domain.DLS.get random_key)\n\n(* Manipulating the current state. *)\n\nlet get_state () = State.copy (Domain.DLS.get random_key)\nlet set_state s = State.assign (Domain.DLS.get random_key) s\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Manuel Serrano et Xavier Leroy, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2000 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Bigarray]: large, multi-dimensional, numerical arrays *)\n\n(* These types in must be kept in sync with the tables in\n   ../typing/typeopt.ml *)\n\ntype float32_elt = Float32_elt\ntype float64_elt = Float64_elt\ntype int8_signed_elt = Int8_signed_elt\ntype int8_unsigned_elt = Int8_unsigned_elt\ntype int16_signed_elt = Int16_signed_elt\ntype int16_unsigned_elt = Int16_unsigned_elt\ntype int32_elt = Int32_elt\ntype int64_elt = Int64_elt\ntype int_elt = Int_elt\ntype nativeint_elt = Nativeint_elt\ntype complex32_elt = Complex32_elt\ntype complex64_elt = Complex64_elt\n\ntype ('a, 'b) kind =\n    Float32 : (float, float32_elt) kind\n  | Float64 : (float, float64_elt) kind\n  | Int8_signed : (int, int8_signed_elt) kind\n  | Int8_unsigned : (int, int8_unsigned_elt) kind\n  | Int16_signed : (int, int16_signed_elt) kind\n  | Int16_unsigned : (int, int16_unsigned_elt) kind\n  | Int32 : (int32, int32_elt) kind\n  | Int64 : (int64, int64_elt) kind\n  | Int : (int, int_elt) kind\n  | Nativeint : (nativeint, nativeint_elt) kind\n  | Complex32 : (Complex.t, complex32_elt) kind\n  | Complex64 : (Complex.t, complex64_elt) kind\n  | Char : (char, int8_unsigned_elt) kind\n\ntype c_layout = C_layout_typ\ntype fortran_layout = Fortran_layout_typ (**)\n\ntype 'a layout =\n    C_layout: c_layout layout\n  | Fortran_layout: fortran_layout layout\n\n(* Keep those constants in sync with the caml_ba_kind enumeration\n   in bigarray.h *)\n\nlet float32 = Float32\nlet float64 = Float64\nlet int8_signed = Int8_signed\nlet int8_unsigned = Int8_unsigned\nlet int16_signed = Int16_signed\nlet int16_unsigned = Int16_unsigned\nlet int32 = Int32\nlet int64 = Int64\nlet int = Int\nlet nativeint = Nativeint\nlet complex32 = Complex32\nlet complex64 = Complex64\nlet char = Char\n\nlet kind_size_in_bytes : type a b. (a, b) kind -> int = function\n  | Float32 -> 4\n  | Float64 -> 8\n  | Int8_signed -> 1\n  | Int8_unsigned -> 1\n  | Int16_signed -> 2\n  | Int16_unsigned -> 2\n  | Int32 -> 4\n  | Int64 -> 8\n  | Int -> Sys.word_size / 8\n  | Nativeint -> Sys.word_size / 8\n  | Complex32 -> 8\n  | Complex64 -> 16\n  | Char -> 1\n\n(* Keep those constants in sync with the caml_ba_layout enumeration\n   in bigarray.h *)\n\nlet c_layout = C_layout\nlet fortran_layout = Fortran_layout\n\nmodule Genarray = struct\n  type (!'a, !'b, !'c) t\n  external create: ('a, 'b) kind -> 'c layout -> int array -> ('a, 'b, 'c) t\n     = \"caml_ba_create\"\n  external get: ('a, 'b, 'c) t -> int array -> 'a\n     = \"caml_ba_get_generic\"\n  external set: ('a, 'b, 'c) t -> int array -> 'a -> unit\n     = \"caml_ba_set_generic\"\n\n  let rec cloop arr idx f col max =\n    if col = Array.length idx then set arr idx (f idx)\n    else for j = 0 to pred max.(col) do\n           idx.(col) <- j;\n           cloop arr idx f (succ col) max\n         done\n  let rec floop arr idx f col max =\n    if col < 0 then set arr idx (f idx)\n    else for j = 1 to max.(col) do\n           idx.(col) <- j;\n           floop arr idx f (pred col) max\n         done\n  let init (type t) kind (layout : t layout) dims f =\n    let arr = create kind layout dims in\n    let dlen = Array.length dims in\n    match layout with\n    | C_layout -> cloop arr (Array.make dlen 0) f 0 dims; arr\n    | Fortran_layout -> floop arr (Array.make dlen 1) f (pred dlen) dims; arr\n\n  external num_dims: ('a, 'b, 'c) t -> int = \"caml_ba_num_dims\"\n  external nth_dim: ('a, 'b, 'c) t -> int -> int = \"caml_ba_dim\"\n  let dims a =\n    let n = num_dims a in\n    let d = Array.make n 0 in\n    for i = 0 to n-1 do d.(i) <- nth_dim a i done;\n    d\n\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n     = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (Array.fold_left ( * ) 1 (dims arr))\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right: ('a, 'b, fortran_layout) t -> int -> int ->\n                          ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  external slice_left: ('a, 'b, c_layout) t -> int array ->\n                          ('a, 'b, c_layout) t\n     = \"caml_ba_slice\"\n  external slice_right: ('a, 'b, fortran_layout) t -> int array ->\n                          ('a, 'b, fortran_layout) t\n     = \"caml_ba_slice\"\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit\n     = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\nend\n\nmodule Array0 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout =\n    Genarray.create kind layout [||]\n  let get arr = Genarray.get arr [||]\n  let set arr = Genarray.set arr [||]\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr = kind_size_in_bytes (kind arr)\n\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n\n  let of_value kind layout v =\n    let a = create kind layout in\n    set a v;\n    a\n  let init = of_value\nend\n\nmodule Array1 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim =\n    Genarray.create kind layout [|dim|]\n  external get: ('a, 'b, 'c) t -> int -> 'a = \"%caml_ba_ref_1\"\n  external set: ('a, 'b, 'c) t -> int -> 'a -> unit = \"%caml_ba_set_1\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> 'a = \"%caml_ba_unsafe_ref_1\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_1\"\n  external dim: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim arr)\n\n  external sub: ('a, 'b, 'c) t -> int -> int -> ('a, 'b, 'c) t = \"caml_ba_sub\"\n  let slice (type t) (a : (_, _, t) Genarray.t) n =\n    match layout a with\n    | C_layout -> (Genarray.slice_left a [|n|] : (_, _, t) Genarray.t)\n    | Fortran_layout -> (Genarray.slice_right a [|n|]: (_, _, t) Genarray.t)\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim f =\n    for i = 0 to pred dim do unsafe_set arr i (f i) done\n  let fortran_init arr dim f =\n    for i = 1 to dim do unsafe_set arr i (f i) done\n  let init (type t) kind (layout : t layout) dim f =\n    let arr = create kind layout dim in\n    match layout with\n    | C_layout -> c_init arr dim f; arr\n    | Fortran_layout -> fortran_init arr dim f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let ba = create kind layout (Array.length data) in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to Array.length data - 1 do unsafe_set ba (i + ofs) data.(i) done;\n    ba\nend\n\nmodule Array2 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim1 dim2 =\n    Genarray.create kind layout [|dim1; dim2|]\n  external get: ('a, 'b, 'c) t -> int -> int -> 'a = \"%caml_ba_ref_2\"\n  external set: ('a, 'b, 'c) t -> int -> int -> 'a -> unit = \"%caml_ba_set_2\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> int -> 'a\n     = \"%caml_ba_unsafe_ref_2\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_2\"\n  external dim1: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external dim2: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_2\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim1 arr) * (dim2 arr)\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right:\n    ('a, 'b, fortran_layout) t -> int -> int -> ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  let slice_left a n = Genarray.slice_left a [|n|]\n  let slice_right a n = Genarray.slice_right a [|n|]\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim1 dim2 f =\n    for i = 0 to pred dim1 do\n      for j = 0 to pred dim2 do\n        unsafe_set arr i j (f i j)\n      done\n    done\n  let fortran_init arr dim1 dim2 f =\n    for j = 1 to dim2 do\n      for i = 1 to dim1 do\n        unsafe_set arr i j (f i j)\n      done\n    done\n  let init (type t) kind (layout : t layout) dim1 dim2 f =\n    let arr = create kind layout dim1 dim2 in\n    match layout with\n    | C_layout -> c_init arr dim1 dim2 f; arr\n    | Fortran_layout -> fortran_init arr dim1 dim2 f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let dim1 = Array.length data in\n    let dim2 = if dim1 = 0 then 0 else Array.length data.(0) in\n    let ba = create kind layout dim1 dim2 in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to dim1 - 1 do\n      let row = data.(i) in\n      if Array.length row <> dim2 then\n        invalid_arg(\"Bigarray.Array2.of_array: non-rectangular data\");\n      for j = 0 to dim2 - 1 do\n        unsafe_set ba (i + ofs) (j + ofs) row.(j)\n      done\n    done;\n    ba\nend\n\nmodule Array3 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim1 dim2 dim3 =\n    Genarray.create kind layout [|dim1; dim2; dim3|]\n  external get: ('a, 'b, 'c) t -> int -> int -> int -> 'a = \"%caml_ba_ref_3\"\n  external set: ('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit\n     = \"%caml_ba_set_3\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> int -> int -> 'a\n     = \"%caml_ba_unsafe_ref_3\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_3\"\n  external dim1: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external dim2: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_2\"\n  external dim3: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_3\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim1 arr) * (dim2 arr) * (dim3 arr)\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right:\n     ('a, 'b, fortran_layout) t -> int -> int -> ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  let slice_left_1 a n m = Genarray.slice_left a [|n; m|]\n  let slice_right_1 a n m = Genarray.slice_right a [|n; m|]\n  let slice_left_2 a n = Genarray.slice_left a [|n|]\n  let slice_right_2 a n = Genarray.slice_right a [|n|]\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim1 dim2 dim3 f =\n    for i = 0 to pred dim1 do\n      for j = 0 to pred dim2 do\n        for k = 0 to pred dim3 do\n          unsafe_set arr i j k (f i j k)\n        done\n      done\n    done\n  let fortran_init arr dim1 dim2 dim3 f =\n    for k = 1 to dim3 do\n      for j = 1 to dim2 do\n        for i = 1 to dim1 do\n          unsafe_set arr i j k (f i j k)\n        done\n      done\n    done\n  let init (type t) kind (layout : t layout) dim1 dim2 dim3 f =\n    let arr = create kind layout dim1 dim2 dim3 in\n    match layout with\n    | C_layout -> c_init arr dim1 dim2 dim3 f; arr\n    | Fortran_layout -> fortran_init arr dim1 dim2 dim3 f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let dim1 = Array.length data in\n    let dim2 = if dim1 = 0 then 0 else Array.length data.(0) in\n    let dim3 = if dim2 = 0 then 0 else Array.length data.(0).(0) in\n    let ba = create kind layout dim1 dim2 dim3 in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to dim1 - 1 do\n      let row = data.(i) in\n      if Array.length row <> dim2 then\n        invalid_arg(\"Bigarray.Array3.of_array: non-cubic data\");\n      for j = 0 to dim2 - 1 do\n        let col = row.(j) in\n        if Array.length col <> dim3 then\n          invalid_arg(\"Bigarray.Array3.of_array: non-cubic data\");\n        for k = 0 to dim3 - 1 do\n          unsafe_set ba (i + ofs) (j + ofs) (k + ofs) col.(k)\n        done\n      done\n    done;\n    ba\nend\n\nexternal genarray_of_array0: ('a, 'b, 'c) Array0.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array1: ('a, 'b, 'c) Array1.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array2: ('a, 'b, 'c) Array2.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array3: ('a, 'b, 'c) Array3.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nlet array0_of_genarray a =\n  if Genarray.num_dims a = 0 then a\n  else invalid_arg \"Bigarray.array0_of_genarray\"\nlet array1_of_genarray a =\n  if Genarray.num_dims a = 1 then a\n  else invalid_arg \"Bigarray.array1_of_genarray\"\nlet array2_of_genarray a =\n  if Genarray.num_dims a = 2 then a\n  else invalid_arg \"Bigarray.array2_of_genarray\"\nlet array3_of_genarray a =\n  if Genarray.num_dims a = 3 then a\n  else invalid_arg \"Bigarray.array3_of_genarray\"\n\nexternal reshape:\n   ('a, 'b, 'c) Genarray.t -> int array -> ('a, 'b, 'c) Genarray.t\n   = \"caml_ba_reshape\"\nlet reshape_0 a = reshape a [||]\nlet reshape_1 a dim1 = reshape a [|dim1|]\nlet reshape_2 a dim1 dim2 = reshape a [|dim1;dim2|]\nlet reshape_3 a dim1 dim2 dim3 = reshape a [|dim1;dim2;dim3|]\n\n(* Force caml_ba_get_{1,2,3,N} to be linked in, since we don't refer\n   to those primitives directly in this file *)\n\nlet _ =\n  let _ = Genarray.get in\n  let _ = Array1.get in\n  let _ = Array2.get in\n  let _ = Array3.get in\n  ()\n\n[@@@ocaml.warning \"-32\"]\nexternal get1: unit -> unit = \"caml_ba_get_1\"\nexternal get2: unit -> unit = \"caml_ba_get_2\"\nexternal get3: unit -> unit = \"caml_ba_get_3\"\nexternal set1: unit -> unit = \"caml_ba_set_1\"\nexternal set2: unit -> unit = \"caml_ba_set_2\"\nexternal set3: unit -> unit = \"caml_ba_set_3\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Hash tables *)\n\n(* We do dynamic hashing, and resize the table and rehash the elements\n   when the load factor becomes too high. *)\n\ntype ('a, 'b) t =\n  { mutable size: int;                        (* number of entries *)\n    mutable data: ('a, 'b) bucketlist array;  (* the buckets *)\n    seed: int;                        (* for randomization *)\n    mutable initial_size: int;                (* initial array size *)\n  }\n\nand ('a, 'b) bucketlist =\n    Empty\n  | Cons of { mutable key: 'a;\n              mutable data: 'b;\n              mutable next: ('a, 'b) bucketlist }\n\n(* The sign of initial_size encodes the fact that a traversal is\n   ongoing or not.\n\n   This disables the efficient in place implementation of resizing.\n*)\n\nlet ongoing_traversal h =\n  Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n  || h.initial_size < 0\n\nlet flip_ongoing_traversal h =\n  h.initial_size <- - h.initial_size\n\n(* To pick random seeds if requested *)\n\nlet randomized_default =\n  let params =\n    try Sys.getenv \"OCAMLRUNPARAM\" with Not_found ->\n    try Sys.getenv \"CAMLRUNPARAM\" with Not_found -> \"\" in\n  String.contains params 'R'\n\nlet randomized = Atomic.make randomized_default\n\nlet randomize () = Atomic.set randomized true\nlet is_randomized () = Atomic.get randomized\n\nlet prng_key = Domain.DLS.new_key Random.State.make_self_init\n\n(* Functions which appear before the functorial interface must either be\n   independent of the hash function or take it as a parameter (see #2202 and\n   code below the functor definitions. *)\n\n(* Creating a fresh, empty table *)\n\nlet rec power_2_above x n =\n  if x >= n then x\n  else if x * 2 > Sys.max_array_length then x\n  else power_2_above (x * 2) n\n\nlet create ?(random = Atomic.get randomized) initial_size =\n  let s = power_2_above 16 initial_size in\n  let seed =\n    if random then Random.State.bits (Domain.DLS.get prng_key) else 0\n  in\n  { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\nlet clear h =\n  if h.size > 0 then begin\n    h.size <- 0;\n    Array.fill h.data 0 (Array.length h.data) Empty\n  end\n\nlet reset h =\n  let len = Array.length h.data in\n  if Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n    || len = abs h.initial_size then\n    clear h\n  else begin\n    h.size <- 0;\n    h.data <- Array.make (abs h.initial_size) Empty\n  end\n\nlet copy_bucketlist = function\n  | Empty -> Empty\n  | Cons {key; data; next} ->\n      let rec loop prec = function\n        | Empty -> ()\n        | Cons {key; data; next} ->\n            let r = Cons {key; data; next} in\n            begin match prec with\n            | Empty -> assert false\n            | Cons prec ->  prec.next <- r\n            end;\n            loop r next\n      in\n      let r = Cons {key; data; next} in\n      loop r next;\n      r\n\nlet copy h = { h with data = Array.map copy_bucketlist h.data }\n\nlet length h = h.size\n\nlet insert_all_buckets indexfun inplace odata ndata =\n  let nsize = Array.length ndata in\n  let ndata_tail = Array.make nsize Empty in\n  let rec insert_bucket = function\n    | Empty -> ()\n    | Cons {key; data; next} as cell ->\n        let cell =\n          if inplace then cell\n          else Cons {key; data; next = Empty}\n        in\n        let nidx = indexfun key in\n        begin match ndata_tail.(nidx) with\n        | Empty -> ndata.(nidx) <- cell;\n        | Cons tail -> tail.next <- cell;\n        end;\n        ndata_tail.(nidx) <- cell;\n        insert_bucket next\n  in\n  for i = 0 to Array.length odata - 1 do\n    insert_bucket odata.(i)\n  done;\n  if inplace then\n    for i = 0 to nsize - 1 do\n      match ndata_tail.(i) with\n      | Empty -> ()\n      | Cons tail -> tail.next <- Empty\n    done\n\nlet resize indexfun h =\n  let odata = h.data in\n  let osize = Array.length odata in\n  let nsize = osize * 2 in\n  if nsize < Sys.max_array_length then begin\n    let ndata = Array.make nsize Empty in\n    let inplace = not (ongoing_traversal h) in\n    h.data <- ndata;          (* so that indexfun sees the new bucket count *)\n    insert_all_buckets (indexfun h) inplace odata ndata\n  end\n\nlet iter f h =\n  let rec do_bucket = function\n    | Empty ->\n        ()\n    | Cons{key; data; next} ->\n        f key data; do_bucket next in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    for i = 0 to Array.length d - 1 do\n      do_bucket d.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet rec filter_map_inplace_bucket f h i prec = function\n  | Empty ->\n      begin match prec with\n      | Empty -> h.data.(i) <- Empty\n      | Cons c -> c.next <- Empty\n      end\n  | (Cons ({key; data; next} as c)) as slot ->\n      begin match f key data with\n      | None ->\n          h.size <- h.size - 1;\n          filter_map_inplace_bucket f h i prec next\n      | Some data ->\n          begin match prec with\n          | Empty -> h.data.(i) <- slot\n          | Cons c -> c.next <- slot\n          end;\n          c.data <- data;\n          filter_map_inplace_bucket f h i slot next\n      end\n\nlet filter_map_inplace f h =\n  let d = h.data in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    for i = 0 to Array.length d - 1 do\n      filter_map_inplace_bucket f h i Empty h.data.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet fold f h init =\n  let rec do_bucket b accu =\n    match b with\n      Empty ->\n        accu\n    | Cons{key; data; next} ->\n        do_bucket next (f key data accu) in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    let accu = ref init in\n    for i = 0 to Array.length d - 1 do\n      accu := do_bucket d.(i) !accu\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n    !accu\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\ntype statistics = {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: int array\n}\n\nlet rec bucket_length accu = function\n  | Empty -> accu\n  | Cons{next} -> bucket_length (accu + 1) next\n\nlet stats h =\n  let mbl =\n    Array.fold_left (fun m b -> Int.max m (bucket_length 0 b)) 0 h.data in\n  let histo = Array.make (mbl + 1) 0 in\n  Array.iter\n    (fun b ->\n      let l = bucket_length 0 b in\n      histo.(l) <- histo.(l) + 1)\n    h.data;\n  { num_bindings = h.size;\n    num_buckets = Array.length h.data;\n    max_bucket_length = mbl;\n    bucket_histogram = histo }\n\n(** {1 Iterators} *)\n\nlet to_seq tbl =\n  (* capture current array, so that even if the table is resized we\n     keep iterating on the same array *)\n  let tbl_data = tbl.data in\n  (* state: index * next bucket to traverse *)\n  let rec aux i buck () = match buck with\n    | Empty ->\n        if i = Array.length tbl_data\n        then Seq.Nil\n        else aux(i+1) tbl_data.(i) ()\n    | Cons {key; data; next} ->\n        Seq.Cons ((key, data), aux i next)\n  in\n  aux 0 Empty\n\nlet to_seq_keys m = Seq.map fst (to_seq m)\n\nlet to_seq_values m = Seq.map snd (to_seq m)\n\n(* Functorial interface *)\n\nmodule type HashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: t -> int\n  end\n\nmodule type SeededHashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val seeded_hash: int -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type !'a t\n    val create: int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy: 'a t -> 'a t\n    val add: 'a t -> key -> 'a -> unit\n    val remove: 'a t -> key -> unit\n    val find: 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all: 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length: 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule type SeededS =\n  sig\n    type key\n    type !'a t\n    val create : ?random:bool -> int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy : 'a t -> 'a t\n    val add : 'a t -> key -> 'a -> unit\n    val remove : 'a t -> key -> unit\n    val find : 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all : 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length : 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule MakeSeeded(H: SeededHashedType): (SeededS with type key = H.t) =\n  struct\n    type key = H.t\n    type 'a hashtbl = (key, 'a) t\n    type 'a t = 'a hashtbl\n    let create = create\n    let clear = clear\n    let reset = reset\n    let copy = copy\n\n    let key_index h key =\n      (H.seeded_hash h.seed key) land (Array.length h.data - 1)\n\n    let add h key data =\n      let i = key_index h key in\n      let bucket = Cons{key; data; next=h.data.(i)} in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let rec remove_bucket h i key prec = function\n      | Empty ->\n          ()\n      | (Cons {key=k; next}) as c ->\n          if H.equal k key\n          then begin\n            h.size <- h.size - 1;\n            match prec with\n            | Empty -> h.data.(i) <- next\n            | Cons c -> c.next <- next\n          end\n          else remove_bucket h i key c next\n\n    let remove h key =\n      let i = key_index h key in\n      remove_bucket h i key Empty h.data.(i)\n\n    let rec find_rec key = function\n      | Empty ->\n          raise Not_found\n      | Cons{key=k; data; next} ->\n          if H.equal key k then data else find_rec key next\n\n    let find h key =\n      match h.data.(key_index h key) with\n      | Empty -> raise Not_found\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then d1 else\n          match next1 with\n          | Empty -> raise Not_found\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then d2 else\n              match next2 with\n              | Empty -> raise Not_found\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then d3 else find_rec key next3\n\n    let rec find_rec_opt key = function\n      | Empty ->\n          None\n      | Cons{key=k; data; next} ->\n          if H.equal key k then Some data else find_rec_opt key next\n\n    let find_opt h key =\n      match h.data.(key_index h key) with\n      | Empty -> None\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then Some d1 else\n          match next1 with\n          | Empty -> None\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then Some d2 else\n              match next2 with\n              | Empty -> None\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then Some d3 else find_rec_opt key next3\n\n    let find_all h key =\n      let rec find_in_bucket = function\n      | Empty ->\n          []\n      | Cons{key=k; data=d; next} ->\n          if H.equal k key\n          then d :: find_in_bucket next\n          else find_in_bucket next in\n      find_in_bucket h.data.(key_index h key)\n\n    let rec replace_bucket key data = function\n      | Empty ->\n          true\n      | Cons ({key=k; next} as slot) ->\n          if H.equal k key\n          then (slot.key <- key; slot.data <- data; false)\n          else replace_bucket key data next\n\n    let replace h key data =\n      let i = key_index h key in\n      let l = h.data.(i) in\n      if replace_bucket key data l then begin\n        h.data.(i) <- Cons{key; data; next=l};\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize key_index h\n      end\n\n    let mem h key =\n      let rec mem_in_bucket = function\n      | Empty ->\n          false\n      | Cons{key=k; next} ->\n          H.equal k key || mem_in_bucket next in\n      mem_in_bucket h.data.(key_index h key)\n\n    let add_seq tbl i =\n      Seq.iter (fun (k,v) -> add tbl k v) i\n\n    let replace_seq tbl i =\n      Seq.iter (fun (k,v) -> replace tbl k v) i\n\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n\n    let iter = iter\n    let filter_map_inplace = filter_map_inplace\n    let fold = fold\n    let length = length\n    let stats = stats\n    let to_seq = to_seq\n    let to_seq_keys = to_seq_keys\n    let to_seq_values = to_seq_values\n  end\n\nmodule Make(H: HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let seeded_hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n  end\n\n(* Polymorphic hash function-based tables *)\n(* Code included below the functorial interface to guard against accidental\n   use - see #2202 *)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\n\nlet hash x = seeded_hash_param 10 100 0 x\nlet hash_param n1 n2 x = seeded_hash_param n1 n2 0 x\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\n\nlet key_index h key =\n  if Obj.size (Obj.repr h) >= 4\n  then (seeded_hash_param 10 100 h.seed key) land (Array.length h.data - 1)\n  else invalid_arg \"Hashtbl: unsupported hash table format\"\n\nlet add h key data =\n  let i = key_index h key in\n  let bucket = Cons{key; data; next=h.data.(i)} in\n  h.data.(i) <- bucket;\n  h.size <- h.size + 1;\n  if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet rec remove_bucket h i key prec = function\n  | Empty ->\n      ()\n  | (Cons {key=k; next}) as c ->\n      if compare k key = 0\n      then begin\n        h.size <- h.size - 1;\n        match prec with\n        | Empty -> h.data.(i) <- next\n        | Cons c -> c.next <- next\n      end\n      else remove_bucket h i key c next\n\nlet remove h key =\n  let i = key_index h key in\n  remove_bucket h i key Empty h.data.(i)\n\nlet rec find_rec key = function\n  | Empty ->\n      raise Not_found\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then data else find_rec key next\n\nlet find h key =\n  match h.data.(key_index h key) with\n  | Empty -> raise Not_found\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then d1 else\n      match next1 with\n      | Empty -> raise Not_found\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then d2 else\n          match next2 with\n          | Empty -> raise Not_found\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then d3 else find_rec key next3\n\nlet rec find_rec_opt key = function\n  | Empty ->\n      None\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then Some data else find_rec_opt key next\n\nlet find_opt h key =\n  match h.data.(key_index h key) with\n  | Empty -> None\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then Some d1 else\n      match next1 with\n      | Empty -> None\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then Some d2 else\n          match next2 with\n          | Empty -> None\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then Some d3 else find_rec_opt key next3\n\nlet find_all h key =\n  let rec find_in_bucket = function\n  | Empty ->\n      []\n  | Cons{key=k; data; next} ->\n      if compare k key = 0\n      then data :: find_in_bucket next\n      else find_in_bucket next in\n  find_in_bucket h.data.(key_index h key)\n\nlet rec replace_bucket key data = function\n  | Empty ->\n      true\n  | Cons ({key=k; next} as slot) ->\n      if compare k key = 0\n      then (slot.key <- key; slot.data <- data; false)\n      else replace_bucket key data next\n\nlet replace h key data =\n  let i = key_index h key in\n  let l = h.data.(i) in\n  if replace_bucket key data l then begin\n    h.data.(i) <- Cons{key; data; next=l};\n    h.size <- h.size + 1;\n    if h.size > Array.length h.data lsl 1 then resize key_index h\n  end\n\nlet mem h key =\n  let rec mem_in_bucket = function\n  | Empty ->\n      false\n  | Cons{key=k; next} ->\n      compare k key = 0 || mem_in_bucket next in\n  mem_in_bucket h.data.(key_index h key)\n\nlet add_seq tbl i =\n  Seq.iter (fun (k,v) -> add tbl k v) i\n\nlet replace_seq tbl i =\n  Seq.iter (fun (k,v) -> replace tbl k v) i\n\nlet of_seq i =\n  let tbl = create 16 in\n  replace_seq tbl i;\n  tbl\n\nlet rebuild ?(random = Atomic.get randomized) h =\n  let s = power_2_above 16 (Array.length h.data) in\n  let seed =\n    if random then Random.State.bits (Domain.DLS.get prng_key)\n    else if Obj.size (Obj.repr h) >= 4 then h.seed\n    else 0 in\n  let h' = {\n    size = h.size;\n    data = Array.make s Empty;\n    seed = seed;\n    initial_size = if Obj.size (Obj.repr h) >= 4 then h.initial_size else s\n  } in\n  insert_all_buckets (key_index h') false h.data h'.data;\n  h'\n","open Parser\n\nexception Undefined_var of variable\n\ntype modl = { defs : (variable, tok list) Hashtbl.t; line : int }\n\nlet default_modl = { defs = Hashtbl.create 20; line = 0 }\n\nlet rec substitute var tok toks =\n  List.map\n    (function\n      | Var v when v = var -> tok\n      | Fun (v, body) when v <> var -> Fun (v, substitute var tok body)\n      | Parens body -> Parens (substitute var tok body)\n      | a -> a)\n    toks\n\nlet resolve modl var =\n  match Hashtbl.find_opt modl.defs var with\n  | Some value -> Parens value\n  | None -> raise (Undefined_var var)\n\nlet rec rename modl var = function\n  | Fun (var2, body) ->\n      Fun\n        ( (if var = var2 then var2 ^ \"0\" else var2),\n          List.map (rename modl var) body )\n  | Var var2 when var = var2 -> Var (var2 ^ \"0\")\n  | Parens ptoks -> Parens (List.map (rename modl var) ptoks)\n  | a -> a\n\nlet apply modl var body = function\n  | Var bound_var -> substitute var (resolve modl bound_var) body\n  | tok -> substitute var (rename modl var tok) body\n\nlet rec int = function\n  | 0 -> [ Var \"x\" ]\n  | n -> [ Var \"f\"; Parens (int (n - 1)) ]\n\nlet str s =\n  String.to_seq s |> List.of_seq\n  |> List.rev_map (fun c -> Integer (int_of_char c))\n  |> List.fold_left\n       (fun acc i -> Fun (\"f\", [ Var \"f\"; i; acc ]))\n       (Fun (\"x\", [ Fun (\"x0\", [ Fun (\"y\", [ Var \"x0\" ]) ]) ]))\n\nlet rec eval modl = function\n  | Def (name, body) ->\n      Hashtbl.replace modl.defs name body;\n      []\n  | Parens [ Fun (var, body); tok ] -> apply modl var body tok\n  | Parens ptoks -> interpret modl ptoks\n  | Var var -> [ resolve modl var ]\n  | Integer i -> [ Fun (\"f\", [ Fun (\"x\", int i) ]) ]\n  | Str s -> [ str s ]\n  | t -> [ t ]\n\nand interpret modl = function\n  | (Fun (_, _) as f) :: tk :: ts ->\n      let res = eval modl @@ Parens [ f; tk ] in\n      interpret modl (res @ ts)\n  | t :: ts -> (\n      match eval modl t with\n      | [] -> interpret modl ts\n      | [ res ] ->\n          if res = t then res :: interpret modl ts\n          else interpret modl (res :: ts)\n      | res ->\n          if res = [ t ] then t :: interpret modl ts\n          else interpret modl (res @ ts))\n  | [] -> []\n\n(* let test str = *)\n(*   parse default_setts ((String.to_seq str) ()) |> interpret default_modl *)\n","module Js = struct\n  type t\n\n  type 'a js_array = t\n\n  type ('a, 'b) meth_callback = t\n\n  external string : string -> t = \"caml_jsstring_of_string\"\n\n  external to_string : t -> string = \"caml_string_of_jsstring\"\n\n  external bytestring : string -> t = \"caml_jsbytes_of_string\"\n\n  external to_bytestring : t -> string = \"caml_string_of_jsbytes\"\n\n  external bool : bool -> t = \"caml_js_from_bool\"\n\n  external to_bool : t -> bool = \"caml_js_to_bool\"\n\n  external array : 'a array -> t = \"caml_js_from_array\"\n\n  external to_array : t -> 'a array = \"caml_js_to_array\"\n\n  external number_of_float : float -> t = \"caml_js_from_float\"\n\n  external float_of_number : t -> float = \"caml_js_to_float\"\n\n  external typeof : t -> t = \"caml_js_typeof\"\n\n  external instanceof : t -> t -> bool = \"caml_js_instanceof\"\n\n  external debugger : unit -> unit = \"debugger\"\n\n  external get : t -> t -> t = \"caml_js_get\"\n\n  external set : t -> t -> t -> unit = \"caml_js_set\"\n\n  external delete : t -> t -> unit = \"caml_js_delete\"\n\n  external call : t -> t -> t array -> t = \"caml_js_call\"\n\n  external fun_call : t -> t array -> t = \"caml_js_fun_call\"\n\n  external meth_call : t -> string -> t array -> t = \"caml_js_meth_call\"\n\n  external new_obj : t -> t array -> t = \"caml_js_new\"\n\n  external new_obj_arr : t -> t js_array -> t = \"caml_ojs_new_arr\"\n\n  external obj : (string * t) array -> t = \"caml_js_object\"\n\n  external equals : t -> t -> bool = \"caml_js_equals\"\n\n  external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n  external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n  external js_expr : string -> 'a = \"caml_js_expr\"\n\n  external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n  external callback : ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_callback_unsafe\"\n\n  external callback_with_arguments :\n    (t js_array -> 'b) -> ('c, t js_array -> 'b) meth_callback\n    = \"caml_js_wrap_callback_arguments\"\n\n  external callback_with_arity : int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback_strict\"\n\n  external meth_callback : ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_unsafe\"\n\n  external meth_callback_with_arity : int -> ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_strict\"\n\n  external meth_callback_with_arguments :\n    ('b -> t js_array -> 'a) -> ('b, t js_array -> 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_arguments\"\n\n  external wrap_callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback\"\n\n  external wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback\n    = \"caml_js_wrap_meth_callback\"\nend\n\nmodule Sys = struct\n  type 'a callback = 'a\n\n  external create_file : name:string -> content:string -> unit = \"caml_create_file\"\n\n  external read_file : name:string -> string = \"caml_read_file_content\"\n\n  external set_channel_output' : out_channel -> (js_string:Js.t -> unit) callback -> unit\n    = \"caml_ml_set_channel_output\"\n\n  external set_channel_input' : in_channel -> (unit -> string) callback -> unit\n    = \"caml_ml_set_channel_refill\"\n\n  external mount_point : unit -> string list = \"caml_list_mount_point\"\n\n  external mount_autoload : string -> (string -> string -> string option) callback -> unit\n    = \"caml_mount_autoload\"\n\n  external unmount : string -> unit = \"caml_unmount\"\n\n  module Config = struct\n    external use_js_string : unit -> bool = \"caml_jsoo_flags_use_js_string\"\n\n    external effects : unit -> bool = \"caml_jsoo_flags_effects\"\n  end\n\n  let version = Runtime_version.s\n\n  let git_version = Runtime_version.git_version\nend\n\nmodule Error : sig\n  type t\n\n  val raise_ : t -> 'a\n\n  val attach_js_backtrace : exn -> force:bool -> exn\n  (** Attach a JavasScript error to an OCaml exception.  if [force = false] and a\n    JavasScript error is already attached, it will do nothing. This function is useful to\n    store and retrieve information about JavaScript stack traces.\n\n    Attaching JavasScript errors will happen automatically when compiling with\n    [--enable with-js-error]. *)\n\n  val of_exn : exn -> t option\n  (** Extract a JavaScript error attached to an OCaml exception, if any.  This is useful to\n      inspect an eventual stack strace, especially when sourcemap is enabled. *)\n\n  exception Exn of t\n  (** The [Error] exception wrap javascript exceptions when caught by OCaml code.\n      In case the javascript exception is not an instance of javascript [Error],\n      it will be serialized and wrapped into a [Failure] exception.\n  *)\nend = struct\n  type t\n\n  exception Exn of t\n\n  let _ = Callback.register_exception \"jsError\" (Exn (Obj.magic [||]))\n\n  let raise_ : t -> 'a = Js.js_expr \"(function (exn) { throw exn })\"\n\n  external of_exn : exn -> t option = \"caml_js_error_option_of_exception\"\n\n  external attach_js_backtrace : exn -> force:bool -> exn = \"caml_exn_with_js_backtrace\"\nend\n\n[@@@ocaml.warning \"-32-60\"]\n\nmodule For_compatibility_only = struct\n  (* Add primitives for compatibility reasons. Existing users might\n     depend on it (e.g. gen_js_api), we dont want the ocaml compiler\n     to complain about theses missing primitives. *)\n\n  external caml_js_from_string : string -> Js.t = \"caml_js_from_string\"\n\n  external caml_js_to_byte_string : Js.t -> string = \"caml_js_to_byte_string\"\n\n  external caml_js_to_string : Js.t -> string = \"caml_js_to_string\"\n\n  external caml_list_of_js_array : 'a Js.js_array -> 'a list = \"caml_list_of_js_array\"\n\n  external caml_list_to_js_array : 'a list -> 'a Js.js_array = \"caml_list_to_js_array\"\n\n  external variable : string -> 'a = \"caml_js_var\"\nend\n\nmodule Typed_array = struct\n  type ('a, 'b) typedArray = Js.t\n\n  type arrayBuffer = Js.t\n\n  type uint8Array = Js.t\n\n  external kind : ('a, 'b) typedArray -> ('a, 'b) Bigarray.kind\n    = \"caml_ba_kind_of_typed_array\"\n\n  external from_genarray :\n    ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t -> ('a, 'b) typedArray\n    = \"caml_ba_to_typed_array\"\n\n  external to_genarray :\n    ('a, 'b) typedArray -> ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t\n    = \"caml_ba_from_typed_array\"\n\n  module Bigstring = struct\n    type t = (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t\n\n    external to_arrayBuffer : t -> arrayBuffer = \"bigstring_to_array_buffer\"\n\n    external to_uint8Array : t -> uint8Array = \"bigstring_to_typed_array\"\n\n    external of_arrayBuffer : arrayBuffer -> t = \"bigstring_of_array_buffer\"\n\n    external of_uint8Array : uint8Array -> t = \"bigstring_of_typed_array\"\n  end\n\n  external of_uint8Array : uint8Array -> string = \"caml_string_of_array\"\nend\n\nmodule Int64 = struct\n  external create_int64_lo_mi_hi : int -> int -> int -> Int64.t\n    = \"caml_int64_create_lo_mi_hi\"\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\n(* This local module [Js] is needed so that the ppx_js extension work within that file. *)\nmodule Js = struct\n  type +'a t\n\n  type (-'a, +'b) meth_callback\n\n  module Unsafe = struct\n    type top\n\n    type any = top t\n\n    type any_js_array = any\n\n    external inject : 'a -> any = \"%identity\"\n\n    external coerce : _ t -> _ t = \"%identity\"\n\n    external get : 'a -> 'b -> 'c = \"caml_js_get\"\n\n    external set : 'a -> 'b -> 'c -> unit = \"caml_js_set\"\n\n    external delete : 'a -> 'b -> unit = \"caml_js_delete\"\n\n    external call : 'a -> 'b -> any array -> 'c = \"caml_js_call\"\n\n    external fun_call : 'a -> any array -> 'b = \"caml_js_fun_call\"\n\n    external meth_call : 'a -> string -> any array -> 'b = \"caml_js_meth_call\"\n\n    external new_obj : 'a -> any array -> 'b = \"caml_js_new\"\n\n    external new_obj_arr : 'a -> any_js_array -> 'b = \"caml_ojs_new_arr\"\n\n    external obj : (string * any) array -> 'a = \"caml_js_object\"\n\n    external equals : 'a -> 'b -> bool = \"caml_js_equals\"\n\n    external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n    external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n    external js_expr : string -> 'a = \"caml_js_expr\"\n\n    external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n    let global = pure_js_expr \"globalThis\"\n\n    external callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n      = \"caml_js_wrap_callback_unsafe\"\n\n    external callback_with_arguments :\n      (any_js_array -> 'b) -> ('c, any_js_array -> 'b) meth_callback\n      = \"caml_js_wrap_callback_arguments\"\n\n    external callback_with_arity : int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n      = \"caml_js_wrap_callback_strict\"\n\n    external meth_callback : ('b -> 'a) -> ('b, 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_unsafe\"\n\n    external meth_callback_with_arity : int -> ('b -> 'a) -> ('b, 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_strict\"\n\n    external meth_callback_with_arguments :\n      ('b -> any_js_array -> 'a) -> ('b, any_js_array -> 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_arguments\"\n\n    (* DEPRECATED *)\n    external variable : string -> 'a = \"caml_js_var\"\n  end\n\n  (****)\n\n  type 'a opt = 'a\n\n  type 'a optdef = 'a\n\n  external debugger : unit -> unit = \"debugger\"\n\n  let null : 'a opt = Unsafe.pure_js_expr \"null\"\n\n  external some : 'a -> 'a opt = \"%identity\"\n\n  let undefined : 'a optdef = Unsafe.pure_js_expr \"undefined\"\n\n  external def : 'a -> 'a optdef = \"%identity\"\n\n  module type OPT = sig\n    type 'a t\n\n    val empty : 'a t\n\n    val return : 'a -> 'a t\n\n    val map : 'a t -> ('a -> 'b) -> 'b t\n\n    val bind : 'a t -> ('a -> 'b t) -> 'b t\n\n    val test : 'a t -> bool\n\n    val iter : 'a t -> ('a -> unit) -> unit\n\n    val case : 'a t -> (unit -> 'b) -> ('a -> 'b) -> 'b\n\n    val get : 'a t -> (unit -> 'a) -> 'a\n\n    val option : 'a option -> 'a t\n\n    val to_option : 'a t -> 'a option\n  end\n\n  module Opt : OPT with type 'a t = 'a opt = struct\n    type 'a t = 'a opt\n\n    let empty = null\n\n    let return = some\n\n    let map x f = if Unsafe.equals x null then null else return (f x)\n\n    let bind x f = if Unsafe.equals x null then null else f x\n\n    let test x = not (Unsafe.equals x null)\n\n    let iter x f = if not (Unsafe.equals x null) then f x\n\n    let case x f g = if Unsafe.equals x null then f () else g x\n\n    let get x f = if Unsafe.equals x null then f () else x\n\n    let option x =\n      match x with\n      | None -> empty\n      | Some x -> return x\n\n    let to_option x = case x (fun () -> None) (fun x -> Some x)\n  end\n\n  module Optdef : OPT with type 'a t = 'a optdef = struct\n    type 'a t = 'a optdef\n\n    let empty = undefined\n\n    let return = def\n\n    let map x f = if x == undefined then undefined else return (f x)\n\n    let bind x f = if x == undefined then undefined else f x\n\n    let test x = x != undefined\n\n    let iter x f = if x != undefined then f x\n\n    let case x f g = if x == undefined then f () else g x\n\n    let get x f = if x == undefined then f () else x\n\n    let option x =\n      match x with\n      | None -> empty\n      | Some x -> return x\n\n    let to_option x = case x (fun () -> None) (fun x -> Some x)\n  end\n\n  (****)\n\n  let coerce x f g = Opt.get (f x) (fun () -> g x)\n\n  let coerce_opt x f g = Opt.get (Opt.bind x f) (fun () -> g x)\n\n  (****)\n\n  type +'a meth\n\n  type +'a gen_prop\n\n  type 'a readonly_prop = < get : 'a > gen_prop\n\n  type 'a writeonly_prop = < set : 'a -> unit > gen_prop\n\n  type 'a prop = < get : 'a ; set : 'a -> unit > gen_prop\n\n  type 'a optdef_prop = < get : 'a optdef ; set : 'a -> unit > gen_prop\n\n  type +'a constr\n\n  (****)\n\n  type 'a callback = (unit, 'a) meth_callback\n\n  external wrap_callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback\"\n\n  external wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback\n    = \"caml_js_wrap_meth_callback\"\n\n  (****)\n\n  let _true = Unsafe.pure_js_expr \"true\"\n\n  let _false = Unsafe.pure_js_expr \"false\"\n\n  type match_result_handle\n\n  type string_array\n\n  class type js_string =\n    object\n      method toString : js_string t meth\n\n      method valueOf : js_string t meth\n\n      method charAt : int -> js_string t meth\n\n      method charCodeAt : int -> float meth\n\n      (* This may return NaN... *)\n      method concat : js_string t -> js_string t meth\n\n      method concat_2 : js_string t -> js_string t -> js_string t meth\n\n      method concat_3 : js_string t -> js_string t -> js_string t -> js_string t meth\n\n      method concat_4 :\n        js_string t -> js_string t -> js_string t -> js_string t -> js_string t meth\n\n      method indexOf : js_string t -> int meth\n\n      method indexOf_from : js_string t -> int -> int meth\n\n      method lastIndexOf : js_string t -> int meth\n\n      method lastIndexOf_from : js_string t -> int -> int meth\n\n      method localeCompare : js_string t -> float meth\n\n      method _match : regExp t -> match_result_handle t opt meth\n\n      method normalize : js_string t meth\n\n      method normalize_form : normalization t -> js_string t meth\n\n      method replace : regExp t -> js_string t -> js_string t meth\n\n      method replace_string : js_string t -> js_string t -> js_string t meth\n\n      method search : regExp t -> int meth\n\n      method slice : int -> int -> js_string t meth\n\n      method slice_end : int -> js_string t meth\n\n      method split : js_string t -> string_array t meth\n\n      method split_limited : js_string t -> int -> string_array t meth\n\n      method split_regExp : regExp t -> string_array t meth\n\n      method split_regExpLimited : regExp t -> int -> string_array t meth\n\n      method substring : int -> int -> js_string t meth\n\n      method substring_toEnd : int -> js_string t meth\n\n      method toLowerCase : js_string t meth\n\n      method toLocaleLowerCase : js_string t meth\n\n      method toUpperCase : js_string t meth\n\n      method toLocaleUpperCase : js_string t meth\n\n      method trim : js_string t meth\n\n      method length : int readonly_prop\n    end\n\n  and regExp =\n    object\n      method exec : js_string t -> match_result_handle t opt meth\n\n      method test : js_string t -> bool t meth\n\n      method toString : js_string t meth\n\n      method source : js_string t readonly_prop\n\n      method global : bool t readonly_prop\n\n      method ignoreCase : bool t readonly_prop\n\n      method multiline : bool t readonly_prop\n\n      method lastIndex : int prop\n    end\n\n  and normalization = js_string\n\n  (* string is used by ppx_js, it needs to come before any use of the\n     new syntax in this file *)\n  external string : string -> js_string t = \"caml_jsstring_of_string\"\n\n  external to_string : js_string t -> string = \"caml_string_of_jsstring\"\n\n  let nfc = string \"NFC\"\n\n  let nfd = string \"NFD\"\n\n  let nfkc = string \"NFKC\"\n\n  let nfkd = string \"NFKD\"\nend\n\ninclude Js\n\nclass type string_constr =\n  object\n    method fromCharCode : int -> js_string t meth\n  end\n\nlet string_constr = Unsafe.global##._String\n\nlet regExp = Unsafe.global##._RegExp\n\nlet regExp_copy = regExp\n\nlet regExp_withFlags = regExp\n\nclass type ['a] js_array =\n  object\n    method toString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method concat : 'a js_array t -> 'a js_array t meth\n\n    method join : js_string t -> js_string t meth\n\n    method pop : 'a optdef meth\n\n    method push : 'a -> int meth\n\n    method push_2 : 'a -> 'a -> int meth\n\n    method push_3 : 'a -> 'a -> 'a -> int meth\n\n    method push_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method reverse : 'a js_array t meth\n\n    method shift : 'a optdef meth\n\n    method slice : int -> int -> 'a js_array t meth\n\n    method slice_end : int -> 'a js_array t meth\n\n    method sort : ('a -> 'a -> float) callback -> 'a js_array t meth\n\n    method sort_asStrings : 'a js_array t meth\n\n    method splice : int -> int -> 'a js_array t meth\n\n    method splice_1 : int -> int -> 'a -> 'a js_array t meth\n\n    method splice_2 : int -> int -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_3 : int -> int -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_4 : int -> int -> 'a -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method unshift : 'a -> int meth\n\n    method unshift_2 : 'a -> 'a -> int meth\n\n    method unshift_3 : 'a -> 'a -> 'a -> int meth\n\n    method unshift_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method some : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method every : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method forEach : ('a -> int -> 'a js_array t -> unit) callback -> unit meth\n\n    method map : ('a -> int -> 'a js_array t -> 'b) callback -> 'b js_array t meth\n\n    method filter : ('a -> int -> 'a js_array t -> bool t) callback -> 'a js_array t meth\n\n    method reduce_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduce : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method reduceRight_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduceRight : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method length : int prop\n  end\n\nlet object_constructor = Unsafe.global##._Object\n\nlet object_keys o : js_string t js_array t = object_constructor##keys o\n\nlet array_constructor = Unsafe.global##._Array\n\nlet array_empty = array_constructor\n\nlet array_length = array_constructor\n\nlet array_get : 'a #js_array t -> int -> 'a optdef = Unsafe.get\n\nlet array_set : 'a #js_array t -> int -> 'a -> unit = Unsafe.set\n\nlet array_map_poly :\n    'a #js_array t -> ('a -> int -> 'a #js_array t -> 'b) callback -> 'b #js_array t =\n fun a cb -> (Unsafe.coerce a)##map cb\n\nlet array_map f a = array_map_poly a (wrap_callback (fun x _idx _ -> f x))\n\nlet array_mapi f a = array_map_poly a (wrap_callback (fun x idx _ -> f idx x))\n\nclass type match_result =\n  object\n    inherit [js_string t] js_array\n\n    method index : int readonly_prop\n\n    method input : js_string t readonly_prop\n  end\n\nlet str_array : string_array t -> js_string t js_array t = Unsafe.coerce\n\nlet match_result : match_result_handle t -> match_result t = Unsafe.coerce\n\nclass type number =\n  object\n    method toString : js_string t meth\n\n    method toString_radix : int -> js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toFixed : int -> js_string t meth\n\n    method toExponential : js_string t meth\n\n    method toExponential_digits : int -> js_string t meth\n\n    method toPrecision : int -> js_string t meth\n  end\n\nexternal number_of_float : float -> number t = \"caml_js_from_float\"\n\nexternal float_of_number : number t -> float = \"caml_js_to_float\"\n\nclass type date =\n  object\n    method toString : js_string t meth\n\n    method toDateString : js_string t meth\n\n    method toTimeString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toLocaleDateString : js_string t meth\n\n    method toLocaleTimeString : js_string t meth\n\n    method valueOf : float meth\n\n    method getTime : float meth\n\n    method getFullYear : int meth\n\n    method getUTCFullYear : int meth\n\n    method getMonth : int meth\n\n    method getUTCMonth : int meth\n\n    method getDate : int meth\n\n    method getUTCDate : int meth\n\n    method getDay : int meth\n\n    method getUTCDay : int meth\n\n    method getHours : int meth\n\n    method getUTCHours : int meth\n\n    method getMinutes : int meth\n\n    method getUTCMinutes : int meth\n\n    method getSeconds : int meth\n\n    method getUTCSeconds : int meth\n\n    method getMilliseconds : int meth\n\n    method getUTCMilliseconds : int meth\n\n    method getTimezoneOffset : int meth\n\n    method setTime : float -> float meth\n\n    method setFullYear : int -> float meth\n\n    method setUTCFullYear : int -> float meth\n\n    method setMonth : int -> float meth\n\n    method setUTCMonth : int -> float meth\n\n    method setDate : int -> float meth\n\n    method setUTCDate : int -> float meth\n\n    method setDay : int -> float meth\n\n    method setUTCDay : int -> float meth\n\n    method setHours : int -> float meth\n\n    method setUTCHours : int -> float meth\n\n    method setMinutes : int -> float meth\n\n    method setUTCMinutes : int -> float meth\n\n    method setSeconds : int -> float meth\n\n    method setUTCSeconds : int -> float meth\n\n    method setMilliseconds : int -> float meth\n\n    method setUTCMilliseconds : int -> float meth\n\n    method toUTCString : js_string t meth\n\n    method toISOString : js_string t meth\n\n    method toJSON : 'a -> js_string t meth\n  end\n\nclass type date_constr =\n  object\n    method parse : js_string t -> float meth\n\n    method _UTC_month : int -> int -> float meth\n\n    method _UTC_day : int -> int -> float meth\n\n    method _UTC_hour : int -> int -> int -> int -> float meth\n\n    method _UTC_min : int -> int -> int -> int -> int -> float meth\n\n    method _UTC_sec : int -> int -> int -> int -> int -> int -> float meth\n\n    method _UTC_ms : int -> int -> int -> int -> int -> int -> int -> float meth\n\n    method now : float meth\n  end\n\nlet date_constr = Unsafe.global##._Date\n\nlet date : date_constr t = date_constr\n\nlet date_now : date t constr = date_constr\n\nlet date_fromTimeValue : (float -> date t) constr = date_constr\n\nlet date_month : (int -> int -> date t) constr = date_constr\n\nlet date_day : (int -> int -> int -> date t) constr = date_constr\n\nlet date_hour : (int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_min : (int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_sec : (int -> int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_ms : (int -> int -> int -> int -> int -> int -> int -> date t) constr =\n  date_constr\n\nclass type math =\n  object\n    method _E : float readonly_prop\n\n    method _LN2 : float readonly_prop\n\n    method _LN10 : float readonly_prop\n\n    method _LOG2E : float readonly_prop\n\n    method _LOG10E : float readonly_prop\n\n    method _PI : float readonly_prop\n\n    method _SQRT1_2_ : float readonly_prop\n\n    method _SQRT2 : float readonly_prop\n\n    method abs : float -> float meth\n\n    method acos : float -> float meth\n\n    method asin : float -> float meth\n\n    method atan : float -> float meth\n\n    method atan2 : float -> float -> float meth\n\n    method ceil : float -> float meth\n\n    method cos : float -> float meth\n\n    method exp : float -> float meth\n\n    method floor : float -> float meth\n\n    method log : float -> float meth\n\n    method max : float -> float -> float meth\n\n    method max_3 : float -> float -> float -> float meth\n\n    method max_4 : float -> float -> float -> float -> float meth\n\n    method min : float -> float -> float meth\n\n    method min_3 : float -> float -> float -> float meth\n\n    method min_4 : float -> float -> float -> float -> float meth\n\n    method pow : float -> float -> float meth\n\n    method random : float meth\n\n    method round : float -> float meth\n\n    method sin : float -> float meth\n\n    method sqrt : float -> float meth\n\n    method tan : float -> float meth\n  end\n\nlet math = Unsafe.global##._Math\n\nclass type error =\n  object\n    method name : js_string t prop\n\n    method message : js_string t prop\n\n    method stack : js_string t optdef prop\n\n    method toString : js_string t meth\n  end\n\nlet error_constr = Unsafe.global##._Error\n\nmodule Js_error = struct\n  type error_t = error t\n\n  include Jsoo_runtime.Error\n\n  external of_error : error_t -> t = \"%identity\"\n\n  external to_error : t -> error_t = \"%identity\"\n\n  let name e = to_string (to_error e)##.name\n\n  let message e = to_string (to_error e)##.message\n\n  let stack (e : t) : string option =\n    Opt.to_option (Opt.map (to_error e)##.stack to_string)\n\n  let to_string e = to_string (to_error e)##toString\nend\n\nmodule Magic = struct\n  module type T = sig\n    exception Error of error t\n  end\n\n  type ('a, 'b) eq = Eq : ('a, 'a) eq\n\n  let (eq : (error t, Js_error.t) eq) = Obj.magic Eq\n\n  let m =\n    match eq with\n    | Eq ->\n        (module struct\n          exception Error = Js_error.Exn\n        end : T)\n\n  module Error = (val m : T)\nend\n\ninclude Magic.Error\n\nlet raise_js_error e = Js_error.raise_ (Js_error.of_error e)\n\nlet string_of_error e = Js_error.to_string (Js_error.of_error e)\n\nlet exn_with_js_backtrace = Js_error.attach_js_backtrace\n\nexternal js_error_of_exn : exn -> error t opt = \"caml_js_error_of_exception\"\n\nclass type json =\n  object\n    method parse : js_string t -> 'a meth\n\n    method stringify : 'a -> js_string t meth\n  end\n\nlet _JSON : json t = Unsafe.global##._JSON\n\nlet decodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURI [| Unsafe.inject s |]\n\nlet decodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURIComponent [| Unsafe.inject s |]\n\nlet encodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURI [| Unsafe.inject s |]\n\nlet encodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURIComponent [| Unsafe.inject s |]\n\nlet escape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.escape [| Unsafe.inject s |]\n\nlet unescape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.unescape [| Unsafe.inject s |]\n\nexternal bool : bool -> bool t = \"caml_js_from_bool\"\n\nexternal to_bool : bool t -> bool = \"caml_js_to_bool\"\n\nexternal array : 'a array -> 'a js_array t = \"caml_js_from_array\"\n\nexternal to_array : 'a js_array t -> 'a array = \"caml_js_to_array\"\n\nexternal bytestring : string -> js_string t = \"caml_jsbytes_of_string\"\n\nexternal to_bytestring : js_string t -> string = \"caml_string_of_jsbytes\"\n\nexternal typeof : _ t -> js_string t = \"caml_js_typeof\"\n\nexternal instanceof : _ t -> _ constr -> bool = \"caml_js_instanceof\"\n\nlet isNaN (i : 'a) : bool =\n  to_bool (Unsafe.fun_call Unsafe.global##.isNaN [| Unsafe.inject i |])\n\nlet parseInt (s : js_string t) : int =\n  let s = Unsafe.fun_call Unsafe.global##.parseInt [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseInt\" else s\n\nlet parseFloat (s : js_string t) : float =\n  let s = Unsafe.fun_call Unsafe.global##.parseFloat [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseFloat\" else s\n\nlet _ =\n  Printexc.register_printer (function\n      | Js_error.Exn e -> Some (Js_error.to_string e)\n      | _ -> None)\n\nlet _ =\n  Printexc.register_printer (fun e ->\n      let e : < .. > t = Obj.magic e in\n      if instanceof e array_constructor then None else Some (to_string e##toString))\n\nlet export_js (field : js_string t) x =\n  Unsafe.set\n    (Unsafe.pure_js_expr \"jsoo_exports\")\n    field\n    (if String.equal (Js.to_string (typeof (Obj.magic x))) \"function\"\n        (* function with arity/length equal to zero are already wrapped *)\n        && Unsafe.get (Obj.magic x) (Js.string \"length\") > 0\n     then Obj.magic (wrap_callback (Obj.magic x))\n     else x)\n\nlet export field x = export_js (string field) x\n\nlet export_all obj =\n  let keys = object_keys obj in\n  keys##forEach\n    (wrap_callback (fun (key : js_string t) _ _ -> export_js key (Unsafe.get obj key)))\n\n(****)\n\n(* DEPRECATED *)\n\ntype float_prop = float prop\n\nexternal float : float -> float = \"%identity\"\n\nexternal to_float : float -> float = \"%identity\"\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nexternal caml_js_on_ie : unit -> bool t = \"caml_js_on_ie\"\n\nlet onIE = Js.to_bool (caml_js_on_ie ())\n\nexternal html_escape : js_string t -> js_string t = \"caml_js_html_escape\"\n\nexternal decode_html_entities : js_string t -> js_string t = \"caml_js_html_entities\"\n\nclass type cssStyleDeclaration =\n  object\n    method setProperty :\n      js_string t -> js_string t -> js_string t optdef -> js_string t meth\n\n    method getPropertyValue : js_string t -> js_string t meth\n\n    method getPropertyPriority : js_string t -> js_string t meth\n\n    method removeProperty : js_string t -> js_string t meth\n\n    method animation : js_string t prop\n\n    method animationDelay : js_string t prop\n\n    method animationDirection : js_string t prop\n\n    method animationDuration : js_string t prop\n\n    method animationFillMode : js_string t prop\n\n    method animationIterationCount : js_string t prop\n\n    method animationName : js_string t prop\n\n    method animationPlayState : js_string t prop\n\n    method animationTimingFunction : js_string t prop\n\n    method background : js_string t prop\n\n    method backgroundAttachment : js_string t prop\n\n    method backgroundColor : js_string t prop\n\n    method backgroundImage : js_string t prop\n\n    method backgroundPosition : js_string t prop\n\n    method backgroundRepeat : js_string t prop\n\n    method border : js_string t prop\n\n    method borderBottom : js_string t prop\n\n    method borderBottomColor : js_string t prop\n\n    method borderBottomStyle : js_string t prop\n\n    method borderBottomWidth : js_string t prop\n\n    method borderCollapse : js_string t prop\n\n    method borderColor : js_string t prop\n\n    method borderLeft : js_string t prop\n\n    method borderLeftColor : js_string t prop\n\n    method borderLeftStyle : js_string t prop\n\n    method borderLeftWidth : js_string t prop\n\n    method borderRadius : js_string t prop\n\n    method borderRight : js_string t prop\n\n    method borderRightColor : js_string t prop\n\n    method borderRightStyle : js_string t prop\n\n    method borderRightWidth : js_string t prop\n\n    method borderSpacing : js_string t prop\n\n    method borderStyle : js_string t prop\n\n    method borderTop : js_string t prop\n\n    method borderTopColor : js_string t prop\n\n    method borderTopStyle : js_string t prop\n\n    method borderTopWidth : js_string t prop\n\n    method borderWidth : js_string t prop\n\n    method bottom : js_string t prop\n\n    method captionSide : js_string t prop\n\n    method clear : js_string t prop\n\n    method clip : js_string t prop\n\n    method color : js_string t prop\n\n    method content : js_string t prop\n\n    method counterIncrement : js_string t prop\n\n    method counterReset : js_string t prop\n\n    method cssFloat : js_string t prop\n\n    method cssText : js_string t prop\n\n    method cursor : js_string t prop\n\n    method direction : js_string t prop\n\n    method display : js_string t prop\n\n    method emptyCells : js_string t prop\n\n    method fill : js_string t prop\n\n    method font : js_string t prop\n\n    method fontFamily : js_string t prop\n\n    method fontSize : js_string t prop\n\n    method fontStyle : js_string t prop\n\n    method fontVariant : js_string t prop\n\n    method fontWeight : js_string t prop\n\n    method height : js_string t prop\n\n    method left : js_string t prop\n\n    method letterSpacing : js_string t prop\n\n    method lineHeight : js_string t prop\n\n    method listStyle : js_string t prop\n\n    method listStyleImage : js_string t prop\n\n    method listStylePosition : js_string t prop\n\n    method listStyleType : js_string t prop\n\n    method margin : js_string t prop\n\n    method marginBottom : js_string t prop\n\n    method marginLeft : js_string t prop\n\n    method marginRight : js_string t prop\n\n    method marginTop : js_string t prop\n\n    method maxHeight : js_string t prop\n\n    method maxWidth : js_string t prop\n\n    method minHeight : js_string t prop\n\n    method minWidth : js_string t prop\n\n    method opacity : js_string t optdef prop\n\n    method outline : js_string t prop\n\n    method outlineColor : js_string t prop\n\n    method outlineOffset : js_string t prop\n\n    method outlineStyle : js_string t prop\n\n    method outlineWidth : js_string t prop\n\n    method overflow : js_string t prop\n\n    method overflowX : js_string t prop\n\n    method overflowY : js_string t prop\n\n    method padding : js_string t prop\n\n    method paddingBottom : js_string t prop\n\n    method paddingLeft : js_string t prop\n\n    method paddingRight : js_string t prop\n\n    method paddingTop : js_string t prop\n\n    method pageBreakAfter : js_string t prop\n\n    method pageBreakBefore : js_string t prop\n\n    method pointerEvents : js_string t prop\n\n    method position : js_string t prop\n\n    method right : js_string t prop\n\n    method stroke : js_string t prop\n\n    method strokeWidth : js_string t prop\n\n    method tableLayout : js_string t prop\n\n    method textAlign : js_string t prop\n\n    method textAnchor : js_string t prop\n\n    method textDecoration : js_string t prop\n\n    method textIndent : js_string t prop\n\n    method textTransform : js_string t prop\n\n    method top : js_string t prop\n\n    method transform : js_string t prop\n\n    method verticalAlign : js_string t prop\n\n    method visibility : js_string t prop\n\n    method whiteSpace : js_string t prop\n\n    method width : js_string t prop\n\n    method wordSpacing : js_string t prop\n\n    method zIndex : js_string t prop\n  end\n\ntype ('a, 'b) event_listener = ('a, 'b) Dom.event_listener\n\ntype mouse_button =\n  | No_button\n  | Left_button\n  | Middle_button\n  | Right_button\n\ntype delta_mode =\n  | Delta_pixel\n  | Delta_line\n  | Delta_page\n\nclass type event =\n  object\n    inherit [element] Dom.event\n  end\n\nand ['a] customEvent =\n  object\n    inherit [element, 'a] Dom.customEvent\n  end\n\nand focusEvent =\n  object\n    inherit event\n\n    method relatedTarget : element t opt optdef readonly_prop\n  end\n\nand mouseEvent =\n  object\n    inherit event\n\n    method relatedTarget : element t opt optdef readonly_prop\n\n    method clientX : int readonly_prop\n\n    method clientY : int readonly_prop\n\n    method screenX : int readonly_prop\n\n    method screenY : int readonly_prop\n\n    method offsetX : int readonly_prop\n\n    method offsetY : int readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method altKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method button : int readonly_prop\n\n    method which : mouse_button optdef readonly_prop\n\n    method fromElement : element t opt optdef readonly_prop\n\n    method toElement : element t opt optdef readonly_prop\n\n    method pageX : int optdef readonly_prop\n\n    method pageY : int optdef readonly_prop\n  end\n\nand keyboardEvent =\n  object\n    inherit event\n\n    method altKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method location : int readonly_prop\n\n    method key : js_string t optdef readonly_prop\n\n    method code : js_string t optdef readonly_prop\n\n    method which : int optdef readonly_prop\n\n    method charCode : int optdef readonly_prop\n\n    method keyCode : int readonly_prop\n\n    method getModifierState : js_string t -> bool t meth\n\n    method keyIdentifier : js_string t optdef readonly_prop\n  end\n\nand mousewheelEvent =\n  object\n    (* All modern browsers *)\n    inherit mouseEvent\n\n    method wheelDelta : int readonly_prop\n\n    method wheelDeltaX : int optdef readonly_prop\n\n    method wheelDeltaY : int optdef readonly_prop\n\n    method deltaX : float readonly_prop\n\n    method deltaY : float readonly_prop\n\n    method deltaZ : float readonly_prop\n\n    method deltaMode : delta_mode readonly_prop\n  end\n\nand mouseScrollEvent =\n  object\n    (* Firefox *)\n    inherit mouseEvent\n\n    method detail : int readonly_prop\n\n    method axis : int optdef readonly_prop\n\n    method _HORIZONTAL_AXIS : int optdef readonly_prop\n\n    method _VERTICAL_AXIS : int optdef readonly_prop\n  end\n\nand touchEvent =\n  object\n    inherit event\n\n    method touches : touchList t readonly_prop\n\n    method targetTouches : touchList t readonly_prop\n\n    method changedTouches : touchList t readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method altKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method relatedTarget : element t opt optdef readonly_prop\n  end\n\nand touchList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> touch t optdef meth\n  end\n\nand touch =\n  object\n    method identifier : int readonly_prop\n\n    method target : element t optdef readonly_prop\n\n    method screenX : int readonly_prop\n\n    method screenY : int readonly_prop\n\n    method clientX : int readonly_prop\n\n    method clientY : int readonly_prop\n\n    method pageX : int readonly_prop\n\n    method pageY : int readonly_prop\n  end\n\nand submitEvent =\n  object\n    inherit event\n\n    method submitter : element t optdef readonly_prop\n  end\n\nand dragEvent =\n  object\n    inherit mouseEvent\n\n    method dataTransfer : dataTransfer t readonly_prop\n  end\n\nand clipboardEvent =\n  object\n    inherit event\n\n    method clipboardData : dataTransfer t readonly_prop\n  end\n\nand dataTransfer =\n  object\n    method dropEffect : js_string t prop\n\n    method effectAllowed : js_string t prop\n\n    method files : File.fileList t readonly_prop\n\n    method types : js_string t js_array t readonly_prop\n\n    method addElement : element t -> unit meth\n\n    method clearData : js_string t -> unit meth\n\n    method clearData_all : unit meth\n\n    method getData : js_string t -> js_string t meth\n\n    method setData : js_string t -> js_string t -> unit meth\n\n    method setDragImage : element t -> int -> int -> unit meth\n  end\n\nand eventTarget =\n  object ('self)\n    method onclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method ondblclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmousedown : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseup : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseover : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmousemove : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseout : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onkeypress : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onkeydown : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onkeyup : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onscroll : ('self t, event t) event_listener writeonly_prop\n\n    method onwheel : ('self t, mousewheelEvent t) event_listener writeonly_prop\n\n    method ondragstart : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragend : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragenter : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragover : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragleave : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondrag : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondrop : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method onanimationstart : ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationend : ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationiteration :\n      ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationcancel : ('self t, animationEvent t) event_listener writeonly_prop\n\n    method ontransitionrun : ('self t, transitionEvent t) event_listener writeonly_prop\n\n    method ontransitionstart : ('self t, transitionEvent t) event_listener writeonly_prop\n\n    method ontransitionend : ('self t, transitionEvent t) event_listener writeonly_prop\n\n    method ontransitioncancel : ('self t, transitionEvent t) event_listener writeonly_prop\n\n    method ongotpointercapture : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onlostpointercapture : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerenter : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointercancel : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerdown : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerleave : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointermove : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerout : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerover : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method onpointerup : ('self t, pointerEvent t) event_listener writeonly_prop\n\n    method dispatchEvent : event t -> bool t meth\n  end\n\nand popStateEvent =\n  object\n    inherit event\n\n    method state : Js.Unsafe.any readonly_prop\n  end\n\nand pointerEvent =\n  object\n    inherit mouseEvent\n\n    method pointerId : int Js.readonly_prop\n\n    method width : float Js.readonly_prop\n\n    method height : float Js.readonly_prop\n\n    method pressure : float Js.readonly_prop\n\n    method tangentialPressure : float Js.readonly_prop\n\n    method tiltX : int Js.readonly_prop\n\n    method tiltY : int Js.readonly_prop\n\n    method twist : int Js.readonly_prop\n\n    method pointerType : Js.js_string Js.t Js.readonly_prop\n\n    method isPrimary : bool Js.t Js.readonly_prop\n  end\n\nand storageEvent =\n  object\n    inherit event\n\n    method key : js_string t opt readonly_prop\n\n    method oldValue : js_string t opt readonly_prop\n\n    method newValue : js_string t opt readonly_prop\n\n    method url : js_string t readonly_prop\n\n    method storageArea : storage t opt readonly_prop\n  end\n\nand storage =\n  object\n    method length : int readonly_prop\n\n    method key : int -> js_string t opt meth\n\n    method getItem : js_string t -> js_string t opt meth\n\n    method setItem : js_string t -> js_string t -> unit meth\n\n    method removeItem : js_string t -> unit meth\n\n    method clear : unit meth\n  end\n\nand hashChangeEvent =\n  object\n    inherit event\n\n    method oldURL : js_string t readonly_prop\n\n    method newURL : js_string t readonly_prop\n  end\n\nand animationEvent =\n  object\n    inherit event\n\n    method animationName : js_string t readonly_prop\n\n    method elapsedTime : float readonly_prop\n\n    method pseudoElement : js_string t readonly_prop\n  end\n\nand transitionEvent =\n  object\n    inherit event\n\n    method propertyName : js_string t readonly_prop\n\n    method elapsedTime : float readonly_prop\n\n    method pseudoElement : js_string t readonly_prop\n  end\n\nand mediaEvent =\n  object\n    inherit event\n  end\n\nand messageEvent =\n  object\n    inherit event\n\n    method data : Unsafe.any opt readonly_prop\n\n    method source : Unsafe.any opt readonly_prop\n  end\n\nand nodeSelector =\n  object\n    method querySelector : js_string t -> element t opt meth\n\n    method querySelectorAll : js_string t -> element Dom.nodeList t meth\n  end\n\nand tokenList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> js_string t optdef meth\n\n    method contains : js_string t -> bool t meth\n\n    method add : js_string t -> unit meth\n\n    method remove : js_string t -> unit meth\n\n    method toggle : js_string t -> bool t meth\n\n    method stringifier : js_string t prop\n  end\n\nand element =\n  object\n    inherit Dom.element\n\n    inherit nodeSelector\n\n    method id : js_string t prop\n\n    method title : js_string t prop\n\n    method lang : js_string t prop\n\n    method dir : js_string t prop\n\n    method className : js_string t prop\n\n    method classList : tokenList t readonly_prop\n\n    method closest : js_string t -> element t opt meth\n\n    method style : cssStyleDeclaration t prop\n\n    method innerHTML : js_string t prop\n\n    method outerHTML : js_string t prop\n\n    method textContent : js_string t opt prop\n\n    method innerText : js_string t prop\n\n    method clientLeft : int readonly_prop\n\n    method clientTop : int readonly_prop\n\n    method clientWidth : int readonly_prop\n\n    method clientHeight : int readonly_prop\n\n    method offsetLeft : int readonly_prop\n\n    method offsetTop : int readonly_prop\n\n    method offsetParent : element t opt readonly_prop\n\n    method offsetWidth : int readonly_prop\n\n    method offsetHeight : int readonly_prop\n\n    method scrollLeft : int prop\n\n    method scrollTop : int prop\n\n    method scrollWidth : int prop\n\n    method scrollHeight : int prop\n\n    method getClientRects : clientRectList t meth\n\n    method getBoundingClientRect : clientRect t meth\n\n    method scrollIntoView : bool t -> unit meth\n\n    method click : unit meth\n\n    method focus : unit meth\n\n    method blur : unit meth\n\n    inherit eventTarget\n  end\n\nand clientRect =\n  object\n    method top : float readonly_prop\n\n    method right : float readonly_prop\n\n    method bottom : float readonly_prop\n\n    method left : float readonly_prop\n\n    method width : float optdef readonly_prop\n\n    method height : float optdef readonly_prop\n  end\n\nand clientRectList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> clientRect t opt meth\n  end\n\nlet no_handler : ('a, 'b) event_listener = Dom.no_handler\n\nlet handler = Dom.handler\n\nlet full_handler = Dom.full_handler\n\nlet invoke_handler = Dom.invoke_handler\n\nmodule Event = struct\n  type 'a typ = 'a Dom.Event.typ\n\n  let click = Dom.Event.make \"click\"\n\n  let copy = Dom.Event.make \"copy\"\n\n  let cut = Dom.Event.make \"cut\"\n\n  let paste = Dom.Event.make \"paste\"\n\n  let dblclick = Dom.Event.make \"dblclick\"\n\n  let mousedown = Dom.Event.make \"mousedown\"\n\n  let mouseup = Dom.Event.make \"mouseup\"\n\n  let mouseover = Dom.Event.make \"mouseover\"\n\n  let mousemove = Dom.Event.make \"mousemove\"\n\n  let mouseout = Dom.Event.make \"mouseout\"\n\n  let keypress = Dom.Event.make \"keypress\"\n\n  let keydown = Dom.Event.make \"keydown\"\n\n  let keyup = Dom.Event.make \"keyup\"\n\n  let mousewheel = Dom.Event.make \"mousewheel\"\n\n  let wheel = Dom.Event.make \"wheel\"\n\n  let _DOMMouseScroll = Dom.Event.make \"DOMMouseScroll\"\n\n  let touchstart = Dom.Event.make \"touchstart\"\n\n  let touchmove = Dom.Event.make \"touchmove\"\n\n  let touchend = Dom.Event.make \"touchend\"\n\n  let touchcancel = Dom.Event.make \"touchcancel\"\n\n  let dragstart = Dom.Event.make \"dragstart\"\n\n  let dragend = Dom.Event.make \"dragend\"\n\n  let dragenter = Dom.Event.make \"dragenter\"\n\n  let dragover = Dom.Event.make \"dragover\"\n\n  let dragleave = Dom.Event.make \"dragleave\"\n\n  let drag = Dom.Event.make \"drag\"\n\n  let drop = Dom.Event.make \"drop\"\n\n  let hashchange = Dom.Event.make \"hashchange\"\n\n  let change = Dom.Event.make \"change\"\n\n  let input = Dom.Event.make \"input\"\n\n  let timeupdate = Dom.Event.make \"timeupdate\"\n\n  let submit = Dom.Event.make \"submit\"\n\n  let scroll = Dom.Event.make \"scroll\"\n\n  let focus = Dom.Event.make \"focus\"\n\n  let blur = Dom.Event.make \"blur\"\n\n  let load = Dom.Event.make \"load\"\n\n  let unload = Dom.Event.make \"unload\"\n\n  let beforeunload = Dom.Event.make \"beforeunload\"\n\n  let resize = Dom.Event.make \"resize\"\n\n  let orientationchange = Dom.Event.make \"orientationchange\"\n\n  let popstate = Dom.Event.make \"popstate\"\n\n  let error = Dom.Event.make \"error\"\n\n  let abort = Dom.Event.make \"abort\"\n\n  let select = Dom.Event.make \"select\"\n\n  let online = Dom.Event.make \"online\"\n\n  let offline = Dom.Event.make \"offline\"\n\n  let checking = Dom.Event.make \"checking\"\n\n  let noupdate = Dom.Event.make \"noupdate\"\n\n  let downloading = Dom.Event.make \"downloading\"\n\n  let progress = Dom.Event.make \"progress\"\n\n  let updateready = Dom.Event.make \"updateready\"\n\n  let cached = Dom.Event.make \"cached\"\n\n  let obsolete = Dom.Event.make \"obsolete\"\n\n  let domContentLoaded = Dom.Event.make \"DOMContentLoaded\"\n\n  let animationstart = Dom.Event.make \"animationstart\"\n\n  let animationend = Dom.Event.make \"animationend\"\n\n  let animationiteration = Dom.Event.make \"animationiteration\"\n\n  let animationcancel = Dom.Event.make \"animationcancel\"\n\n  let transitionrun = Dom.Event.make \"transitionrun\"\n\n  let transitionstart = Dom.Event.make \"transitionstart\"\n\n  let transitionend = Dom.Event.make \"transitionend\"\n\n  let transitioncancel = Dom.Event.make \"transitioncancel\"\n\n  let canplay = Dom.Event.make \"canplay\"\n\n  let canplaythrough = Dom.Event.make \"canplaythrough\"\n\n  let durationchange = Dom.Event.make \"durationchange\"\n\n  let emptied = Dom.Event.make \"emptied\"\n\n  let ended = Dom.Event.make \"ended\"\n\n  let gotpointercapture = Dom.Event.make \"gotpointercapture\"\n\n  let loadeddata = Dom.Event.make \"loadeddata\"\n\n  let loadedmetadata = Dom.Event.make \"loadedmetadata\"\n\n  let loadstart = Dom.Event.make \"loadstart\"\n\n  let lostpointercapture = Dom.Event.make \"lostpointercapture\"\n\n  let message = Dom.Event.make \"message\"\n\n  let pause = Dom.Event.make \"pause\"\n\n  let play = Dom.Event.make \"play\"\n\n  let playing = Dom.Event.make \"playing\"\n\n  let pointerenter = Dom.Event.make \"pointerenter\"\n\n  let pointercancel = Dom.Event.make \"pointercancel\"\n\n  let pointerdown = Dom.Event.make \"pointerdown\"\n\n  let pointerleave = Dom.Event.make \"pointerleave\"\n\n  let pointermove = Dom.Event.make \"pointermove\"\n\n  let pointerout = Dom.Event.make \"pointerout\"\n\n  let pointerover = Dom.Event.make \"pointerover\"\n\n  let pointerup = Dom.Event.make \"pointerup\"\n\n  let ratechange = Dom.Event.make \"ratechange\"\n\n  let seeked = Dom.Event.make \"seeked\"\n\n  let seeking = Dom.Event.make \"seeking\"\n\n  let stalled = Dom.Event.make \"stalled\"\n\n  let suspend = Dom.Event.make \"suspend\"\n\n  let volumechange = Dom.Event.make \"volumechange\"\n\n  let waiting = Dom.Event.make \"waiting\"\n\n  let make = Dom.Event.make\nend\n\ntype event_listener_id = Dom.event_listener_id\n\nlet addEventListener = Dom.addEventListener\n\nlet addEventListenerWithOptions = Dom.addEventListenerWithOptions\n\nlet removeEventListener = Dom.removeEventListener\n\nlet createCustomEvent = Dom.createCustomEvent\n\nclass type ['node] collection =\n  object\n    method length : int readonly_prop\n\n    method item : int -> 'node t opt meth\n\n    method namedItem : js_string t -> 'node t opt meth\n  end\n\nclass type htmlElement = element\n\nclass type headElement =\n  object\n    inherit element\n\n    method profile : js_string t prop\n  end\n\nclass type linkElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method charset : js_string t prop\n\n    method crossorigin : js_string t prop\n\n    method href : js_string t prop\n\n    method hreflang : js_string t prop\n\n    method media : js_string t prop\n\n    method rel : js_string t prop\n\n    method rev : js_string t prop\n\n    method target : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type titleElement =\n  object\n    inherit element\n\n    method text : js_string t prop\n  end\n\nclass type metaElement =\n  object\n    inherit element\n\n    method content : js_string t prop\n\n    method httpEquiv : js_string t prop\n\n    method name : js_string t prop\n\n    method scheme : js_string t prop\n  end\n\nclass type baseElement =\n  object\n    inherit element\n\n    method href : js_string t prop\n\n    method target : js_string t prop\n  end\n\nclass type styleElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method media : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type bodyElement = element\n\nclass type formElement =\n  object\n    inherit element\n\n    method elements : element collection t readonly_prop\n\n    method length : int readonly_prop\n\n    method acceptCharset : js_string t prop\n\n    method action : js_string t prop\n\n    method enctype : js_string t prop\n\n    method _method : js_string t prop\n\n    method target : js_string t prop\n\n    method submit : unit meth\n\n    method reset : unit meth\n\n    method onsubmit : ('self t, submitEvent t) event_listener writeonly_prop\n  end\n\nclass type optGroupElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method label : js_string t prop\n  end\n\nclass type optionElement =\n  object\n    inherit optGroupElement\n\n    method form : formElement t opt readonly_prop\n\n    method defaultSelected : bool t prop\n\n    method text : js_string t readonly_prop\n\n    method index : int readonly_prop\n\n    method selected : bool t prop\n\n    method value : js_string t prop\n  end\n\nclass type selectElement =\n  object ('self)\n    inherit element\n\n    method _type : js_string t readonly_prop\n\n    method selectedIndex : int prop\n\n    method value : js_string t prop\n\n    method length : int prop\n\n    method form : formElement t opt readonly_prop\n\n    method options : optionElement collection t readonly_prop\n\n    method disabled : bool t prop\n\n    method multiple : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method size : int prop\n\n    method tabIndex : int prop\n\n    method add : #optGroupElement t -> #optGroupElement t opt -> unit meth\n\n    method remove : int -> unit meth\n\n    method required : bool t writeonly_prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n  end\n\nclass type inputElement =\n  object ('self)\n    inherit element\n\n    method defaultValue : js_string t prop\n\n    method defaultChecked : js_string t prop\n\n    method form : formElement t opt readonly_prop\n\n    method accept : js_string t prop\n\n    method accessKey : js_string t prop\n\n    method align : js_string t prop\n\n    method alt : js_string t prop\n\n    method checked : bool t prop\n\n    method disabled : bool t prop\n\n    method maxLength : int prop\n\n    method name : js_string t readonly_prop\n\n    method readOnly : bool t prop\n\n    method required : bool t writeonly_prop\n\n    method size : int prop\n\n    method src : js_string t prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method useMap : js_string t prop\n\n    method value : js_string t prop\n\n    method select : unit meth\n\n    method files : File.fileList t optdef readonly_prop\n\n    method placeholder : js_string t writeonly_prop\n\n    method selectionDirection : js_string t prop\n\n    method selectionStart : int prop\n\n    method selectionEnd : int prop\n\n    method onselect : ('self t, event t) event_listener prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n\n    method onblur : ('self t, focusEvent t) event_listener prop\n\n    method onfocus : ('self t, focusEvent t) event_listener prop\n  end\n\nclass type textAreaElement =\n  object ('self)\n    inherit element\n\n    method defaultValue : js_string t prop\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method cols : int prop\n\n    method disabled : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method readOnly : bool t prop\n\n    method rows : int prop\n\n    method selectionDirection : js_string t prop\n\n    method selectionEnd : int prop\n\n    method selectionStart : int prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method value : js_string t prop\n\n    method select : unit meth\n\n    method required : bool t writeonly_prop\n\n    method placeholder : js_string t writeonly_prop\n\n    method onselect : ('self t, event t) event_listener prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n\n    method onblur : ('self t, focusEvent t) event_listener prop\n\n    method onfocus : ('self t, focusEvent t) event_listener prop\n  end\n\nclass type buttonElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method disabled : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method value : js_string t prop\n  end\n\nclass type labelElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method htmlFor : js_string t prop\n  end\n\nclass type fieldSetElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n  end\n\nclass type legendElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n  end\n\nclass type uListElement = element\n\nclass type oListElement = element\n\nclass type dListElement = element\n\nclass type liElement = element\n\nclass type divElement = element\n\nclass type paragraphElement = element\n\nclass type headingElement = element\n\nclass type quoteElement =\n  object\n    inherit element\n\n    method cite : js_string t prop\n  end\n\nclass type preElement = element\n\nclass type brElement = element\n\nclass type hrElement = element\n\nclass type modElement =\n  object\n    inherit element\n\n    method cite : js_string t prop\n\n    method dateTime : js_string t prop\n  end\n\nclass type anchorElement =\n  object\n    inherit element\n\n    method accessKey : js_string t prop\n\n    method charset : js_string t prop\n\n    method coords : js_string t prop\n\n    method href : js_string t prop\n\n    method hreflang : js_string t prop\n\n    method name : js_string t prop\n\n    method rel : js_string t prop\n\n    method rev : js_string t prop\n\n    method shape : js_string t prop\n\n    method tabIndex : int prop\n\n    method target : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type imageElement =\n  object ('self)\n    inherit element\n\n    method alt : js_string t prop\n\n    method src : js_string t prop\n\n    method useMap : js_string t prop\n\n    method isMap : bool t prop\n\n    method width : int prop\n\n    method height : int prop\n\n    method naturalWidth : int optdef readonly_prop\n\n    method naturalHeight : int optdef readonly_prop\n\n    method complete : bool t prop\n\n    method onload : ('self t, event t) event_listener prop\n\n    method onerror : ('self t, event t) event_listener prop\n\n    method onabort : ('self t, event t) event_listener prop\n  end\n\nclass type objectElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method code : js_string t prop\n\n    method archive : js_string t prop\n\n    method codeBase : js_string t prop\n\n    method codeType : js_string t prop\n\n    method data : js_string t prop\n\n    method declare : bool t prop\n\n    method height : js_string t prop\n\n    method name : js_string t prop\n\n    method standby : js_string t prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t prop\n\n    method useMap : js_string t prop\n\n    method width : js_string t prop\n\n    method document : Dom.element Dom.document t opt readonly_prop\n  end\n\nclass type paramElement =\n  object\n    inherit element\n\n    method name : js_string t prop\n\n    method _type : js_string t prop\n\n    method value : js_string t prop\n\n    method valueType : js_string t prop\n  end\n\nclass type areaElement =\n  object\n    inherit element\n\n    method accessKey : js_string t prop\n\n    method alt : js_string t prop\n\n    method coords : js_string t prop\n\n    method href : js_string t prop\n\n    method noHref : bool t prop\n\n    method shape : js_string t prop\n\n    method tabIndex : int prop\n\n    method target : js_string t prop\n  end\n\nclass type mapElement =\n  object\n    inherit element\n\n    method areas : areaElement collection t readonly_prop\n\n    method name : js_string t prop\n  end\n\nclass type scriptElement =\n  object\n    inherit element\n\n    method text : js_string t prop\n\n    method charset : js_string t prop\n\n    method defer : bool t prop\n\n    method src : js_string t prop\n\n    method _type : js_string t prop\n\n    method async : bool t prop\n  end\n\nclass type embedElement =\n  object\n    inherit element\n\n    method src : js_string t prop\n\n    method height : js_string t prop\n\n    method width : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type tableCellElement =\n  object\n    inherit element\n\n    method cellIndex : int readonly_prop\n\n    method abbr : js_string t prop\n\n    method align : js_string t prop\n\n    method axis : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method colSpan : int prop\n\n    method headers : js_string t prop\n\n    method rowSpan : int prop\n\n    method scope : js_string t prop\n\n    method vAlign : js_string t prop\n  end\n\nclass type tableRowElement =\n  object\n    inherit element\n\n    method rowIndex : int readonly_prop\n\n    method sectionRowIndex : int readonly_prop\n\n    method cells : tableCellElement collection t readonly_prop\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method vAlign : js_string t prop\n\n    method insertCell : int -> tableCellElement t meth\n\n    method deleteCell : int -> unit meth\n  end\n\nclass type tableColElement =\n  object\n    inherit element\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method span : int prop\n\n    method vAlign : js_string t prop\n\n    method width : js_string t prop\n  end\n\nclass type tableSectionElement =\n  object\n    inherit element\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method vAlign : js_string t prop\n\n    method rows : tableRowElement collection t readonly_prop\n\n    method insertRow : int -> tableRowElement t meth\n\n    method deleteRow : int -> unit meth\n  end\n\nclass type tableCaptionElement = element\n\nclass type tableElement =\n  object\n    inherit element\n\n    method caption : tableCaptionElement t prop\n\n    method tHead : tableSectionElement t prop\n\n    method tFoot : tableSectionElement t prop\n\n    method rows : tableRowElement collection t readonly_prop\n\n    method tBodies : tableSectionElement collection t readonly_prop\n\n    method align : js_string t prop\n\n    method border : js_string t prop\n\n    method cellPadding : js_string t prop\n\n    method cellSpacing : js_string t prop\n\n    method frame : js_string t prop\n\n    method rules : js_string t prop\n\n    method summary : js_string t prop\n\n    method width : js_string t prop\n\n    method createTHead : tableSectionElement t meth\n\n    method deleteTHead : unit meth\n\n    method createTFoot : tableSectionElement t meth\n\n    method deleteTFoot : unit meth\n\n    method createCaption : tableCaptionElement t meth\n\n    method deleteCaption : unit meth\n\n    method insertRow : int -> tableRowElement t meth\n\n    method deleteRow : int -> unit meth\n  end\n\nclass type timeRanges =\n  object\n    method length : int readonly_prop\n\n    method start : int -> float meth\n\n    method end_ : int -> float meth\n  end\n\ntype networkState =\n  | NETWORK_EMPTY\n  | NETWORK_IDLE\n  | NETWORK_LOADING\n  | NETWORK_NO_SOURCE\n\ntype readyState =\n  | HAVE_NOTHING\n  | HAVE_METADATA\n  | HAVE_CURRENT_DATA\n  | HAVE_FUTURE_DATA\n  | HAVE_ENOUGH_DATA\n\n(* http://www.w3schools.com/tags/ref_av_dom.asp *)\n(* only features supported by all browser. (IE9+) *)\nclass type mediaElement =\n  object\n    inherit element\n\n    method canPlayType : js_string t -> js_string t meth\n\n    method load : unit meth\n\n    method play : unit meth\n\n    method pause : unit meth\n\n    method autoplay : bool t prop\n\n    method buffered : timeRanges t readonly_prop\n\n    method controls : bool t prop\n\n    method currentSrc : js_string t readonly_prop\n\n    method currentTime : float prop\n\n    method duration : float readonly_prop\n\n    method ended : bool t readonly_prop\n\n    method loop : bool t prop\n\n    method mediagroup : js_string t prop\n\n    method muted : bool t prop\n\n    method networkState_int : int readonly_prop\n\n    method networkState : networkState readonly_prop\n\n    method paused : bool t readonly_prop\n\n    method playbackRate : float prop\n\n    method played : timeRanges t readonly_prop\n\n    method preload : js_string t prop\n\n    method readyState_int : int readonly_prop\n\n    method readyState : readyState readonly_prop\n\n    method seekable : timeRanges t readonly_prop\n\n    method seeking : bool t readonly_prop\n\n    method src : js_string t prop\n\n    method volume : float prop\n\n    method oncanplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method oncanplaythrough : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method ondurationchange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onemptied : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onended : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadeddata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadedmetadata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadstart : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onpause : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onplaying : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onratechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onseeked : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onseeking : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onstalled : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onsuspend : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onvolumechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onwaiting : ('self t, mediaEvent t) event_listener writeonly_prop\n  end\n\nclass type audioElement =\n  object\n    inherit mediaElement\n  end\n\nclass type videoElement =\n  object\n    inherit mediaElement\n  end\n\ntype context = js_string t\n\nlet _2d_ = Js.string \"2d\"\n\ntype canvasPattern\n\nclass type canvasElement =\n  object\n    inherit element\n\n    method width : int prop\n\n    method height : int prop\n\n    method toDataURL : js_string t meth\n\n    method toDataURL_type : js_string t -> js_string t meth\n\n    method toDataURL_type_compression : js_string t -> float -> js_string t meth\n\n    method getContext : js_string t -> canvasRenderingContext2D t meth\n  end\n\nand canvasRenderingContext2D =\n  object\n    method canvas : canvasElement t readonly_prop\n\n    method save : unit meth\n\n    method restore : unit meth\n\n    method scale : float -> float -> unit meth\n\n    method rotate : float -> unit meth\n\n    method translate : float -> float -> unit meth\n\n    method transform : float -> float -> float -> float -> float -> float -> unit meth\n\n    method setTransform : float -> float -> float -> float -> float -> float -> unit meth\n\n    method globalAlpha : float prop\n\n    method globalCompositeOperation : js_string t prop\n\n    method strokeStyle : js_string t writeonly_prop\n\n    method strokeStyle_gradient : canvasGradient t writeonly_prop\n\n    method strokeStyle_pattern : canvasPattern t writeonly_prop\n\n    method fillStyle : js_string t writeonly_prop\n\n    method fillStyle_gradient : canvasGradient t writeonly_prop\n\n    method fillStyle_pattern : canvasPattern t writeonly_prop\n\n    method createLinearGradient :\n      float -> float -> float -> float -> canvasGradient t meth\n\n    method createRadialGradient :\n      float -> float -> float -> float -> float -> float -> canvasGradient t meth\n\n    method createPattern : imageElement t -> js_string t -> canvasPattern t meth\n\n    method createPattern_fromCanvas :\n      canvasElement t -> js_string t -> canvasPattern t meth\n\n    method createPattern_fromVideo : videoElement t -> js_string t -> canvasPattern t meth\n\n    method lineWidth : float prop\n\n    method lineCap : js_string t prop\n\n    method lineJoin : js_string t prop\n\n    method miterLimit : float prop\n\n    method shadowOffsetX : float prop\n\n    method shadowOffsetY : float prop\n\n    method shadowBlur : float prop\n\n    method shadowColor : js_string t prop\n\n    method clearRect : float -> float -> float -> float -> unit meth\n\n    method fillRect : float -> float -> float -> float -> unit meth\n\n    method strokeRect : float -> float -> float -> float -> unit meth\n\n    method beginPath : unit meth\n\n    method closePath : unit meth\n\n    method moveTo : float -> float -> unit meth\n\n    method lineTo : float -> float -> unit meth\n\n    method quadraticCurveTo : float -> float -> float -> float -> unit meth\n\n    method bezierCurveTo : float -> float -> float -> float -> float -> float -> unit meth\n\n    method arcTo : float -> float -> float -> float -> float -> unit meth\n\n    method rect : float -> float -> float -> float -> unit meth\n\n    method arc : float -> float -> float -> float -> float -> bool t -> unit meth\n\n    method fill : unit meth\n\n    method stroke : unit meth\n\n    method clip : unit meth\n\n    method isPointInPath : float -> float -> bool t meth\n\n    method drawFocusRing : #element t -> float -> float -> bool t -> bool t meth\n\n    method font : js_string t prop\n\n    method textAlign : js_string t prop\n\n    method textBaseline : js_string t prop\n\n    method fillText : js_string t -> float -> float -> unit meth\n\n    method fillText_withWidth : js_string t -> float -> float -> float -> unit meth\n\n    method strokeText : js_string t -> float -> float -> unit meth\n\n    method strokeText_withWidth : js_string t -> float -> float -> float -> unit meth\n\n    method measureText : js_string t -> textMetrics t meth\n\n    method drawImage : imageElement t -> float -> float -> unit meth\n\n    method drawImage_withSize :\n      imageElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_full :\n         imageElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method drawImage_fromCanvas : canvasElement t -> float -> float -> unit meth\n\n    method drawImage_fromCanvasWithSize :\n      canvasElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_fullFromCanvas :\n         canvasElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method drawImage_fromVideoWithVideo : videoElement t -> float -> float -> unit meth\n\n    method drawImage_fromVideoWithSize :\n      videoElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_fullFromVideo :\n         videoElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method createImageData : int -> int -> imageData t meth\n\n    method getImageData : float -> float -> float -> float -> imageData t meth\n\n    method putImageData : imageData t -> float -> float -> unit meth\n  end\n\nand canvasGradient =\n  object\n    method addColorStop : float -> js_string t -> unit meth\n  end\n\nand textMetrics =\n  object\n    method width : float readonly_prop\n  end\n\nand imageData =\n  object\n    method width : int readonly_prop\n\n    method height : int readonly_prop\n\n    method data : canvasPixelArray t readonly_prop\n  end\n\nand canvasPixelArray =\n  object\n    method length : int readonly_prop\n  end\n\nexternal pixel_get : canvasPixelArray t -> int -> int = \"caml_js_get\"\n\nexternal pixel_set : canvasPixelArray t -> int -> int -> unit = \"caml_js_set\"\n\nclass type range =\n  object\n    method collapsed : bool t readonly_prop\n\n    method startOffset : int readonly_prop\n\n    method endOffset : int readonly_prop\n\n    method startContainer : Dom.node t readonly_prop\n\n    method endContainer : Dom.node t readonly_prop\n\n    method setStart : Dom.node t -> int -> unit meth\n\n    method setEnd : Dom.node t -> int -> unit meth\n\n    method setStartBefore : Dom.node t -> unit meth\n\n    method setEndBefore : Dom.node t -> unit meth\n\n    method setStartAfter : Dom.node t -> unit meth\n\n    method setEndAfter : Dom.node t -> unit meth\n\n    method selectNode : Dom.node t -> unit meth\n\n    method selectNodeContents : Dom.node t -> unit meth\n\n    method collapse : bool t -> unit meth\n\n    method cloneContents : Dom.documentFragment t meth\n\n    method extractContents : Dom.documentFragment t meth\n\n    method deleteContents : unit meth\n\n    method insertNode : Dom.node t -> unit meth\n\n    method surroundContents : Dom.node t -> unit meth\n\n    method cloneRange : range t meth\n\n    method toString : js_string t meth\n  end\n\n(** Information on current selection *)\nclass type selection =\n  object\n    method anchorNode : Dom.node t readonly_prop\n\n    method anchorOffset : int readonly_prop\n\n    method focusNode : Dom.node t readonly_prop\n\n    method focusOffset : int readonly_prop\n\n    method isCollapsed : bool t readonly_prop\n\n    method rangeCount : int readonly_prop\n\n    method getRangeAt : int -> range t meth\n\n    method collapse : bool t -> unit meth\n\n    method extend : Dom.node t -> int -> unit meth\n\n    method modify : js_string t -> js_string t -> js_string t -> unit meth\n\n    method collapseToStart : unit meth\n\n    method collapseToEnd : unit meth\n\n    method selectAllChildren : Dom.node t -> unit meth\n\n    method addRange : range t -> unit meth\n\n    method removeRange : range t -> unit meth\n\n    method removeAllRanges : unit meth\n\n    method deleteFromDocument : unit meth\n\n    method containsNode : Dom.node t -> bool t -> bool t meth\n\n    method toString : js_string t meth\n  end\n\nclass type document =\n  object\n    inherit [element] Dom.document\n\n    inherit nodeSelector\n\n    inherit eventTarget\n\n    method title : js_string t prop\n\n    method referrer : js_string t readonly_prop\n\n    method domain : js_string t prop\n\n    method _URL : js_string t readonly_prop\n\n    method head : headElement t prop\n\n    method body : bodyElement t prop\n\n    method documentElement : htmlElement t readonly_prop\n\n    method images : imageElement collection t readonly_prop\n\n    method applets : element collection t readonly_prop\n\n    method links : element collection t readonly_prop\n\n    method forms : formElement collection t readonly_prop\n\n    method anchors : element collection t readonly_prop\n\n    method cookie : js_string t prop\n\n    method designMode : js_string t prop\n\n    method open_ : unit meth\n\n    method close : unit meth\n\n    method write : js_string t -> unit meth\n\n    method execCommand : js_string t -> bool t -> js_string t opt -> unit meth\n\n    method createRange : range t meth\n\n    method readyState : js_string t readonly_prop\n\n    method getElementsByClassName : js_string t -> element Dom.nodeList t meth\n\n    method getElementsByName : js_string t -> element Dom.nodeList t meth\n\n    method activeElement : element t opt readonly_prop\n\n    method hidden : bool t readonly_prop\n\n    method onfullscreenchange : (document t, event t) event_listener writeonly_prop\n\n    method onwebkitfullscreenchange : (document t, event t) event_listener writeonly_prop\n\n    inherit eventTarget\n  end\n\ntype interval_id\n\ntype timeout_id\n\ntype animation_frame_request_id\n\nclass type location =\n  object\n    method href : js_string t prop\n\n    method protocol : js_string t prop\n\n    method host : js_string t prop\n\n    method hostname : js_string t prop\n\n    method origin : js_string t optdef readonly_prop\n\n    method port : js_string t prop\n\n    method pathname : js_string t prop\n\n    method search : js_string t prop\n\n    method hash : js_string t prop\n\n    method assign : js_string t -> unit meth\n\n    method replace : js_string t -> unit meth\n\n    method reload : unit meth\n  end\n\nlet location_origin (loc : location t) =\n  Optdef.case\n    loc##.origin\n    (fun () ->\n      let protocol = loc##.protocol in\n      let hostname = loc##.hostname in\n      let port = loc##.port in\n      if protocol##.length = 0 && hostname##.length = 0\n      then Js.string \"\"\n      else\n        let origin = protocol##concat_2 (Js.string \"//\") hostname in\n        if port##.length > 0 then origin##concat_2 (Js.string \":\") loc##.port else origin)\n    (fun o -> o)\n\nclass type history =\n  object\n    method length : int readonly_prop\n\n    method state : Js.Unsafe.any readonly_prop\n\n    method go : int opt -> unit meth\n\n    method back : unit meth\n\n    method forward : unit meth\n\n    method pushState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\n\n    method replaceState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\n  end\n\nclass type undoManager = object end\n\nclass type navigator =\n  object\n    method appCodeName : js_string t readonly_prop\n\n    method appName : js_string t readonly_prop\n\n    method appVersion : js_string t readonly_prop\n\n    method cookieEnabled : bool t readonly_prop\n\n    method onLine : bool t readonly_prop\n\n    method platform : js_string t readonly_prop\n\n    method vendor : js_string t readonly_prop\n\n    method userAgent : js_string t readonly_prop\n\n    method language : js_string t optdef readonly_prop\n\n    method userLanguage : js_string t optdef readonly_prop\n\n    method maxTouchPoints : int readonly_prop\n  end\n\nclass type screen =\n  object\n    method width : int readonly_prop\n\n    method height : int readonly_prop\n\n    method availWidth : int readonly_prop\n\n    method availHeight : int readonly_prop\n  end\n\nclass type applicationCache =\n  object\n    method status : int readonly_prop\n\n    method update : unit meth\n\n    method abort : unit meth\n\n    method swapCache : unit meth\n\n    method onchecking : (applicationCache t, event t) event_listener prop\n\n    method onerror : (applicationCache t, event t) event_listener prop\n\n    method onnoupdate : (applicationCache t, event t) event_listener prop\n\n    method ondownloading : (applicationCache t, event t) event_listener prop\n\n    method onprogress : (applicationCache t, event t) event_listener prop\n\n    method onupdateready : (applicationCache t, event t) event_listener prop\n\n    method oncached : (applicationCache t, event t) event_listener prop\n\n    method onobsolete : (applicationCache t, event t) event_listener prop\n\n    inherit eventTarget\n  end\n\nclass type _URL =\n  object\n    method createObjectURL : #File.blob t -> js_string t meth\n\n    method revokeObjectURL : js_string t -> unit meth\n  end\n\nclass type window =\n  object\n    inherit eventTarget\n\n    method document : document t readonly_prop\n\n    method applicationCache : applicationCache t readonly_prop\n\n    method name : js_string t prop\n\n    method location : location t readonly_prop\n\n    method history : history t readonly_prop\n\n    method undoManager : undoManager t readonly_prop\n\n    method navigator : navigator t readonly_prop\n\n    method getSelection : selection t meth\n\n    method close : unit meth\n\n    method closed : bool t readonly_prop\n\n    method stop : unit meth\n\n    method focus : unit meth\n\n    method blur : unit meth\n\n    method scroll : int -> int -> unit meth\n\n    method scrollBy : int -> int -> unit meth\n\n    method sessionStorage : storage t optdef readonly_prop\n\n    method localStorage : storage t optdef readonly_prop\n\n    method top : window t readonly_prop\n\n    method parent : window t readonly_prop\n\n    method frameElement : element t opt readonly_prop\n\n    method open_ : js_string t -> js_string t -> js_string t opt -> window t opt meth\n\n    method alert : js_string t -> unit meth\n\n    method confirm : js_string t -> bool t meth\n\n    method prompt : js_string t -> js_string t -> js_string t opt meth\n\n    method print : unit meth\n\n    method setInterval : (unit -> unit) Js.callback -> float -> interval_id meth\n\n    method clearInterval : interval_id -> unit meth\n\n    method setTimeout : (unit -> unit) Js.callback -> float -> timeout_id meth\n\n    method clearTimeout : timeout_id -> unit meth\n\n    method requestAnimationFrame :\n      (float -> unit) Js.callback -> animation_frame_request_id meth\n\n    method cancelAnimationFrame : animation_frame_request_id -> unit meth\n\n    method screen : screen t readonly_prop\n\n    method innerWidth : int readonly_prop\n\n    method innerHeight : int readonly_prop\n\n    method outerWidth : int readonly_prop\n\n    method outerHeight : int readonly_prop\n\n    method getComputedStyle : #element t -> cssStyleDeclaration t meth\n\n    method getComputedStyle_pseudoElt :\n      #element t -> js_string t -> cssStyleDeclaration t meth\n\n    method atob : js_string t -> js_string t meth\n\n    method btoa : js_string t -> js_string t meth\n\n    method onload : (window t, event t) event_listener prop\n\n    method onunload : (window t, event t) event_listener prop\n\n    method onbeforeunload : (window t, event t) event_listener prop\n\n    method onblur : (window t, focusEvent t) event_listener prop\n\n    method onfocus : (window t, focusEvent t) event_listener prop\n\n    method onresize : (window t, event t) event_listener prop\n\n    method onorientationchange : (window t, event t) event_listener prop\n\n    method onpopstate : (window t, popStateEvent t) event_listener prop\n\n    method onhashchange : (window t, hashChangeEvent t) event_listener prop\n\n    method ononline : (window t, event t) event_listener writeonly_prop\n\n    method onoffline : (window t, event t) event_listener writeonly_prop\n\n    method _URL : _URL t readonly_prop\n\n    method devicePixelRatio : float readonly_prop\n  end\n\nlet window : window t = Js.Unsafe.global\n\n(* The toplevel object *)\n\nlet document = window##.document\n\nlet getElementById id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> raise Not_found)\n    (fun pnode -> pnode)\n\nlet getElementById_exn id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> failwith (Printf.sprintf \"getElementById_exn: %S not found\" id))\n    (fun pnode -> pnode)\n\nlet getElementById_opt id = Js.Opt.to_option (document##getElementById (Js.string id))\n\nlet getElementById_coerce id coerce =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> None)\n    (fun e -> Js.Opt.to_option (coerce e))\n\n(****)\n\nclass type frameSetElement =\n  object\n    inherit element\n\n    method cols : js_string t prop\n\n    method rows : js_string t prop\n  end\n\nclass type frameElement =\n  object\n    inherit element\n\n    method frameBorder : js_string t prop\n\n    method longDesc : js_string t prop\n\n    method marginHeight : js_string t prop\n\n    method marginWidth : js_string t prop\n\n    method name : js_string t prop\n\n    method noResize : bool t prop\n\n    method scrolling : js_string t prop\n\n    method src : js_string t prop\n\n    method contentDocument : document t opt readonly_prop\n  end\n\nclass type iFrameElement =\n  object\n    inherit element\n\n    method frameBorder : js_string t prop\n\n    method height : js_string t prop\n\n    method width : js_string t prop\n\n    method longDesc : js_string t prop\n\n    method marginHeight : js_string t prop\n\n    method marginWidth : js_string t prop\n\n    method name : js_string t prop\n\n    method scrolling : js_string t prop\n\n    method src : js_string t prop\n\n    method contentDocument : document t opt readonly_prop\n\n    method contentWindow : window t readonly_prop\n  end\n\n(****)\n\n(*XXX Should provide creation functions a la lablgtk... *)\n\nlet opt_iter x f =\n  match x with\n  | None -> ()\n  | Some v -> f v\n\nlet createElement (doc : document t) name = doc##createElement (Js.string name)\n\nlet unsafeCreateElement doc name = Js.Unsafe.coerce (createElement doc name)\n\nlet createElementSyntax = ref `Unknown\n\nlet rec unsafeCreateElementEx ?_type ?name doc elt =\n  if Poly.(_type = None) && Poly.(name = None)\n  then Js.Unsafe.coerce (createElement doc elt)\n  else\n    match !createElementSyntax with\n    | `Standard ->\n        let res = Js.Unsafe.coerce (createElement doc elt) in\n        opt_iter _type (fun t -> res##._type := t);\n        opt_iter name (fun n -> res##.name := n);\n        res\n    | `Extended ->\n        let a = new%js Js.array_empty in\n        ignore (a##push_2 (Js.string \"<\") (Js.string elt));\n        opt_iter _type (fun t ->\n            ignore (a##push_3 (Js.string \" type=\\\"\") (html_escape t) (Js.string \"\\\"\")));\n        opt_iter name (fun n ->\n            ignore (a##push_3 (Js.string \" name=\\\"\") (html_escape n) (Js.string \"\\\"\")));\n        ignore (a##push (Js.string \">\"));\n        Js.Unsafe.coerce (doc##createElement (a##join (Js.string \"\")))\n    | `Unknown ->\n        createElementSyntax :=\n          if try\n               let el : inputElement Js.t =\n                 Js.Unsafe.coerce\n                   (document##createElement (Js.string \"<input name=\\\"x\\\">\"))\n               in\n               el##.tagName##toLowerCase == Js.string \"input\"\n               && el##.name == Js.string \"x\"\n             with _ -> false\n          then `Extended\n          else `Standard;\n        unsafeCreateElementEx ?_type ?name doc elt\n\nlet createHtml doc : htmlElement t = unsafeCreateElement doc \"html\"\n\nlet createHead doc : headElement t = unsafeCreateElement doc \"head\"\n\nlet createLink doc : linkElement t = unsafeCreateElement doc \"link\"\n\nlet createTitle doc : titleElement t = unsafeCreateElement doc \"title\"\n\nlet createMeta doc : metaElement t = unsafeCreateElement doc \"meta\"\n\nlet createBase doc : baseElement t = unsafeCreateElement doc \"base\"\n\nlet createStyle doc : styleElement t = unsafeCreateElement doc \"style\"\n\nlet createBody doc : bodyElement t = unsafeCreateElement doc \"body\"\n\nlet createForm doc : formElement t = unsafeCreateElement doc \"form\"\n\nlet createOptgroup doc : optGroupElement t = unsafeCreateElement doc \"optgroup\"\n\nlet createOption doc : optionElement t = unsafeCreateElement doc \"option\"\n\nlet createSelect ?_type ?name doc : selectElement t =\n  unsafeCreateElementEx ?_type ?name doc \"select\"\n\nlet createInput ?_type ?name doc : inputElement t =\n  unsafeCreateElementEx ?_type ?name doc \"input\"\n\nlet createTextarea ?_type ?name doc : textAreaElement t =\n  unsafeCreateElementEx ?_type ?name doc \"textarea\"\n\nlet createButton ?_type ?name doc : buttonElement t =\n  unsafeCreateElementEx ?_type ?name doc \"button\"\n\nlet createLabel doc : labelElement t = unsafeCreateElement doc \"label\"\n\nlet createFieldset doc : fieldSetElement t = unsafeCreateElement doc \"fieldset\"\n\nlet createLegend doc : legendElement t = unsafeCreateElement doc \"legend\"\n\nlet createUl doc : uListElement t = unsafeCreateElement doc \"ul\"\n\nlet createOl doc : oListElement t = unsafeCreateElement doc \"ol\"\n\nlet createDl doc : dListElement t = unsafeCreateElement doc \"dl\"\n\nlet createLi doc : liElement t = unsafeCreateElement doc \"li\"\n\nlet createDiv doc : divElement t = unsafeCreateElement doc \"div\"\n\nlet createEmbed doc : embedElement t = unsafeCreateElement doc \"embed\"\n\nlet createP doc : paragraphElement t = unsafeCreateElement doc \"p\"\n\nlet createH1 doc : headingElement t = unsafeCreateElement doc \"h1\"\n\nlet createH2 doc : headingElement t = unsafeCreateElement doc \"h2\"\n\nlet createH3 doc : headingElement t = unsafeCreateElement doc \"h3\"\n\nlet createH4 doc : headingElement t = unsafeCreateElement doc \"h4\"\n\nlet createH5 doc : headingElement t = unsafeCreateElement doc \"h5\"\n\nlet createH6 doc : headingElement t = unsafeCreateElement doc \"h6\"\n\nlet createQ doc : quoteElement t = unsafeCreateElement doc \"q\"\n\nlet createBlockquote doc : quoteElement t = unsafeCreateElement doc \"blockquote\"\n\nlet createPre doc : preElement t = unsafeCreateElement doc \"pre\"\n\nlet createBr doc : brElement t = unsafeCreateElement doc \"br\"\n\nlet createHr doc : hrElement t = unsafeCreateElement doc \"hr\"\n\nlet createIns doc : modElement t = unsafeCreateElement doc \"ins\"\n\nlet createDel doc : modElement t = unsafeCreateElement doc \"del\"\n\nlet createA doc : anchorElement t = unsafeCreateElement doc \"a\"\n\nlet createImg doc : imageElement t = unsafeCreateElement doc \"img\"\n\nlet createObject doc : objectElement t = unsafeCreateElement doc \"object\"\n\nlet createParam doc : paramElement t = unsafeCreateElement doc \"param\"\n\nlet createMap doc : mapElement t = unsafeCreateElement doc \"map\"\n\nlet createArea doc : areaElement t = unsafeCreateElement doc \"area\"\n\nlet createScript doc : scriptElement t = unsafeCreateElement doc \"script\"\n\nlet createTable doc : tableElement t = unsafeCreateElement doc \"table\"\n\nlet createCaption doc : tableCaptionElement t = unsafeCreateElement doc \"caption\"\n\nlet createCol doc : tableColElement t = unsafeCreateElement doc \"col\"\n\nlet createColgroup doc : tableColElement t = unsafeCreateElement doc \"colgroup\"\n\nlet createThead doc : tableSectionElement t = unsafeCreateElement doc \"thead\"\n\nlet createTfoot doc : tableSectionElement t = unsafeCreateElement doc \"tfoot\"\n\nlet createTbody doc : tableSectionElement t = unsafeCreateElement doc \"tbody\"\n\nlet createTr doc : tableRowElement t = unsafeCreateElement doc \"tr\"\n\nlet createTh doc : tableCellElement t = unsafeCreateElement doc \"th\"\n\nlet createTd doc : tableCellElement t = unsafeCreateElement doc \"td\"\n\nlet createSub doc = createElement doc \"sub\"\n\nlet createSup doc = createElement doc \"sup\"\n\nlet createSpan doc = createElement doc \"span\"\n\nlet createTt doc = createElement doc \"tt\"\n\nlet createI doc = createElement doc \"i\"\n\nlet createB doc = createElement doc \"b\"\n\nlet createBig doc = createElement doc \"big\"\n\nlet createSmall doc = createElement doc \"small\"\n\nlet createEm doc = createElement doc \"em\"\n\nlet createStrong doc = createElement doc \"strong\"\n\nlet createCite doc = createElement doc \"cite\"\n\nlet createDfn doc = createElement doc \"dfn\"\n\nlet createCode doc = createElement doc \"code\"\n\nlet createSamp doc = createElement doc \"samp\"\n\nlet createKbd doc = createElement doc \"kbd\"\n\nlet createVar doc = createElement doc \"var\"\n\nlet createAbbr doc = createElement doc \"abbr\"\n\nlet createDd doc = createElement doc \"dd\"\n\nlet createDt doc = createElement doc \"dt\"\n\nlet createNoscript doc = createElement doc \"noscript\"\n\nlet createAddress doc = createElement doc \"address\"\n\nlet createFrameset doc : frameSetElement t = unsafeCreateElement doc \"frameset\"\n\nlet createFrame doc : frameElement t = unsafeCreateElement doc \"frame\"\n\nlet createIframe doc : iFrameElement t = unsafeCreateElement doc \"iframe\"\n\nlet createAudio doc : audioElement t = unsafeCreateElement doc \"audio\"\n\nlet createVideo doc : audioElement t = unsafeCreateElement doc \"video\"\n\nexception Canvas_not_available\n\nlet createCanvas doc : canvasElement t =\n  let c = unsafeCreateElement doc \"canvas\" in\n  if not (Opt.test c##.getContext) then raise Canvas_not_available;\n  c\n\nlet html_element : htmlElement t constr = Js.Unsafe.global##._HTMLElement\n\nmodule CoerceTo = struct\n  let element : #Dom.node Js.t -> element Js.t Js.opt =\n    if def html_element == undefined\n    then\n      (* ie < 9 does not have HTMLElement: we have to cheat to check\n         that something is an html element *)\n      fun e ->\n      if def (Js.Unsafe.coerce e)##.innerHTML == undefined\n      then Js.null\n      else Js.some (Js.Unsafe.coerce e)\n    else\n      fun e ->\n      if Js.instanceof e html_element then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let unsafeCoerce tag (e : #element t) =\n    if e##.tagName##toLowerCase == Js.string tag\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let a e = unsafeCoerce \"a\" e\n\n  let area e = unsafeCoerce \"area\" e\n\n  let base e = unsafeCoerce \"base\" e\n\n  let blockquote e = unsafeCoerce \"blockquote\" e\n\n  let body e = unsafeCoerce \"body\" e\n\n  let br e = unsafeCoerce \"br\" e\n\n  let button e = unsafeCoerce \"button\" e\n\n  let canvas e = unsafeCoerce \"canvas\" e\n\n  let caption e = unsafeCoerce \"caption\" e\n\n  let col e = unsafeCoerce \"col\" e\n\n  let colgroup e = unsafeCoerce \"colgroup\" e\n\n  let del e = unsafeCoerce \"del\" e\n\n  let div e = unsafeCoerce \"div\" e\n\n  let dl e = unsafeCoerce \"dl\" e\n\n  let fieldset e = unsafeCoerce \"fieldset\" e\n\n  let embed e = unsafeCoerce \"embed\" e\n\n  let form e = unsafeCoerce \"form\" e\n\n  let frameset e = unsafeCoerce \"frameset\" e\n\n  let frame e = unsafeCoerce \"frame\" e\n\n  let h1 e = unsafeCoerce \"h1\" e\n\n  let h2 e = unsafeCoerce \"h2\" e\n\n  let h3 e = unsafeCoerce \"h3\" e\n\n  let h4 e = unsafeCoerce \"h4\" e\n\n  let h5 e = unsafeCoerce \"h5\" e\n\n  let h6 e = unsafeCoerce \"h6\" e\n\n  let head e = unsafeCoerce \"head\" e\n\n  let hr e = unsafeCoerce \"hr\" e\n\n  let html e = unsafeCoerce \"html\" e\n\n  let iframe e = unsafeCoerce \"iframe\" e\n\n  let img e = unsafeCoerce \"img\" e\n\n  let input e = unsafeCoerce \"input\" e\n\n  let ins e = unsafeCoerce \"ins\" e\n\n  let label e = unsafeCoerce \"label\" e\n\n  let legend e = unsafeCoerce \"legend\" e\n\n  let li e = unsafeCoerce \"li\" e\n\n  let link e = unsafeCoerce \"link\" e\n\n  let map e = unsafeCoerce \"map\" e\n\n  let meta e = unsafeCoerce \"meta\" e\n\n  let _object e = unsafeCoerce \"object\" e\n\n  let ol e = unsafeCoerce \"ol\" e\n\n  let optgroup e = unsafeCoerce \"optgroup\" e\n\n  let option e = unsafeCoerce \"option\" e\n\n  let p e = unsafeCoerce \"p\" e\n\n  let param e = unsafeCoerce \"param\" e\n\n  let pre e = unsafeCoerce \"pre\" e\n\n  let q e = unsafeCoerce \"q\" e\n\n  let script e = unsafeCoerce \"script\" e\n\n  let select e = unsafeCoerce \"select\" e\n\n  let style e = unsafeCoerce \"style\" e\n\n  let table e = unsafeCoerce \"table\" e\n\n  let tbody e = unsafeCoerce \"tbody\" e\n\n  let td e = unsafeCoerce \"td\" e\n\n  let textarea e = unsafeCoerce \"textarea\" e\n\n  let tfoot e = unsafeCoerce \"tfoot\" e\n\n  let th e = unsafeCoerce \"th\" e\n\n  let thead e = unsafeCoerce \"thead\" e\n\n  let title e = unsafeCoerce \"title\" e\n\n  let tr e = unsafeCoerce \"tr\" e\n\n  let ul e = unsafeCoerce \"ul\" e\n\n  let audio e = unsafeCoerce \"audio\" e\n\n  let video e = unsafeCoerce \"video\" e\n\n  let unsafeCoerceEvent constr (ev : #event t) =\n    if def constr != undefined && Js.instanceof ev constr\n    then Js.some (Js.Unsafe.coerce ev)\n    else Js.null\n\n  let mouseEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseEvent ev\n\n  let keyboardEvent ev = unsafeCoerceEvent Js.Unsafe.global##._KeyboardEvent ev\n\n  let wheelEvent ev = unsafeCoerceEvent Js.Unsafe.global##._WheelEvent ev\n\n  let mouseScrollEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseScrollEvent ev\n\n  let popStateEvent ev = unsafeCoerceEvent Js.Unsafe.global##._PopStateEvent ev\n\n  let messageEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MessageEvent ev\nend\n\n(****)\n\nlet eventTarget = Dom.eventTarget\n\nlet eventRelatedTarget (e : #mouseEvent t) =\n  Optdef.get e##.relatedTarget (fun () ->\n      match Js.to_string e##._type with\n      | \"mouseover\" -> Optdef.get e##.fromElement (fun () -> assert false)\n      | \"mouseout\" -> Optdef.get e##.toElement (fun () -> assert false)\n      | _ -> Js.null)\n\nlet eventAbsolutePosition' (e : #mouseEvent t) =\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( e##.clientX + body##.scrollLeft + html##.scrollLeft\n  , e##.clientY + body##.scrollTop + html##.scrollTop )\n\nlet eventAbsolutePosition (e : #mouseEvent t) =\n  Optdef.case\n    e##.pageX\n    (fun () -> eventAbsolutePosition' e)\n    (fun x -> Optdef.case e##.pageY (fun () -> eventAbsolutePosition' e) (fun y -> x, y))\n\nlet elementClientPosition (e : #element t) =\n  let r = e##getBoundingClientRect in\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( truncate r##.left - body##.clientLeft - html##.clientLeft\n  , truncate r##.top - body##.clientTop - html##.clientTop )\n\nlet getDocumentScroll () =\n  let body = document##.body in\n  let html = document##.documentElement in\n  body##.scrollLeft + html##.scrollLeft, body##.scrollTop + html##.scrollTop\n\nlet buttonPressed (ev : #mouseEvent Js.t) =\n  Js.Optdef.case\n    ev##.which\n    (fun () ->\n      match ev##.button with\n      | 1 -> Left_button\n      | 2 -> Right_button\n      | 4 -> Middle_button\n      | _ -> No_button)\n    (fun x -> x)\n\nlet addMousewheelEventListenerWithOptions e ?capture ?once ?passive h =\n  addEventListenerWithOptions\n    ?capture\n    ?once\n    ?passive\n    e\n    Event.wheel\n    (handler (fun (e : mousewheelEvent t) ->\n         let dx = -Optdef.get e##.wheelDeltaX (fun () -> 0) / 40 in\n         let dy = -Optdef.get e##.wheelDeltaY (fun () -> e##.wheelDelta) / 40 in\n         h (e :> mouseEvent t) ~dx ~dy))\n\nlet addMousewheelEventListener e h capt =\n  addMousewheelEventListenerWithOptions ~capture:capt e h\n\n(*****)\n\nmodule Keyboard_code = struct\n  type t =\n    | Unidentified\n    (* Alphabetic Characters *)\n    | KeyA\n    | KeyB\n    | KeyC\n    | KeyD\n    | KeyE\n    | KeyF\n    | KeyG\n    | KeyH\n    | KeyI\n    | KeyJ\n    | KeyK\n    | KeyL\n    | KeyM\n    | KeyN\n    | KeyO\n    | KeyP\n    | KeyQ\n    | KeyR\n    | KeyS\n    | KeyT\n    | KeyU\n    | KeyV\n    | KeyW\n    | KeyX\n    | KeyY\n    | KeyZ\n    (* Digits *)\n    | Digit0\n    | Digit1\n    | Digit2\n    | Digit3\n    | Digit4\n    | Digit5\n    | Digit6\n    | Digit7\n    | Digit8\n    | Digit9\n    | Minus\n    | Equal\n    (* Whitespace *)\n    | Tab\n    | Enter\n    | Space\n    (* Editing *)\n    | Escape\n    | Backspace\n    | Insert\n    | Delete\n    | CapsLock\n    (* Misc Printable *)\n    | BracketLeft\n    | BracketRight\n    | Semicolon\n    | Quote\n    | Backquote\n    | Backslash\n    | Comma\n    | Period\n    | Slash\n    (* Function keys *)\n    | F1\n    | F2\n    | F3\n    | F4\n    | F5\n    | F6\n    | F7\n    | F8\n    | F9\n    | F10\n    | F11\n    | F12\n    (* Numpad keys *)\n    | Numpad0\n    | Numpad1\n    | Numpad2\n    | Numpad3\n    | Numpad4\n    | Numpad5\n    | Numpad6\n    | Numpad7\n    | Numpad8\n    | Numpad9\n    | NumpadMultiply\n    | NumpadSubtract\n    | NumpadAdd\n    | NumpadDecimal\n    | NumpadEqual\n    | NumpadEnter\n    | NumpadDivide\n    | NumLock\n    (* Modifier keys *)\n    | ControlLeft\n    | ControlRight\n    | MetaLeft\n    | MetaRight\n    | ShiftLeft\n    | ShiftRight\n    | AltLeft\n    | AltRight\n    (* Arrow keys *)\n    | ArrowLeft\n    | ArrowRight\n    | ArrowUp\n    | ArrowDown\n    (* Navigation *)\n    | PageUp\n    | PageDown\n    | Home\n    | End\n    (* Sound *)\n    | VolumeMute\n    | VolumeDown\n    | VolumeUp\n    (* Media *)\n    | MediaTrackPrevious\n    | MediaTrackNext\n    | MediaPlayPause\n    | MediaStop\n    (* Browser special *)\n    | ContextMenu\n    | BrowserSearch\n    | BrowserHome\n    | BrowserFavorites\n    | BrowserRefresh\n    | BrowserStop\n    | BrowserForward\n    | BrowserBack\n    (* Misc *)\n    | OSLeft\n    | OSRight\n    | ScrollLock\n    | PrintScreen\n    | IntlBackslash\n    | IntlYen\n    | Pause\n\n  let try_code v =\n    match Js.to_string v with\n    (* Alphabetic Characters *)\n    | \"KeyA\" -> KeyA\n    | \"KeyB\" -> KeyB\n    | \"KeyC\" -> KeyC\n    | \"KeyD\" -> KeyD\n    | \"KeyE\" -> KeyE\n    | \"KeyF\" -> KeyF\n    | \"KeyG\" -> KeyG\n    | \"KeyH\" -> KeyH\n    | \"KeyI\" -> KeyI\n    | \"KeyJ\" -> KeyJ\n    | \"KeyK\" -> KeyK\n    | \"KeyL\" -> KeyL\n    | \"KeyM\" -> KeyM\n    | \"KeyN\" -> KeyN\n    | \"KeyO\" -> KeyO\n    | \"KeyP\" -> KeyP\n    | \"KeyQ\" -> KeyQ\n    | \"KeyR\" -> KeyR\n    | \"KeyS\" -> KeyS\n    | \"KeyT\" -> KeyT\n    | \"KeyU\" -> KeyU\n    | \"KeyV\" -> KeyV\n    | \"KeyW\" -> KeyW\n    | \"KeyX\" -> KeyX\n    | \"KeyY\" -> KeyY\n    | \"KeyZ\" -> KeyZ\n    (* Digits *)\n    | \"Digit0\" -> Digit0\n    | \"Digit1\" -> Digit1\n    | \"Digit2\" -> Digit2\n    | \"Digit3\" -> Digit3\n    | \"Digit4\" -> Digit4\n    | \"Digit5\" -> Digit5\n    | \"Digit6\" -> Digit6\n    | \"Digit7\" -> Digit7\n    | \"Digit8\" -> Digit8\n    | \"Digit9\" -> Digit9\n    | \"Minus\" -> Minus\n    | \"Equal\" -> Equal\n    (* Whitespace *)\n    | \"Tab\" -> Tab\n    | \"Enter\" -> Enter\n    | \"Space\" -> Space\n    (* Editing *)\n    | \"Escape\" -> Escape\n    | \"Backspace\" -> Backspace\n    | \"Insert\" -> Insert\n    | \"Delete\" -> Delete\n    | \"CapsLock\" -> CapsLock\n    (* Misc Printable *)\n    | \"BracketLeft\" -> BracketLeft\n    | \"BracketRight\" -> BracketRight\n    | \"Semicolon\" -> Semicolon\n    | \"Quote\" -> Quote\n    | \"Backquote\" -> Backquote\n    | \"Backslash\" -> Backslash\n    | \"Comma\" -> Comma\n    | \"Period\" -> Period\n    | \"Slash\" -> Slash\n    (* Function keys *)\n    | \"F1\" -> F1\n    | \"F2\" -> F2\n    | \"F3\" -> F3\n    | \"F4\" -> F4\n    | \"F5\" -> F5\n    | \"F6\" -> F6\n    | \"F7\" -> F7\n    | \"F8\" -> F8\n    | \"F9\" -> F9\n    | \"F10\" -> F10\n    | \"F11\" -> F11\n    | \"F12\" -> F12\n    (* Numpad keys *)\n    | \"Numpad0\" -> Numpad0\n    | \"Numpad1\" -> Numpad1\n    | \"Numpad2\" -> Numpad2\n    | \"Numpad3\" -> Numpad3\n    | \"Numpad4\" -> Numpad4\n    | \"Numpad5\" -> Numpad5\n    | \"Numpad6\" -> Numpad6\n    | \"Numpad7\" -> Numpad7\n    | \"Numpad8\" -> Numpad8\n    | \"Numpad9\" -> Numpad9\n    | \"NumpadMultiply\" -> NumpadMultiply\n    | \"NumpadSubtract\" -> NumpadSubtract\n    | \"NumpadAdd\" -> NumpadAdd\n    | \"NumpadDecimal\" -> NumpadDecimal\n    | \"NumpadEqual\" -> NumpadEqual\n    | \"NumpadEnter\" -> NumpadEnter\n    | \"NumpadDivide\" -> NumpadDivide\n    | \"NumLock\" -> NumLock\n    (* Modifier keys *)\n    | \"ControlLeft\" -> ControlLeft\n    | \"ControlRight\" -> ControlRight\n    | \"MetaLeft\" -> MetaLeft\n    | \"MetaRight\" -> MetaRight\n    | \"ShiftLeft\" -> ShiftLeft\n    | \"ShiftRight\" -> ShiftRight\n    | \"AltLeft\" -> AltLeft\n    | \"AltRight\" -> AltRight\n    (* Arrow keys *)\n    | \"ArrowLeft\" -> ArrowLeft\n    | \"ArrowRight\" -> ArrowRight\n    | \"ArrowUp\" -> ArrowUp\n    | \"ArrowDown\" -> ArrowDown\n    (* Navigation *)\n    | \"PageUp\" -> PageUp\n    | \"PageDown\" -> PageDown\n    | \"Home\" -> Home\n    | \"End\" -> End\n    (* Sound *)\n    | \"VolumeMute\" -> VolumeMute\n    | \"VolumeDown\" -> VolumeDown\n    | \"VolumeUp\" -> VolumeUp\n    (* Media *)\n    | \"MediaTrackPrevious\" -> MediaTrackPrevious\n    | \"MediaTrackNext\" -> MediaTrackNext\n    | \"MediaPlayPause\" -> MediaPlayPause\n    | \"MediaStop\" -> MediaStop\n    (* Browser special *)\n    | \"ContextMenu\" -> ContextMenu\n    | \"BrowserSearch\" -> BrowserSearch\n    | \"BrowserHome\" -> BrowserHome\n    | \"BrowserFavorites\" -> BrowserFavorites\n    | \"BrowserRefresh\" -> BrowserRefresh\n    | \"BrowserStop\" -> BrowserStop\n    | \"BrowserForward\" -> BrowserForward\n    | \"BrowserBack\" -> BrowserBack\n    (* Misc *)\n    | \"OSLeft\" -> OSLeft\n    | \"OSRight\" -> OSRight\n    | \"ScrollLock\" -> ScrollLock\n    | \"PrintScreen\" -> PrintScreen\n    | \"IntlBackslash\" -> IntlBackslash\n    | \"IntlYen\" -> IntlYen\n    | \"Pause\" -> Pause\n    | _ -> Unidentified\n\n  let try_key_code_left = function\n    | 16 -> ShiftLeft\n    | 17 -> ControlLeft\n    | 18 -> AltLeft\n    | 91 -> MetaLeft\n    | _ -> Unidentified\n\n  let try_key_code_right = function\n    | 16 -> ShiftRight\n    | 17 -> ControlRight\n    | 18 -> AltRight\n    | 91 -> MetaRight\n    | _ -> Unidentified\n\n  let try_key_code_numpad = function\n    | 46 -> NumpadDecimal\n    | 45 -> Numpad0\n    | 35 -> Numpad1\n    | 40 -> Numpad2\n    | 34 -> Numpad3\n    | 37 -> Numpad4\n    | 12 -> Numpad5\n    | 39 -> Numpad6\n    | 36 -> Numpad7\n    | 38 -> Numpad8\n    | 33 -> Numpad9\n    | 13 -> NumpadEnter\n    | 111 -> NumpadDivide\n    | 107 -> NumpadAdd\n    | 109 -> NumpadSubtract\n    | 106 -> NumpadMultiply\n    | 110 -> NumpadDecimal\n    | 96 -> Numpad0\n    | 97 -> Numpad1\n    | 98 -> Numpad2\n    | 99 -> Numpad3\n    | 100 -> Numpad4\n    | 101 -> Numpad5\n    | 102 -> Numpad6\n    | 103 -> Numpad7\n    | 104 -> Numpad8\n    | 105 -> Numpad9\n    | _ -> Unidentified\n\n  let try_key_code_normal = function\n    | 27 -> Escape\n    | 112 -> F1\n    | 113 -> F2\n    | 114 -> F3\n    | 115 -> F4\n    | 116 -> F5\n    | 117 -> F6\n    | 118 -> F7\n    | 119 -> F8\n    | 120 -> F9\n    | 121 -> F10\n    | 122 -> F11\n    | 123 -> F12\n    | 42 -> PrintScreen\n    | 145 -> ScrollLock\n    | 19 -> Pause\n    | 192 -> Backquote\n    | 49 -> Digit1\n    | 50 -> Digit2\n    | 51 -> Digit3\n    | 52 -> Digit4\n    | 53 -> Digit5\n    | 54 -> Digit6\n    | 55 -> Digit7\n    | 56 -> Digit8\n    | 57 -> Digit9\n    | 48 -> Digit0\n    | 189 -> Minus\n    | 187 -> Equal\n    | 8 -> Backspace\n    | 9 -> Tab\n    | 81 -> KeyQ\n    | 87 -> KeyW\n    | 69 -> KeyE\n    | 82 -> KeyR\n    | 84 -> KeyT\n    | 89 -> KeyY\n    | 85 -> KeyU\n    | 73 -> KeyI\n    | 79 -> KeyO\n    | 80 -> KeyP\n    | 219 -> BracketLeft\n    | 221 -> BracketRight\n    | 220 -> Backslash\n    | 20 -> CapsLock\n    | 65 -> KeyA\n    | 83 -> KeyS\n    | 68 -> KeyD\n    | 70 -> KeyF\n    | 71 -> KeyG\n    | 72 -> KeyH\n    | 74 -> KeyJ\n    | 75 -> KeyK\n    | 76 -> KeyL\n    | 186 -> Semicolon\n    | 222 -> Quote\n    | 13 -> Enter\n    | 90 -> KeyZ\n    | 88 -> KeyX\n    | 67 -> KeyC\n    | 86 -> KeyV\n    | 66 -> KeyB\n    | 78 -> KeyN\n    | 77 -> KeyM\n    | 188 -> Comma\n    | 190 -> Period\n    | 191 -> Slash\n    | 32 -> Space\n    | 93 -> ContextMenu\n    | 45 -> Insert\n    | 36 -> Home\n    | 33 -> PageUp\n    | 46 -> Delete\n    | 35 -> End\n    | 34 -> PageDown\n    | 37 -> ArrowLeft\n    | 40 -> ArrowDown\n    | 39 -> ArrowRight\n    | 38 -> ArrowUp\n    | _ -> Unidentified\n\n  let make_unidentified _ = Unidentified\n\n  let try_next value f = function\n    | Unidentified -> Optdef.case value make_unidentified f\n    | v -> v\n\n  let run_next value f = function\n    | Unidentified -> f value\n    | v -> v\n\n  let get_key_code evt = evt##.keyCode\n\n  let try_key_location evt =\n    match evt##.location with\n    | 1 -> run_next (get_key_code evt) try_key_code_left\n    | 2 -> run_next (get_key_code evt) try_key_code_right\n    | 3 -> run_next (get_key_code evt) try_key_code_numpad\n    | _ -> make_unidentified\n\n  let ( |> ) x f = f x\n\n  let of_event evt =\n    Unidentified\n    |> try_next evt##.code try_code\n    |> try_key_location evt\n    |> run_next (get_key_code evt) try_key_code_normal\n\n  let of_key_code = try_key_code_normal\nend\n\nmodule Keyboard_key = struct\n  type t = Uchar.t option\n\n  let char_of_int value =\n    if 0 < value then try Some (Uchar.of_int value) with _ -> None else None\n\n  let empty_string _ = Js.string \"\"\n\n  let none _ = None\n\n  let of_event evt =\n    let key = Optdef.get evt##.key empty_string in\n    match key##.length with\n    | 0 -> Optdef.case evt##.charCode none char_of_int\n    | 1 -> char_of_int (int_of_float (key##charCodeAt 0))\n    | _ -> None\nend\n\n(*****)\n\nlet element : #Dom.element t -> element t = Js.Unsafe.coerce\n\ntype taggedElement =\n  | A of anchorElement t\n  | Area of areaElement t\n  | Audio of audioElement t\n  | Base of baseElement t\n  | Blockquote of quoteElement t\n  | Body of bodyElement t\n  | Br of brElement t\n  | Button of buttonElement t\n  | Canvas of canvasElement t\n  | Caption of tableCaptionElement t\n  | Col of tableColElement t\n  | Colgroup of tableColElement t\n  | Del of modElement t\n  | Div of divElement t\n  | Dl of dListElement t\n  | Embed of embedElement t\n  | Fieldset of fieldSetElement t\n  | Form of formElement t\n  | Frameset of frameSetElement t\n  | Frame of frameElement t\n  | H1 of headingElement t\n  | H2 of headingElement t\n  | H3 of headingElement t\n  | H4 of headingElement t\n  | H5 of headingElement t\n  | H6 of headingElement t\n  | Head of headElement t\n  | Hr of hrElement t\n  | Html of htmlElement t\n  | Iframe of iFrameElement t\n  | Img of imageElement t\n  | Input of inputElement t\n  | Ins of modElement t\n  | Label of labelElement t\n  | Legend of legendElement t\n  | Li of liElement t\n  | Link of linkElement t\n  | Map of mapElement t\n  | Meta of metaElement t\n  | Object of objectElement t\n  | Ol of oListElement t\n  | Optgroup of optGroupElement t\n  | Option of optionElement t\n  | P of paramElement t\n  | Param of paramElement t\n  | Pre of preElement t\n  | Q of quoteElement t\n  | Script of scriptElement t\n  | Select of selectElement t\n  | Style of styleElement t\n  | Table of tableElement t\n  | Tbody of tableSectionElement t\n  | Td of tableCellElement t\n  | Textarea of textAreaElement t\n  | Tfoot of tableSectionElement t\n  | Th of tableCellElement t\n  | Thead of tableSectionElement t\n  | Title of titleElement t\n  | Tr of tableRowElement t\n  | Ul of uListElement t\n  | Video of videoElement t\n  | Other of element t\n\nlet other e = Other (e : #element t :> element t)\n\nlet tagged (e : #element t) =\n  let tag = Js.to_bytestring e##.tagName##toLowerCase in\n  if String.length tag = 0\n  then other e\n  else\n    match String.unsafe_get tag 0 with\n    | 'a' -> (\n        match tag with\n        | \"a\" -> A (Js.Unsafe.coerce e)\n        | \"area\" -> Area (Js.Unsafe.coerce e)\n        | \"audio\" -> Audio (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'b' -> (\n        match tag with\n        | \"base\" -> Base (Js.Unsafe.coerce e)\n        | \"blockquote\" -> Blockquote (Js.Unsafe.coerce e)\n        | \"body\" -> Body (Js.Unsafe.coerce e)\n        | \"br\" -> Br (Js.Unsafe.coerce e)\n        | \"button\" -> Button (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'c' -> (\n        match tag with\n        | \"canvas\" -> Canvas (Js.Unsafe.coerce e)\n        | \"caption\" -> Caption (Js.Unsafe.coerce e)\n        | \"col\" -> Col (Js.Unsafe.coerce e)\n        | \"colgroup\" -> Colgroup (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'd' -> (\n        match tag with\n        | \"del\" -> Del (Js.Unsafe.coerce e)\n        | \"div\" -> Div (Js.Unsafe.coerce e)\n        | \"dl\" -> Dl (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'e' -> (\n        match tag with\n        | \"embed\" -> Embed (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'f' -> (\n        match tag with\n        | \"fieldset\" -> Fieldset (Js.Unsafe.coerce e)\n        | \"form\" -> Form (Js.Unsafe.coerce e)\n        | \"frameset\" -> Frameset (Js.Unsafe.coerce e)\n        | \"frame\" -> Frame (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'h' -> (\n        match tag with\n        | \"h1\" -> H1 (Js.Unsafe.coerce e)\n        | \"h2\" -> H2 (Js.Unsafe.coerce e)\n        | \"h3\" -> H3 (Js.Unsafe.coerce e)\n        | \"h4\" -> H4 (Js.Unsafe.coerce e)\n        | \"h5\" -> H5 (Js.Unsafe.coerce e)\n        | \"h6\" -> H6 (Js.Unsafe.coerce e)\n        | \"head\" -> Head (Js.Unsafe.coerce e)\n        | \"hr\" -> Hr (Js.Unsafe.coerce e)\n        | \"html\" -> Html (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'i' -> (\n        match tag with\n        | \"iframe\" -> Iframe (Js.Unsafe.coerce e)\n        | \"img\" -> Img (Js.Unsafe.coerce e)\n        | \"input\" -> Input (Js.Unsafe.coerce e)\n        | \"ins\" -> Ins (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'l' -> (\n        match tag with\n        | \"label\" -> Label (Js.Unsafe.coerce e)\n        | \"legend\" -> Legend (Js.Unsafe.coerce e)\n        | \"li\" -> Li (Js.Unsafe.coerce e)\n        | \"link\" -> Link (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'm' -> (\n        match tag with\n        | \"map\" -> Map (Js.Unsafe.coerce e)\n        | \"meta\" -> Meta (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'o' -> (\n        match tag with\n        | \"object\" -> Object (Js.Unsafe.coerce e)\n        | \"ol\" -> Ol (Js.Unsafe.coerce e)\n        | \"optgroup\" -> Optgroup (Js.Unsafe.coerce e)\n        | \"option\" -> Option (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'p' -> (\n        match tag with\n        | \"p\" -> P (Js.Unsafe.coerce e)\n        | \"param\" -> Param (Js.Unsafe.coerce e)\n        | \"pre\" -> Pre (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'q' -> (\n        match tag with\n        | \"q\" -> Q (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 's' -> (\n        match tag with\n        | \"script\" -> Script (Js.Unsafe.coerce e)\n        | \"select\" -> Select (Js.Unsafe.coerce e)\n        | \"style\" -> Style (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 't' -> (\n        match tag with\n        | \"table\" -> Table (Js.Unsafe.coerce e)\n        | \"tbody\" -> Tbody (Js.Unsafe.coerce e)\n        | \"td\" -> Td (Js.Unsafe.coerce e)\n        | \"textarea\" -> Textarea (Js.Unsafe.coerce e)\n        | \"tfoot\" -> Tfoot (Js.Unsafe.coerce e)\n        | \"th\" -> Th (Js.Unsafe.coerce e)\n        | \"thead\" -> Thead (Js.Unsafe.coerce e)\n        | \"title\" -> Title (Js.Unsafe.coerce e)\n        | \"tr\" -> Tr (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'u' -> (\n        match tag with\n        | \"ul\" -> Ul (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'v' -> (\n        match tag with\n        | \"video\" -> Video (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | _ -> other e\n\nlet opt_tagged e = Opt.case e (fun () -> None) (fun e -> Some (tagged e))\n\ntype taggedEvent =\n  | MouseEvent of mouseEvent t\n  | KeyboardEvent of keyboardEvent t\n  | MessageEvent of messageEvent t\n  | MousewheelEvent of mousewheelEvent t\n  | MouseScrollEvent of mouseScrollEvent t\n  | PopStateEvent of popStateEvent t\n  | OtherEvent of event t\n\nlet taggedEvent (ev : #event Js.t) =\n  Js.Opt.case\n    (CoerceTo.mouseEvent ev)\n    (fun () ->\n      Js.Opt.case\n        (CoerceTo.keyboardEvent ev)\n        (fun () ->\n          Js.Opt.case\n            (CoerceTo.wheelEvent ev)\n            (fun () ->\n              Js.Opt.case\n                (CoerceTo.mouseScrollEvent ev)\n                (fun () ->\n                  Js.Opt.case\n                    (CoerceTo.popStateEvent ev)\n                    (fun () ->\n                      Js.Opt.case\n                        (CoerceTo.messageEvent ev)\n                        (fun () -> OtherEvent (ev :> event t))\n                        (fun ev -> MessageEvent ev))\n                    (fun ev -> PopStateEvent ev))\n                (fun ev -> MouseScrollEvent ev))\n            (fun ev -> MousewheelEvent ev))\n        (fun ev -> KeyboardEvent ev))\n    (fun ev -> MouseEvent ev)\n\nlet opt_taggedEvent ev = Opt.case ev (fun () -> None) (fun ev -> Some (taggedEvent ev))\n\nlet stopPropagation ev =\n  let e = Js.Unsafe.coerce ev in\n  Optdef.case\n    e##.stopPropagation\n    (fun () -> e##.cancelBubble := Js._true)\n    (fun _ -> e##_stopPropagation)\n\nlet _requestAnimationFrame : (unit -> unit) Js.callback -> unit =\n  Js.Unsafe.pure_expr (fun _ ->\n      let w = Js.Unsafe.coerce window in\n      let l =\n        [ w##.requestAnimationFrame\n        ; w##.mozRequestAnimationFrame\n        ; w##.webkitRequestAnimationFrame\n        ; w##.oRequestAnimationFrame\n        ; w##.msRequestAnimationFrame\n        ]\n      in\n      try\n        let req = List.find (fun c -> Js.Optdef.test c) l in\n        fun callback -> Js.Unsafe.fun_call req [| Js.Unsafe.inject callback |]\n      with Not_found ->\n        let now () = (new%js Js.date_now)##getTime in\n        let last = ref (now ()) in\n        fun callback ->\n          let t = now () in\n          let dt = !last +. (1000. /. 60.) -. t in\n          let dt = if Poly.(dt < 0.) then 0. else dt in\n          last := t;\n          ignore (window##setTimeout callback dt))\n\n(****)\n\nlet hasPushState () = Js.Optdef.test (Js.Unsafe.coerce window##.history)##.pushState\n\nlet hasPlaceholder () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.placeholder\n\nlet hasRequired () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.required\n\nlet overflow_limit = 2147483_000.\n\n(* ms *)\n\ntype timeout_id_safe = timeout_id option ref\n\nlet setTimeout callback d : timeout_id_safe =\n  let id = ref None in\n  let rec loop d () =\n    let step, remain =\n      if Poly.(d > overflow_limit) then overflow_limit, d -. overflow_limit else d, 0.\n    in\n    let cb = if Poly.(remain = 0.) then callback else loop remain in\n    id := Some (window##setTimeout (Js.wrap_callback cb) step)\n  in\n  loop d ();\n  id\n\nlet clearTimeout (id : timeout_id_safe) =\n  match !id with\n  | None -> ()\n  | Some x ->\n      id := None;\n      window##clearTimeout x\n\nlet js_array_of_collection (c : #element collection Js.t) : #element Js.t Js.js_array Js.t\n    =\n  Js.Unsafe.(meth_call (js_expr \"[].slice\") \"call\" [| inject c |])\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nclass type ['node] nodeList =\n  object\n    method item : int -> 'node t opt meth\n\n    method length : int readonly_prop\n  end\n\nlet list_of_nodeList (nodeList : 'a nodeList t) =\n  let length = nodeList##.length in\n  let rec add_item acc i =\n    if i < length\n    then\n      match Opt.to_option (nodeList##item i) with\n      | None -> add_item acc (i + 1)\n      | Some e -> add_item (e :: acc) (i + 1)\n    else List.rev acc\n  in\n  add_item [] 0\n\ntype nodeType =\n  | OTHER\n  (* Will not happen *)\n  | ELEMENT\n  | ATTRIBUTE\n  | TEXT\n  | CDATA_SECTION\n  | ENTITY_REFERENCE\n  | ENTITY\n  | PROCESSING_INSTRUCTION\n  | COMMENT\n  | DOCUMENT\n  | DOCUMENT_TYPE\n  | DOCUMENT_FRAGMENT\n  | NOTATION\n\nmodule DocumentPosition = struct\n  type t = int\n\n  type mask = int\n\n  let disconnected = 0x01\n\n  let preceding = 0x02\n\n  let following = 0x04\n\n  let contains = 0x08\n\n  let contained_by = 0x10\n\n  let implementation_specific = 0x20\n\n  let has t mask = t land mask = mask\n\n  let add x y = x lor y\n\n  let ( + ) = add\nend\n\nclass type node =\n  object\n    method nodeName : js_string t readonly_prop\n\n    method nodeValue : js_string t opt readonly_prop\n\n    method nodeType : nodeType readonly_prop\n\n    method parentNode : node t opt prop\n\n    method childNodes : node nodeList t prop\n\n    method firstChild : node t opt prop\n\n    method lastChild : node t opt prop\n\n    method previousSibling : node t opt prop\n\n    method nextSibling : node t opt prop\n\n    method namespaceURI : js_string t opt prop\n\n    method insertBefore : node t -> node t opt -> node t meth\n\n    method replaceChild : node t -> node t -> node t meth\n\n    method removeChild : node t -> node t meth\n\n    method appendChild : node t -> node t meth\n\n    method hasChildNodes : bool t meth\n\n    method cloneNode : bool t -> node t meth\n\n    method compareDocumentPosition : node t -> DocumentPosition.t meth\n\n    method lookupNamespaceURI : js_string t -> js_string t opt meth\n\n    method lookupPrefix : js_string t -> js_string t opt meth\n  end\n\nlet appendChild (p : #node t) (n : #node t) = ignore (p##appendChild (n :> node t))\n\nlet removeChild (p : #node t) (n : #node t) = ignore (p##removeChild (n :> node t))\n\nlet replaceChild (p : #node t) (n : #node t) (o : #node t) =\n  ignore (p##replaceChild (n :> node t) (o :> node t))\n\nlet insertBefore (p : #node t) (n : #node t) (o : #node t opt) =\n  ignore (p##insertBefore (n :> node t) (o :> node t opt))\n\n(** Specification of [Attr] objects. *)\nclass type attr =\n  object\n    inherit node\n\n    method name : js_string t readonly_prop\n\n    method specified : bool t readonly_prop\n\n    method value : js_string t prop\n\n    method ownerElement : element t prop\n  end\n\n(** Specification of [NamedNodeMap] objects. *)\nand ['node] namedNodeMap =\n  object\n    method getNamedItem : js_string t -> 'node t opt meth\n\n    method setNamedItem : 'node t -> 'node t opt meth\n\n    method removeNamedItem : js_string t -> 'node t opt meth\n\n    method item : int -> 'node t opt meth\n\n    method length : int readonly_prop\n  end\n\n(** Specification of [Element] objects. *)\nand element =\n  object\n    inherit node\n\n    method tagName : js_string t readonly_prop\n\n    method getAttribute : js_string t -> js_string t opt meth\n\n    method setAttribute : js_string t -> js_string t -> unit meth\n\n    method removeAttribute : js_string t -> unit meth\n\n    method hasAttribute : js_string t -> bool t meth\n\n    method getAttributeNS : js_string t -> js_string t -> js_string t opt meth\n\n    method setAttributeNS : js_string t -> js_string t -> js_string t -> unit meth\n\n    method removeAttributeNS : js_string t -> js_string t -> unit meth\n\n    method hasAttributeNS : js_string t -> js_string t -> bool t meth\n\n    method getAttributeNode : js_string t -> attr t opt meth\n\n    method setAttributeNode : attr t -> attr t opt meth\n\n    method removeAttributeNode : attr t -> attr t meth\n\n    method getAttributeNodeNS : js_string t -> js_string t -> attr t opt meth\n\n    method setAttributeNodeNS : attr t -> attr t opt meth\n\n    method getElementsByTagName : js_string t -> element nodeList t meth\n\n    method attributes : attr namedNodeMap t readonly_prop\n  end\n\nclass type characterData =\n  object\n    inherit node\n\n    method data : js_string t prop\n\n    method length : int readonly_prop\n\n    method subjs_stringData : int -> int -> js_string t meth\n\n    method appendData : js_string t -> unit meth\n\n    method insertData : int -> js_string t -> unit meth\n\n    method deleteData : int -> int -> unit meth\n\n    method replaceData : int -> int -> js_string t -> unit meth\n  end\n\nclass type comment = characterData\n\nclass type text = characterData\n\nclass type documentFragment = node\n\nclass type ['element] document =\n  object\n    inherit node\n\n    method documentElement : 'element t readonly_prop\n\n    method createDocumentFragment : documentFragment t meth\n\n    method createElement : js_string t -> 'element t meth\n\n    method createElementNS : js_string t -> js_string t -> 'element t meth\n\n    method createTextNode : js_string t -> text t meth\n\n    method createAttribute : js_string t -> attr t meth\n\n    method createComment : js_string t -> comment t meth\n\n    method getElementById : js_string t -> 'element t opt meth\n\n    method getElementsByTagName : js_string t -> 'element nodeList t meth\n\n    method importNode : element t -> bool t -> 'element t meth\n\n    method adoptNode : element t -> 'element t meth\n  end\n\ntype node_type =\n  | Element of element t\n  | Attr of attr t\n  | Text of text t\n  | Other of node t\n\nlet nodeType e =\n  match e##.nodeType with\n  | ELEMENT -> Element (Js.Unsafe.coerce e)\n  | ATTRIBUTE -> Attr (Js.Unsafe.coerce e)\n  | CDATA_SECTION | TEXT -> Text (Js.Unsafe.coerce e)\n  | _ -> Other (e :> node t)\n\nmodule CoerceTo = struct\n  let cast (e : #node Js.t) t =\n    if e##.nodeType == t then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let element e : element Js.t Js.opt = cast e ELEMENT\n\n  let text e : text Js.t Js.opt =\n    if e##.nodeType == TEXT || e##.nodeType == CDATA_SECTION\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let attr e : attr Js.t Js.opt = cast e ATTRIBUTE\nend\n\ntype ('a, 'b) event_listener = ('a, 'b -> bool t) meth_callback opt\n(** The type of event listener functions.  The first type parameter\n      ['a] is the type of the target object; the second parameter\n      ['b] is the type of the event object. *)\n\nclass type ['a] event =\n  object\n    method _type : js_string t readonly_prop\n\n    method target : 'a t opt readonly_prop\n\n    method currentTarget : 'a t opt readonly_prop\n\n    (* Legacy methods *)\n    method srcElement : 'a t opt readonly_prop\n  end\n\nclass type ['a, 'b] customEvent =\n  object\n    inherit ['a] event\n\n    method detail : 'b Js.opt Js.readonly_prop\n  end\n\nlet no_handler : ('a, 'b) event_listener = Js.null\n\nlet window_event () : 'a #event t = Js.Unsafe.pure_js_expr \"event\"\n\n(* The function preventDefault must be called explicitly when\n   using addEventListener... *)\nlet handler f =\n  Js.some\n    (Js.Unsafe.callback (fun e ->\n         (* depending on the internet explorer version, e can be null or undefined. *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet full_handler f =\n  Js.some\n    (Js.Unsafe.meth_callback (fun this e ->\n         (* depending on the internet explorer version, e can be null or undefined *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f this e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f this e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet invoke_handler (f : ('a, 'b) event_listener) (this : 'a) (event : 'b) : bool t =\n  Js.Unsafe.call f this [| Js.Unsafe.inject event |]\n\nlet eventTarget (e : (< .. > as 'a) #event t) : 'a t =\n  let target =\n    Opt.get e##.target (fun () -> Opt.get e##.srcElement (fun () -> raise Not_found))\n  in\n  if Js.instanceof target Js.Unsafe.global##._Node\n  then\n    (* Workaround for Safari bug *)\n    let target' : node Js.t = Js.Unsafe.coerce target in\n    if target'##.nodeType == TEXT\n    then Js.Unsafe.coerce (Opt.get target'##.parentNode (fun () -> assert false))\n    else target\n  else target\n\nmodule Event = struct\n  type 'a typ = Js.js_string Js.t\n\n  let make s = Js.string s\nend\n\ntype event_listener_id = unit -> unit\n\nclass type event_listener_options =\n  object\n    method capture : bool t writeonly_prop\n\n    method once : bool t writeonly_prop\n\n    method passive : bool t writeonly_prop\n  end\n\nlet addEventListenerWithOptions (e : (< .. > as 'a) t) typ ?capture ?once ?passive h =\n  if (Js.Unsafe.coerce e)##.addEventListener == Js.undefined\n  then\n    let ev = (Js.string \"on\")##concat typ in\n    let callback e = Js.Unsafe.call (h, e, [||]) in\n    let () = (Js.Unsafe.coerce e)##attachEvent ev callback in\n    fun () -> (Js.Unsafe.coerce e)##detachEvent ev callback\n  else\n    let opts : event_listener_options t = Js.Unsafe.obj [||] in\n    let iter t f =\n      match t with\n      | None -> ()\n      | Some b -> f b\n    in\n    iter capture (fun b -> opts##.capture := b);\n    iter once (fun b -> opts##.once := b);\n    iter passive (fun b -> opts##.passive := b);\n    let () = (Js.Unsafe.coerce e)##addEventListener typ h opts in\n    fun () -> (Js.Unsafe.coerce e)##removeEventListener typ h opts\n\nlet addEventListener (e : (< .. > as 'a) t) typ h capt =\n  addEventListenerWithOptions e typ ~capture:capt h\n\nlet removeEventListener id = id ()\n\nlet preventDefault ev =\n  if Js.Optdef.test (Js.Unsafe.coerce ev)##.preventDefault (* IE hack *)\n  then (Js.Unsafe.coerce ev)##preventDefault\n  else (Js.Unsafe.coerce ev)##.returnValue := Js.bool false\n\nlet createCustomEvent ?bubbles ?cancelable ?detail typ =\n  let opt_iter f = function\n    | None -> ()\n    | Some x -> f x\n  in\n  let opts = Unsafe.obj [||] in\n  opt_iter (fun x -> opts##.bubbles := bool x) bubbles;\n  opt_iter (fun x -> opts##.cancelable := bool x) cancelable;\n  opt_iter (fun x -> opts##.detail := some x) detail;\n  let constr :\n      (   ('a, 'b) #customEvent Js.t Event.typ\n       -> < detail : 'b opt prop > t\n       -> ('a, 'b) customEvent t)\n      constr =\n    Unsafe.global##._CustomEvent\n  in\n  new%js constr typ opts\n\n(* IE < 9 *)\n\nclass type stringList =\n  object\n    method item : int -> js_string t opt meth\n\n    method length : int readonly_prop\n\n    method contains : js_string t -> bool t meth\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n"]}
